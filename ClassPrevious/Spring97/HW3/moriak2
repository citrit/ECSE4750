#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  MRIHead.tcl MRIHeadDecimate.tcl Sample.tcl
#   SampleDecimate.tcl hedgehog.tcl prob1.tcl prob2.tcl streamline.tcl
#   vectordot.tcl vectornorm.tcl warpvector.tcl
# Wrapped by moriartk@fridge.cs.rpi.edu on Tue Apr 15 23:22:57 1997
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive."'
if test -f 'MRIHead.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MRIHead.tcl'\"
else
  echo shar: Extracting \"'MRIHead.tcl'\" \(1242 characters\)
  sed "s/^X//" >'MRIHead.tcl' <<'END_OF_FILE'
X# If you are using Window95 and vtk 1.3 uncomment the line below
X# load vtktcl;
X
X# get the interactor ui
Xsource vtkInt.tcl
X
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren   [$renWin MakeRenderWindowInteractor];
X
X#
X# Load up the data
XvtkStructuredPointsReader vol;
X    vol SetFilename "MRIdata.vtk"
X    vol DebugOn;
X
XvtkMarchingCubes contour;
X  contour SetInput [vol GetOutput];
X  contour SetValue 0 225.0;
X
XvtkPolyMapper volMapper;
X  volMapper SetInput [contour GetOutput];
X  volMapper ScalarsVisibleOff;
X
XvtkActor volActor;
X  volActor SetMapper volMapper;
X
XvtkOutlineFilter outLine;
X  outLine SetInput [vol GetOutput];
X
XvtkPolyMapper outMapper;
X  outMapper SetInput [outLine GetOutput];
X
XvtkActor outActor;
X  outActor SetMapper outMapper;
X
X# Add the actors to the renderer, set the background and size
X#
X$ren1 AddActors outActor;
X$ren1 AddActors volActor;
X$ren1 SetBackground 0 0 0;
X$renWin SetSize 500 400;
X$iren Initialize;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
Xsource ./prob2.tcl
END_OF_FILE
  if test 1242 -ne `wc -c <'MRIHead.tcl'`; then
    echo shar: \"'MRIHead.tcl'\" unpacked with wrong size!
  fi
  # end of 'MRIHead.tcl'
fi
if test -f 'MRIHeadDecimate.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MRIHeadDecimate.tcl'\"
else
  echo shar: Extracting \"'MRIHeadDecimate.tcl'\" \(1587 characters\)
  sed "s/^X//" >'MRIHeadDecimate.tcl' <<'END_OF_FILE'
X# If you are using Window95 and vtk 1.3 uncomment the line below
X# load vtktcl;
X
X# get the interactor ui
Xsource vtkInt.tcl
X
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren   [$renWin MakeRenderWindowInteractor];
X
X#
X# Load up the data
XvtkStructuredPointsReader vol;
X    vol SetFilename "MRIdata.vtk"
X    vol DebugOn;
X
XvtkMarchingCubes contour;
X  contour SetInput [vol GetOutput];
X  contour SetValue 0 225.0;
X
XvtkDecimate deci;
X  deci SetInput [contour GetOutput];
X  deci SetTargetReduction 0.9;
X  deci SetAspectRatio 20;
X  deci SetInitialError 0.0005;
X  deci SetErrorIncrement 0.001;
X  deci SetMaximumIterations 6;
X  deci SetInitialFeatureAngle 30;
X
XvtkConnectivityFilter connect;
X  connect SetInput [deci GetOutput];
X  connect ExtractLargestRegion;
X
XvtkDataSetMapper volMapper;
X  volMapper SetInput [connect GetOutput];
X  volMapper ScalarsVisibleOff;
X
XvtkActor volActor;
X  volActor SetMapper volMapper;
X
XvtkOutlineFilter outLine;
X  outLine SetInput [vol GetOutput];
X
XvtkPolyMapper outMapper;
X  outMapper SetInput [outLine GetOutput];
X
XvtkActor outActor;
X  outActor SetMapper outMapper;
X
X# Add the actors to the renderer, set the background and size
X#
X$ren1 AddActors outActor;
X$ren1 AddActors volActor;
X$ren1 SetBackground 0 0 0;
X$renWin SetSize 500 400;
X$iren Initialize;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
Xsource ./prob2.tcl
END_OF_FILE
  if test 1587 -ne `wc -c <'MRIHeadDecimate.tcl'`; then
    echo shar: \"'MRIHeadDecimate.tcl'\" unpacked with wrong size!
  fi
  # end of 'MRIHeadDecimate.tcl'
fi
if test -f 'Sample.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Sample.tcl'\"
else
  echo shar: Extracting \"'Sample.tcl'\" \(968 characters\)
  sed "s/^X//" >'Sample.tcl' <<'END_OF_FILE'
X#load vtktcl;
X# user interface command widget
Xsource ./vtkInt.tcl
X
X# create a rendering window and renderer
XvtkRenderMaster rm;
Xset renWin [rm MakeRenderWindow];
Xset ren1 [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
XvtkQuadric quad;
X  quad SetCoefficients 0.5 1 .2 0 .1 0 0 .2 0 0;
XvtkSampleFunction sample;
X  sample SetSampleDimensions 20 20 20;
X  sample SetImplicitFunction quad;
XvtkContourFilter contours;
X  contours SetInput [sample GetOutput];
X  contours GenerateValues 5 0.0 1.2;
XvtkPolyMapper contMapper;
X  contMapper SetInput [contours GetOutput];
X  contMapper SetScalarRange 0.0 1.2;
XvtkActor contActor;
X  contActor SetMapper contMapper;
X
X# assign our actor to the renderer
X$ren1 SetBackground 1 1 1;
X$ren1 AddActors contActor;
X
X# enable user interface interactor
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$iren Initialize;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
Xsource ./prob1.tcl
END_OF_FILE
  if test 968 -ne `wc -c <'Sample.tcl'`; then
    echo shar: \"'Sample.tcl'\" unpacked with wrong size!
  fi
  # end of 'Sample.tcl'
fi
if test -f 'SampleDecimate.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'SampleDecimate.tcl'\"
else
  echo shar: Extracting \"'SampleDecimate.tcl'\" \(1309 characters\)
  sed "s/^X//" >'SampleDecimate.tcl' <<'END_OF_FILE'
X#load vtktcl;
X# user interface command widget
Xsource ./vtkInt.tcl
X
X# create a rendering window and renderer
XvtkRenderMaster rm;
Xset renWin [rm MakeRenderWindow];
Xset ren1 [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
XvtkQuadric quad;
X  quad SetCoefficients 0.5 1 .2 0 .1 0 0 .2 0 0;
XvtkSampleFunction sample;
X  sample SetSampleDimensions 20 20 20;
X  sample SetImplicitFunction quad;
XvtkContourFilter contours;
X  contours SetInput [sample GetOutput];
X  contours GenerateValues 5 0.0 1.2;
X
XvtkDecimate deci;
X  deci SetInput [contours GetOutput];
X  deci SetTargetReduction 0.9;
X  deci SetAspectRatio 20;
X  deci SetInitialError 0.0005;
X  deci SetErrorIncrement 0.001;
X  deci SetMaximumIterations 6;
X  deci SetInitialFeatureAngle 30;
X
XvtkConnectivityFilter connect;
X  connect SetInput [deci GetOutput];
X  connect ExtractLargestRegion;
X
XvtkDataSetMapper contMapper;
X  contMapper SetInput [connect GetOutput];
X  contMapper ScalarsVisibleOn;
X
XvtkActor contActor;
X  contActor SetMapper contMapper;
X
X# assign our actor to the renderer
X$ren1 SetBackground 1 1 1;
X$ren1 AddActors contActor;
X
X# enable user interface interactor
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$iren Initialize;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
Xsource ./prob1.tcl
END_OF_FILE
  if test 1309 -ne `wc -c <'SampleDecimate.tcl'`; then
    echo shar: \"'SampleDecimate.tcl'\" unpacked with wrong size!
  fi
  # end of 'SampleDecimate.tcl'
fi
if test -f 'hedgehog.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hedgehog.tcl'\"
else
  echo shar: Extracting \"'hedgehog.tcl'\" \(3477 characters\)
  sed "s/^X//" >'hedgehog.tcl' <<'END_OF_FILE'
X#unommet the line below if you are on Windows95
X# load vtktcl;
X# get the interactor ui
Xsource vtkInt.tcl
X
X# create planes
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer and both Actors
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
X# create pipeline
X#
XvtkPLOT3DReader pl3d;
X    pl3d SetXYZFilename "combxyz.bin"
X    pl3d SetQFilename "combq.bin"
X    pl3d SetScalarFunctionNumber 100;
X    pl3d SetVectorFunctionNumber 202;
X    pl3d Update;
X
XvtkPlaneSource plane;
X    plane SetResolution 50 50;
XvtkTransform transP1;
X    transP1 Translate 3.7 0.0 28.37;
X    transP1 Scale 5 5 5;
X    transP1 RotateY 90;
XvtkTransformPolyFilter tpd1
X    tpd1 SetInput [plane GetOutput];
X    tpd1 SetTransform transP1;
XvtkOutlineFilter outTpd1;
X    outTpd1 SetInput [tpd1 GetOutput];
XvtkPolyMapper mapTpd1;
X    mapTpd1 SetInput [outTpd1 GetOutput];
XvtkActor tpd1Actor;
X    tpd1Actor SetMapper mapTpd1;
X    [tpd1Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP2;
X    transP2 Translate 9.2 0.0 31.20;
X    transP2 Scale 5 5 5;
X    transP2 RotateY 90;
XvtkTransformPolyFilter tpd2
X    tpd2 SetInput [plane GetOutput];
X    tpd2 SetTransform transP2;
XvtkOutlineFilter outTpd2;
X    outTpd2 SetInput [tpd2 GetOutput];
XvtkPolyMapper mapTpd2;
X    mapTpd2 SetInput [outTpd2 GetOutput];
XvtkActor tpd2Actor;
X    tpd2Actor SetMapper mapTpd2;
X    [tpd2Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP3;
X    transP3 Translate 13.27 0.0 33.30;
X    transP3 Scale 5 5 5;
X    transP3 RotateY 90;
XvtkTransformPolyFilter tpd3
X    tpd3 SetInput [plane GetOutput];
X    tpd3 SetTransform transP3;
XvtkOutlineFilter outTpd3;
X    outTpd3 SetInput [tpd3 GetOutput];
XvtkPolyMapper mapTpd3;
X    mapTpd3 SetInput [outTpd3 GetOutput];
XvtkActor tpd3Actor;
X    tpd3Actor SetMapper mapTpd3;
X    [tpd3Actor GetProperty] SetColor 0 0 0;
X
XvtkAppendPolyData appendF;
X    appendF AddInput [tpd1 GetOutput];
X    appendF AddInput [tpd2 GetOutput];
X    appendF AddInput [tpd3 GetOutput];
X
XvtkProbeFilter probe;
X    probe SetInput [appendF GetOutput];
X    probe SetSource [pl3d GetOutput];
X
XvtkHedgeHog hedge;
X    hedge SetInput [probe GetOutput ];
X    hedge SetScaleFactor 0.02;
X
X#vtkContourFilter contour;
X#    contour SetInput [probe GetOutput];
X#    eval contour GenerateValues 50 [[pl3d GetOutput] GetScalarRange];
X
XvtkPolyMapper contourMapper;
X    contourMapper SetInput [hedge GetOutput];
X    eval contourMapper SetScalarRange [[pl3d GetOutput] GetScalarRange];
XvtkActor planeActor;
X    planeActor SetMapper contourMapper;
X
XvtkStructuredGridOutlineFilter outline;
X    outline SetInput [pl3d GetOutput];
XvtkPolyMapper outlineMapper;
X    outlineMapper SetInput [outline GetOutput];
XvtkActor outlineActor;
X    outlineActor SetMapper outlineMapper;
X    [outlineActor GetProperty] SetColor 0 0 0;
X
X$ren1 AddActors outlineActor;
X$ren1 AddActors planeActor;
X$ren1 AddActors tpd1Actor;
X$ren1 AddActors tpd2Actor;
X$ren1 AddActors tpd3Actor;
X$ren1 SetBackground 1 1 1;
X$renWin SetSize 500 500;
X$iren Initialize;
X
Xset cam1 [$ren1 GetActiveCamera];
X$cam1 SetClippingRange 3.95297 50;
X$cam1 SetFocalPoint 8.88908 0.595038 29.3342;
X$cam1 SetPosition -12.3332 31.7479 41.2387;
X$cam1 CalcViewPlaneNormal;
X$cam1 SetViewUp 0.060772 -0.319905 0.945498;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
X
X
END_OF_FILE
  if test 3477 -ne `wc -c <'hedgehog.tcl'`; then
    echo shar: \"'hedgehog.tcl'\" unpacked with wrong size!
  fi
  # end of 'hedgehog.tcl'
fi
if test -f 'prob1.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'prob1.tcl'\"
else
  echo shar: Extracting \"'prob1.tcl'\" \(323 characters\)
  sed "s/^X//" >'prob1.tcl' <<'END_OF_FILE'
X  for {set i 1} { $i < 7 } { incr i } {
X    contours GenerateValues 5 0.$i 1.2;
X    $iren Initialize;
X    }
Xfor {set j 2} { $j < 6 } { incr j } {
X    contours GenerateValues 5 0.7 1.$j;
X    $iren Initialize;
X    }
Xfor {set k 5} { $k > 0 } { incr k -1 } {
X    contours GenerateValues $k 0.7 1.6;
X    $iren Initialize;
X    }
END_OF_FILE
  if test 323 -ne `wc -c <'prob1.tcl'`; then
    echo shar: \"'prob1.tcl'\" unpacked with wrong size!
  fi
  # end of 'prob1.tcl'
fi
if test -f 'prob2.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'prob2.tcl'\"
else
  echo shar: Extracting \"'prob2.tcl'\" \(105 characters\)
  sed "s/^X//" >'prob2.tcl' <<'END_OF_FILE'
X  for {set i 225 } { $i > 50 } { incr i -15 } {
X    contour SetValue 0 $i.0;
X    $iren Initialize;
X    }
END_OF_FILE
  if test 105 -ne `wc -c <'prob2.tcl'`; then
    echo shar: \"'prob2.tcl'\" unpacked with wrong size!
  fi
  # end of 'prob2.tcl'
fi
if test -f 'streamline.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'streamline.tcl'\"
else
  echo shar: Extracting \"'streamline.tcl'\" \(3880 characters\)
  sed "s/^X//" >'streamline.tcl' <<'END_OF_FILE'
X#unommet the line below if you are on Windows95
X# load vtktcl;
X# get the interactor ui
Xsource vtkInt.tcl
X
X# create planes
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer and both Actors
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
X# create pipeline
X#
XvtkPLOT3DReader pl3d;
X    pl3d SetXYZFilename "combxyz.bin"
X    pl3d SetQFilename "combq.bin"
X    pl3d SetScalarFunctionNumber 100;
X    pl3d SetVectorFunctionNumber 202;
X    pl3d Update;
X
XvtkPlaneSource plane;
X    plane SetResolution 50 50;
XvtkTransform transP1;
X    transP1 Translate 3.7 0.0 28.37;
X    transP1 Scale 5 5 5;
X    transP1 RotateY 90;
XvtkTransformPolyFilter tpd1
X    tpd1 SetInput [plane GetOutput];
X    tpd1 SetTransform transP1;
XvtkOutlineFilter outTpd1;
X    outTpd1 SetInput [tpd1 GetOutput];
XvtkPolyMapper mapTpd1;
X    mapTpd1 SetInput [outTpd1 GetOutput];
XvtkActor tpd1Actor;
X    tpd1Actor SetMapper mapTpd1;
X    [tpd1Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP2;
X    transP2 Translate 9.2 0.0 31.20;
X    transP2 Scale 5 5 5;
X    transP2 RotateY 90;
XvtkTransformPolyFilter tpd2
X    tpd2 SetInput [plane GetOutput];
X    tpd2 SetTransform transP2;
XvtkOutlineFilter outTpd2;
X    outTpd2 SetInput [tpd2 GetOutput];
XvtkPolyMapper mapTpd2;
X    mapTpd2 SetInput [outTpd2 GetOutput];
XvtkActor tpd2Actor;
X    tpd2Actor SetMapper mapTpd2;
X    [tpd2Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP3;
X    transP3 Translate 13.27 0.0 33.30;
X    transP3 Scale 5 5 5;
X    transP3 RotateY 90;
XvtkTransformPolyFilter tpd3
X    tpd3 SetInput [plane GetOutput];
X    tpd3 SetTransform transP3;
XvtkOutlineFilter outTpd3;
X    outTpd3 SetInput [tpd3 GetOutput];
XvtkPolyMapper mapTpd3;
X    mapTpd3 SetInput [outTpd3 GetOutput];
XvtkActor tpd3Actor;
X    tpd3Actor SetMapper mapTpd3;
X    [tpd3Actor GetProperty] SetColor 0 0 0;
X
XvtkAppendPolyData appendF;
X    appendF AddInput [tpd1 GetOutput];
X    appendF AddInput [tpd2 GetOutput];
X    appendF AddInput [tpd3 GetOutput];
X
XvtkProbeFilter probe;
X    probe SetInput [appendF GetOutput];
X    probe SetSource [pl3d GetOutput];
X
XvtkContourFilter contour;
X    contour SetInput [probe GetOutput];
X    eval contour GenerateValues 50 [[pl3d GetOutput] GetScalarRange];
X
XvtkPointSource points;
X     points SetNumberOfPoints 200;
X     points SetCenter 0.8 -12.2 0.03;
X
XvtkStreamLine stream;
X    stream SetInput [pl3d GetOutput];
X    stream SetSource [points GetOutput];
X    stream SetMaximumPropagationTime 100;
X    stream SpeedScalarsOn;
X    stream SetIntegrationStepLength 0.02;
X    stream SetStepLength 0.02;
X    stream Update;
X    # smaller values result in smoother streamlines, but greater number
X    # of line primitives.
X
XvtkPolyMapper contourMapper;
X    contourMapper SetInput [stream GetOutput];
X    contourMapper ScalarsVisibleOn;
X    eval contourMapper SetScalarRange [[pl3d GetOutput] GetScalarRange];
X
XvtkActor planeActor;
X    planeActor SetMapper contourMapper;
X
XvtkStructuredGridOutlineFilter outline;
X    outline SetInput [pl3d GetOutput];
XvtkPolyMapper outlineMapper;
X    outlineMapper SetInput [outline GetOutput];
XvtkActor outlineActor;
X    outlineActor SetMapper outlineMapper;
X    [outlineActor GetProperty] SetColor 0 0 0;
X
X$ren1 AddActors outlineActor;
X$ren1 AddActors planeActor;
X$ren1 AddActors tpd1Actor;
X$ren1 AddActors tpd2Actor;
X$ren1 AddActors tpd3Actor;
X$ren1 SetBackground 1 1 1;
X$renWin SetSize 500 500;
X$iren Initialize;
X
Xset cam1 [$ren1 GetActiveCamera];
X$cam1 SetClippingRange 3.95297 50;
X$cam1 SetFocalPoint 8.88908 0.595038 29.3342;
X$cam1 SetPosition -12.3332 31.7479 41.2387;
X$cam1 CalcViewPlaneNormal;
X$cam1 SetViewUp 0.060772 -0.319905 0.945498;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
X
X
END_OF_FILE
  if test 3880 -ne `wc -c <'streamline.tcl'`; then
    echo shar: \"'streamline.tcl'\" unpacked with wrong size!
  fi
  # end of 'streamline.tcl'
fi
if test -f 'vectordot.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vectordot.tcl'\"
else
  echo shar: Extracting \"'vectordot.tcl'\" \(3533 characters\)
  sed "s/^X//" >'vectordot.tcl' <<'END_OF_FILE'
X#unommet the line below if you are on Windows95
X# load vtktcl;
X# get the interactor ui
Xsource vtkInt.tcl
X
X# create planes
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer and both Actors
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
X# create pipeline
X#
XvtkPLOT3DReader pl3d;
X    pl3d SetXYZFilename "combxyz.bin"
X    pl3d SetQFilename "combq.bin"
X    pl3d SetScalarFunctionNumber 100;
X    pl3d SetVectorFunctionNumber 202;
X    pl3d Update;
X
XvtkPlaneSource plane;
X    plane SetResolution 50 50;
XvtkTransform transP1;
X    transP1 Translate 3.7 0.0 28.37;
X    transP1 Scale 5 5 5;
X    transP1 RotateY 90;
XvtkTransformPolyFilter tpd1
X    tpd1 SetInput [plane GetOutput];
X    tpd1 SetTransform transP1;
XvtkOutlineFilter outTpd1;
X    outTpd1 SetInput [tpd1 GetOutput];
XvtkPolyMapper mapTpd1;
X    mapTpd1 SetInput [outTpd1 GetOutput];
XvtkActor tpd1Actor;
X    tpd1Actor SetMapper mapTpd1;
X    [tpd1Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP2;
X    transP2 Translate 9.2 0.0 31.20;
X    transP2 Scale 5 5 5;
X    transP2 RotateY 90;
XvtkTransformPolyFilter tpd2
X    tpd2 SetInput [plane GetOutput];
X    tpd2 SetTransform transP2;
XvtkOutlineFilter outTpd2;
X    outTpd2 SetInput [tpd2 GetOutput];
XvtkPolyMapper mapTpd2;
X    mapTpd2 SetInput [outTpd2 GetOutput];
XvtkActor tpd2Actor;
X    tpd2Actor SetMapper mapTpd2;
X    [tpd2Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP3;
X    transP3 Translate 13.27 0.0 33.30;
X    transP3 Scale 5 5 5;
X    transP3 RotateY 90;
XvtkTransformPolyFilter tpd3
X    tpd3 SetInput [plane GetOutput];
X    tpd3 SetTransform transP3;
XvtkOutlineFilter outTpd3;
X    outTpd3 SetInput [tpd3 GetOutput];
XvtkPolyMapper mapTpd3;
X    mapTpd3 SetInput [outTpd3 GetOutput];
XvtkActor tpd3Actor;
X    tpd3Actor SetMapper mapTpd3;
X    [tpd3Actor GetProperty] SetColor 0 0 0;
X
XvtkAppendPolyData appendF;
X    appendF AddInput [tpd1 GetOutput];
X    appendF AddInput [tpd2 GetOutput];
X    appendF AddInput [tpd3 GetOutput];
X
XvtkProbeFilter probe;
X    probe SetInput [appendF GetOutput];
X    probe SetSource [pl3d GetOutput];
X
XvtkVectorDot dot;
X    dot SetInput [probe GetOutput];
X    dot SetScalarRange -1.0 1.0;
X    dot Update;
X    #eval dot SetScalarRange [[pl3d GetOutput] GetScalarRange];
X    # generate scalars from dot product of vectors and
X    # normals (e.g., show displacement plot)
X
XvtkDataSetMapper dotMapper;
X    dotMapper SetInput [dot GetOutput];
X    #eval dotMapper SetScalarRange [[pl3d GetOutput] GetScalarRange];
X    dotMapper ScalarsVisibleOn;
XvtkActor planeActor;
X    planeActor SetMapper dotMapper;
X
XvtkStructuredGridOutlineFilter outline;
X    outline SetInput [pl3d GetOutput];
XvtkPolyMapper outlineMapper;
X    outlineMapper SetInput [outline GetOutput];
XvtkActor outlineActor;
X    outlineActor SetMapper outlineMapper;
X    [outlineActor GetProperty] SetColor 0 0 0;
X
X$ren1 AddActors outlineActor;
X$ren1 AddActors planeActor;
X$ren1 AddActors tpd1Actor;
X$ren1 AddActors tpd2Actor;
X$ren1 AddActors tpd3Actor;
X$ren1 SetBackground 1 1 1;
X$renWin SetSize 500 500;
X$iren Initialize;
X
Xset cam1 [$ren1 GetActiveCamera];
X$cam1 SetClippingRange 3.95297 50;
X$cam1 SetFocalPoint 8.88908 0.595038 29.3342;
X$cam1 SetPosition -12.3332 31.7479 41.2387;
X$cam1 CalcViewPlaneNormal;
X$cam1 SetViewUp 0.060772 -0.319905 0.945498;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
X
X
END_OF_FILE
  if test 3533 -ne `wc -c <'vectordot.tcl'`; then
    echo shar: \"'vectordot.tcl'\" unpacked with wrong size!
  fi
  # end of 'vectordot.tcl'
fi
if test -f 'vectornorm.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'vectornorm.tcl'\"
else
  echo shar: Extracting \"'vectornorm.tcl'\" \(3345 characters\)
  sed "s/^X//" >'vectornorm.tcl' <<'END_OF_FILE'
X#unommet the line below if you are on Windows95
X# load vtktcl;
X# get the interactor ui
Xsource vtkInt.tcl
X
X# create planes
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer and both Actors
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
X# create pipeline
X#
XvtkPLOT3DReader pl3d;
X    pl3d SetXYZFilename "combxyz.bin"
X    pl3d SetQFilename "combq.bin"
X    pl3d SetScalarFunctionNumber 100;
X    pl3d SetVectorFunctionNumber 202;
X    pl3d Update;
X
XvtkPlaneSource plane;
X    plane SetResolution 50 50;
XvtkTransform transP1;
X    transP1 Translate 3.7 0.0 28.37;
X    transP1 Scale 5 5 5;
X    transP1 RotateY 90;
XvtkTransformPolyFilter tpd1
X    tpd1 SetInput [plane GetOutput];
X    tpd1 SetTransform transP1;
XvtkOutlineFilter outTpd1;
X    outTpd1 SetInput [tpd1 GetOutput];
XvtkPolyMapper mapTpd1;
X    mapTpd1 SetInput [outTpd1 GetOutput];
XvtkActor tpd1Actor;
X    tpd1Actor SetMapper mapTpd1;
X    [tpd1Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP2;
X    transP2 Translate 9.2 0.0 31.20;
X    transP2 Scale 5 5 5;
X    transP2 RotateY 90;
XvtkTransformPolyFilter tpd2
X    tpd2 SetInput [plane GetOutput];
X    tpd2 SetTransform transP2;
XvtkOutlineFilter outTpd2;
X    outTpd2 SetInput [tpd2 GetOutput];
XvtkPolyMapper mapTpd2;
X    mapTpd2 SetInput [outTpd2 GetOutput];
XvtkActor tpd2Actor;
X    tpd2Actor SetMapper mapTpd2;
X    [tpd2Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP3;
X    transP3 Translate 13.27 0.0 33.30;
X    transP3 Scale 5 5 5;
X    transP3 RotateY 90;
XvtkTransformPolyFilter tpd3
X    tpd3 SetInput [plane GetOutput];
X    tpd3 SetTransform transP3;
XvtkOutlineFilter outTpd3;
X    outTpd3 SetInput [tpd3 GetOutput];
XvtkPolyMapper mapTpd3;
X    mapTpd3 SetInput [outTpd3 GetOutput];
XvtkActor tpd3Actor;
X    tpd3Actor SetMapper mapTpd3;
X    [tpd3Actor GetProperty] SetColor 0 0 0;
X
XvtkAppendPolyData appendF;
X    appendF AddInput [tpd1 GetOutput];
X    appendF AddInput [tpd2 GetOutput];
X    appendF AddInput [tpd3 GetOutput];
X
XvtkProbeFilter probe;
X    probe SetInput [appendF GetOutput];
X    probe SetSource [pl3d GetOutput];
X
XvtkVectorNorm norm;
X    norm SetInput [probe GetOutput];
X    norm SetNormalize 1;
X    # should be a number between 1 and 0, takes an int value
X
XvtkDataSetMapper normMapper;
X    normMapper SetInput [norm GetOutput];
X    normMapper ScalarsVisibleOn;
X
XvtkActor planeActor;
X    planeActor SetMapper normMapper;
X
XvtkStructuredGridOutlineFilter outline;
X    outline SetInput [pl3d GetOutput];
XvtkPolyMapper outlineMapper;
X    outlineMapper SetInput [outline GetOutput];
XvtkActor outlineActor;
X    outlineActor SetMapper outlineMapper;
X    [outlineActor GetProperty] SetColor 0 0 0;
X
X$ren1 AddActors outlineActor;
X$ren1 AddActors planeActor;
X$ren1 AddActors tpd1Actor;
X$ren1 AddActors tpd2Actor;
X$ren1 AddActors tpd3Actor;
X$ren1 SetBackground 1 1 1;
X$renWin SetSize 500 500;
X$iren Initialize;
X
Xset cam1 [$ren1 GetActiveCamera];
X$cam1 SetClippingRange 3.95297 50;
X$cam1 SetFocalPoint 8.88908 0.595038 29.3342;
X$cam1 SetPosition -12.3332 31.7479 41.2387;
X$cam1 CalcViewPlaneNormal;
X$cam1 SetViewUp 0.060772 -0.319905 0.945498;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
X
X
END_OF_FILE
  if test 3345 -ne `wc -c <'vectornorm.tcl'`; then
    echo shar: \"'vectornorm.tcl'\" unpacked with wrong size!
  fi
  # end of 'vectornorm.tcl'
fi
if test -f 'warpvector.tcl' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'warpvector.tcl'\"
else
  echo shar: Extracting \"'warpvector.tcl'\" \(3626 characters\)
  sed "s/^X//" >'warpvector.tcl' <<'END_OF_FILE'
X#unommet the line below if you are on Windows95
X# load vtktcl;
X# get the interactor ui
Xsource vtkInt.tcl
X
X# create planes
X# First create the render master
XvtkRenderMaster rm;
X
X# Now create the RenderWindow, Renderer and both Actors
X#
Xset renWin [rm MakeRenderWindow];
Xset ren1   [$renWin MakeRenderer];
Xset iren [$renWin MakeRenderWindowInteractor];
X
X# create pipeline
X#
XvtkPLOT3DReader pl3d;
X    pl3d SetXYZFilename "combxyz.bin"
X    pl3d SetQFilename "combq.bin"
X    pl3d SetScalarFunctionNumber 100;
X    pl3d SetVectorFunctionNumber 202;
X    pl3d Update;
X
XvtkPlaneSource plane;
X    plane SetResolution 50 50;
XvtkTransform transP1;
X    transP1 Translate 3.7 0.0 28.37;
X    transP1 Scale 5 5 5;
X    transP1 RotateY 90;
XvtkTransformPolyFilter tpd1
X    tpd1 SetInput [plane GetOutput];
X    tpd1 SetTransform transP1;
XvtkOutlineFilter outTpd1;
X    outTpd1 SetInput [tpd1 GetOutput];
XvtkPolyMapper mapTpd1;
X    mapTpd1 SetInput [outTpd1 GetOutput];
XvtkActor tpd1Actor;
X    tpd1Actor SetMapper mapTpd1;
X    [tpd1Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP2;
X    transP2 Translate 9.2 0.0 31.20;
X    transP2 Scale 5 5 5;
X    transP2 RotateY 90;
XvtkTransformPolyFilter tpd2
X    tpd2 SetInput [plane GetOutput];
X    tpd2 SetTransform transP2;
XvtkOutlineFilter outTpd2;
X    outTpd2 SetInput [tpd2 GetOutput];
XvtkPolyMapper mapTpd2;
X    mapTpd2 SetInput [outTpd2 GetOutput];
XvtkActor tpd2Actor;
X    tpd2Actor SetMapper mapTpd2;
X    [tpd2Actor GetProperty] SetColor 0 0 0;
X
XvtkTransform transP3;
X    transP3 Translate 13.27 0.0 33.30;
X    transP3 Scale 5 5 5;
X    transP3 RotateY 90;
XvtkTransformPolyFilter tpd3
X    tpd3 SetInput [plane GetOutput];
X    tpd3 SetTransform transP3;
XvtkOutlineFilter outTpd3;
X    outTpd3 SetInput [tpd3 GetOutput];
XvtkPolyMapper mapTpd3;
X    mapTpd3 SetInput [outTpd3 GetOutput];
XvtkActor tpd3Actor;
X    tpd3Actor SetMapper mapTpd3;
X    [tpd3Actor GetProperty] SetColor 0 0 0;
X
XvtkAppendPolyData appendF;
X    appendF AddInput [tpd1 GetOutput];
X    appendF AddInput [tpd2 GetOutput];
X    appendF AddInput [tpd3 GetOutput];
X
XvtkProbeFilter probe;
X    probe SetInput [appendF GetOutput];
X    probe SetSource [pl3d GetOutput];
X
XvtkConnectivityFilter connect;
X    connect SetInput [probe GetOutput];
X    connect ExtractSpecifiedRegions;
X    connect AddSpecifiedRegion 0;
X    connect AddSpecifiedRegion 1;
X    connect AddSpecifiedRegion 2;
X
XvtkWarpVector warp;
X    warp SetInput [connect GetOutput];
X    warp SetScaleFactor 0.005;
X# Modifies point coordinates by moving points along vector times the 
X# scale factor.  Specify value to scale displacement.
X
XvtkDataSetMapper warpmapper;
X    warpmapper SetInput [warp GetOutput];
X    warpmapper ScalarsVisibleOn;
XvtkActor planeActor;
X    planeActor SetMapper warpmapper;
X
XvtkStructuredGridOutlineFilter outline;
X    outline SetInput [pl3d GetOutput];
XvtkPolyMapper outlineMapper;
X    outlineMapper SetInput [outline GetOutput];
XvtkActor outlineActor;
X    outlineActor SetMapper outlineMapper;
X    [outlineActor GetProperty] SetColor 0 0 0;
X
X$ren1 AddActors outlineActor;
X$ren1 AddActors planeActor;
X$ren1 AddActors tpd1Actor;
X$ren1 AddActors tpd2Actor;
X$ren1 AddActors tpd3Actor;
X$ren1 SetBackground 1 1 1;
X$renWin SetSize 500 500;
X$iren Initialize;
X
Xset cam1 [$ren1 GetActiveCamera];
X$cam1 SetClippingRange 3.95297 50;
X$cam1 SetFocalPoint 8.88908 0.595038 29.3342;
X$cam1 SetPosition -12.3332 31.7479 41.2387;
X$cam1 CalcViewPlaneNormal;
X$cam1 SetViewUp 0.060772 -0.319905 0.945498;
X
X# render the image
X#
X$iren SetUserMethod {wm deiconify .vtkInteract};
X$renWin Render;
X
X# prevent the tk window from showing up then start the event loop
Xwm withdraw .
X
X
X
END_OF_FILE
  if test 3626 -ne `wc -c <'warpvector.tcl'`; then
    echo shar: \"'warpvector.tcl'\" unpacked with wrong size!
  fi
  # end of 'warpvector.tcl'
fi
echo shar: End of archive.
exit 0

