#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 1997-02-06 23:09 EST by <schnem@cortez>.
# Source directory was `/afs/rpi.edu/home/89/schnem/private/graphvis'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#  14390 -rw------- proj1.c
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if mkdir _sh123114; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= proj1.c ==============
if test -f 'proj1.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'proj1.c' '(file already exists)'
else
  $echo 'x -' extracting 'proj1.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'proj1.c' &&
/* Matthew Schnee */
/* Advanced Computer Graphics and Data Visualization */
/* RCS userid: schnem */
X
/* keys to operate motion */
/*
X * s rotates +x
X * x rotates -x
X * d rotates +y
X * c rotates -y
X * a rotates +z
X * z rotates -z
X *
X * k moves +x
X * . moves -x
X * j moves +y
X * m moves -y
X * l moves +z
X * . moves -z
X *
X * g increases object size
X * b decreases object size
X */
X
X
X
/* Includes required */
#include <GL/gl.h>
#include <GL/glut.h>
X
#include <stdlib.h>
#include <stdio.h>
X
X
#define rotate_inc 15.0
#define translate_inc 0.25
#define scale_inc 0.125
X
/* this state variable tells the keyboard handler which object to rotate */
int obj_to_rot = 0;
X
X
/* strucutre definition for the objects and their rotations */
X
struct obj_rot_pos_s
{
X  GLfloat x;
X  GLfloat y;
X  GLfloat z;
X  GLfloat xpos;
X  GLfloat ypos;
X  GLfloat zpos;
X  GLfloat scale;
};
X
/* these are to be bale to reset the objects to their original positions */
X
struct obj_rot_pos_s save_cube_rot = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0};
struct obj_rot_pos_s save_sphere_rot = {0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.60};
struct obj_rot_pos_s save_teapot_rot = {0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.60};
struct obj_rot_pos_s save_observer_rot = {0.0, 0.0, 0.0, 0.0, 0.0, -6.0, 0.0};
X
/* the objects original positiions */
/* the observer is treated as an object because it has the same 
X   properties as the other objects */
X
struct obj_rot_pos_s cube_rot = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0};
struct obj_rot_pos_s sphere_rot = {0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.60};
struct obj_rot_pos_s teapot_rot = {0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.60};
struct obj_rot_pos_s observer_rot = {0.0, 0.0, 0.0, 0.0, 0.0, -6.0, 0.0};
X
X
/*
X *  Clear the screen.
X *  Draw the objects and the lights with the proper rotations and 
X *  positions.
X */
void display(void)
{
X  /* material properties for the cube */
X  static float cube_amb[4] = {0.5, 0.2, 0.2, 1.0};
X  static float cube_shiny[1] = {120.0};
X  static float cube_diff[4] = {0.9, 0.0 ,0.0 ,1.0 };
X  static float cube_spec[4] = {1.0 , 1.0 ,1.0 ,1.0};
X
X  /* material properties for the sphere */
X  static float sphere_amb[4] = {0.1, 0.1, 0.6, 1.0};
X  static float sphere_shiny[1] = {0.0};
X  static float sphere_diff[4] = {0.0, 0.0 ,0.6 ,1.0 };
X  static float sphere_spec[4] = {0.0 , 0.0 ,0.0 ,1.0};
X  
X  /* material propertoes for the teapot */
X  static float teapot_amb[4] = {0.2, 0.2, 0.0, 1.0};
X  static float teapot_shiny[1] = {100.0};
X  static float teapot_diff[4] = {0.6, 0.6 ,0.1 ,1.0 };
X  static float teapot_spec[4] = {1.0 , 1.0 ,0.5 ,1.0};
X  
X  /* properties for the first light */
X  static float lightPos[4] = {0.0, 3.0, 8.0, 1.0};
X  static float lightDir[4] = {0.0, 0.0, -1.0};
X  static float lightAmb[4] = {0.4, 0.4, 0.4, 1.0};
X  static float lightDiff[4] = {0.8, 0.8, 0.8, 1.0};
X  static float lightSpec[4] = {0.5, 0.5, 0.5, 1.0};
X  
X  /* properties fo rthe second light */
X  /* 
X   *  the second light is a spot light that initially shines directly 
X   *  on the teapot 
X   */
X  static float lightPos1[4] = {-2.0, 0.0, 15.0, 1.0};
X  static float lightDir1[4] = {0.0, 0.0, -1.0};
X  static float lightAmb1[4] = {0.1, 0.1, 0.1, 1.0};
X  static float lightDiff1[4] = {0.5, 0.5, 0.5, 1.0};
X  static float lightSpec1[4] = {0.3, 0.3 ,0.3 , 1.0};
X
X  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
X      
X  glPushMatrix();
X
X    glPushMatrix();
X
X      /* Move the world around for the observer position */
X      glTranslatef(observer_rot.xpos, observer_rot.ypos, observer_rot.zpos);
X
X      glRotatef(observer_rot.x, 1.0,0.0,0.0);
X      glRotatef(observer_rot.y, 0.0,1.0,0.0);
X      glRotatef(observer_rot.z, 0.0,0.0,1.0);
X
X      /* add the lights to the world */
X      glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
X      glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmb);
X      glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiff);
X      glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpec);
X
X      glLightfv(GL_LIGHT1, GL_POSITION, lightPos1);
X      glLightfv(GL_LIGHT1, GL_AMBIENT, lightAmb1);
X      glLightfv(GL_LIGHT1, GL_DIFFUSE, lightDiff1);
X      glLightfv(GL_LIGHT1, GL_SPECULAR, lightSpec1);
X      glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, lightDir1);
X      glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, 8.0);
X
X      glPushMatrix();
X    
X        /* do the translation and rotations for the cube */
X
X        glTranslatef(cube_rot.xpos, cube_rot.ypos, cube_rot.zpos);
X
X        glRotatef(cube_rot.x, 1.0,0.0,0.0);
X        glRotatef(cube_rot.y, 0.0,1.0,0.0);
X        glRotatef(cube_rot.z, 0.0,0.0,1.0);
X
X        /* set the material properties for the cube */
X        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, cube_amb);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, cube_diff);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, cube_spec);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, cube_shiny);
X        
X        /* draw the cube */
X        glutSolidCube(cube_rot.scale);   /*  draw the cube       */
X
X      glPopMatrix();
X
X      glPushMatrix();
X
X        /* set the shading model to flat so the sphere looks bumpy 
X	 * (in 64k or 16M colors 
X	 */
X        glShadeModel (GL_FLAT);
X
X        /* translation and ritations for the sphere */
X        glTranslatef(sphere_rot.xpos, sphere_rot.ypos, sphere_rot.zpos);
X 
X        glRotatef(sphere_rot.x, 1.0,0.0,0.0);
X        glRotatef(sphere_rot.y, 0.0,1.0,0.0);
X        glRotatef(sphere_rot.z, 0.0,0.0,1.0);
X
X        /* set the material properties for the sphere */
X        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, sphere_amb);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, sphere_diff);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, sphere_spec);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, sphere_shiny);
X
X        /* draw the sphere */
X        glutSolidSphere(sphere_rot.scale,25,25); /* draw the sphere */
X
X        /* set the shade model back to smooth for the teapot */
X        glShadeModel (GL_SMOOTH);
X
X      glPopMatrix();
X
X      glPushMatrix();
X
X        /* translate and rotate for the teapot */
X        glTranslatef(teapot_rot.xpos, teapot_rot.ypos, teapot_rot.zpos);
X
X        glRotatef(teapot_rot.x, 1.0,0.0,0.0);
X        glRotatef(teapot_rot.y, 0.0,1.0,0.0);
X        glRotatef(teapot_rot.z, 0.0,0.0,1.0);
X
X        /* set the material properties for the teapot.  It is shiny */
X        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, teapot_amb);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, teapot_diff);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, teapot_spec);
X        glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, teapot_shiny);
X
X        /* draw the teapot */
X        glutSolidTeapot(teapot_rot.scale);
X        /* shile developing the code I used a torus instead of a teapot
X	   because it was much faster to render */
/*        glutSolidTorus(teapot_rot.scale/(GLfloat)2,teapot_rot.scale,10,20); */
X
X      glPopMatrix();
X
X    glPopMatrix();
X
X  glPopMatrix();
X
X  glutSwapBuffers(); 
}
X
/* Initialize shading model */
void myInit(void)
{
X      glMatrixMode (GL_MODELVIEW);        /* back to modelview matrix  */
X      glLoadIdentity();
X      glPushMatrix();
X      
X      glColor3f(1.0, 1.0, 1.0);
X
X      glEnable(GL_LIGHTING);
X      glEnable(GL_LIGHT0);
X      glEnable(GL_LIGHT1);
X
X      glEnable(GL_DEPTH_TEST);
/*     glShadeModel (GL_FLAT);
X *     glClearColor (0.0, 0.0, 0.0, 0.0);
X */
}
X
/*
X *  Called when the window is first opened and whenever 
X *  the window is reconfigured (moved or resized).
X */
void myReshape(int w, int h)
{
X      glViewport (0, 0, w, h);            /*  define the viewport */
X      glMatrixMode(GL_PROJECTION);
X      glLoadIdentity();
X      gluPerspective(45.0, 1.0*(GLfloat)w/(GLfloat)h, 1.0, 20.0);
X      glMatrixMode (GL_MODELVIEW);        /* back to modelview matrix  */
}
X
/*
X * Keyboard handler
X */
void
Key(unsigned char key, int x, int y)
{
X    switch (key) {
X    case 's':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.x+=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.x+=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.x+=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.x+=rotate_inc;
X	  break;
X	}
X      break;
X    case 'x':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.x-=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.x-=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.x-=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.x-=rotate_inc;
X	  break;
X	}
X      break;
X    case 'd':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.y+=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.y+=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.y+=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.y+=rotate_inc;
X	  break;
X	}
X      break;
X    case 'c':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.y-=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.y-=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.y-=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.y-=rotate_inc;
X	  break;
X	}
X      break;
X    case 'a':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.z+=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.z+=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.z+=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.z+=rotate_inc;
X	  break;
X	}
X      break;
X    case 'z':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.z-=rotate_inc;
X	  break;
X	case 1:
X	  sphere_rot.z-=rotate_inc;
X	  break;
X	case 2:
X	  teapot_rot.z-=rotate_inc;
X	  break;
X	case 3:
X	  observer_rot.z-=rotate_inc;
X	  break;
X	}
X      break;
X    case 'k':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.xpos+=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.xpos+=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.xpos+=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.xpos+=translate_inc;
X	  break;
X	}
X      break;
X    case ',':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.xpos-=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.xpos-=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.xpos-=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.xpos-=translate_inc;
X	  break;
X	}
X      break;
X    case 'j':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.ypos+=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.ypos+=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.ypos+=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.ypos+=translate_inc;
X	  break;
X	}
X      break;
X    case 'm':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.ypos-=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.ypos-=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.ypos-=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.ypos-=translate_inc;
X	  break;
X	}
X      break;
X    case 'l':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.zpos+=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.zpos+=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.zpos+=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.zpos+=translate_inc;
X	  break;
X	}
X      break;
X    case '.':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.zpos-=translate_inc;
X	  break;
X	case 1:
X	  sphere_rot.zpos-=translate_inc;
X	  break;
X	case 2:
X	  teapot_rot.zpos-=translate_inc;
X	  break;
X	case 3:
X	  observer_rot.zpos-=translate_inc;
X	  break;
X	}
X      break;
X    case 'g':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.scale+=scale_inc;
X	  break;
X	case 1:
X	  sphere_rot.scale+=scale_inc;
X	  break;
X	case 2:
X	  teapot_rot.scale+=scale_inc;
X	  break;
X	case 3:
X	  observer_rot.scale+=scale_inc;
X	  break;
X	}
X      break;
X    case 'b':
X      switch (obj_to_rot)
X	{
X	case 0:
X	  cube_rot.scale-=scale_inc;
X	  break;
X	case 1:
X	  sphere_rot.scale-=scale_inc;
X	  break;
X	case 2:
X	  teapot_rot.scale-=scale_inc;
X	  break;
X	case 3:
X	  observer_rot.scale-=scale_inc;
X	  break;
X	}
X      break;
X
X    case 27:           /* Esc will quit */
X        exit(1);
X        break;
X    default:
X      break;
X    }
X    glutPostRedisplay();
}
X
/*
X *  Handle Menus
X */
void
Select(int value)
{
X    switch (value) {
X    case 1:
X        exit(0);
X        break;
X    case 2:
X	obj_to_rot = 0;
X	break;
X    case 3:
X	obj_to_rot = 1;
X	break;
X    case 4:
X	obj_to_rot = 2;
X	break;
X    case 5:
X	obj_to_rot = 3;
X	break;
X    case 6:
X	/* reset the objects to their original positions in the world */
X
X 	cube_rot.x=save_cube_rot.x;
X	cube_rot.y=save_cube_rot.y;
X	cube_rot.z=save_cube_rot.z;
X	cube_rot.xpos=save_cube_rot.xpos;
X	cube_rot.ypos=save_cube_rot.ypos;
X	cube_rot.zpos=save_cube_rot.zpos;
X	cube_rot.scale=save_cube_rot.scale;
X
X	sphere_rot.x=save_sphere_rot.x;
X	sphere_rot.y=save_sphere_rot.y;
X	sphere_rot.z=save_sphere_rot.z;
X	sphere_rot.xpos=save_sphere_rot.xpos;
X	sphere_rot.ypos=save_sphere_rot.ypos;
X	sphere_rot.zpos=save_sphere_rot.zpos;
X	sphere_rot.scale=save_sphere_rot.scale;
X
X	teapot_rot.x=save_teapot_rot.x;
X	teapot_rot.y=save_teapot_rot.y;
X	teapot_rot.z=save_teapot_rot.z;
X	teapot_rot.xpos=save_teapot_rot.xpos;
X	teapot_rot.ypos=save_teapot_rot.ypos;
X	teapot_rot.zpos=save_teapot_rot.zpos;
X	teapot_rot.scale=save_teapot_rot.scale;
X
X	observer_rot.x=save_observer_rot.x;
X	observer_rot.y=save_observer_rot.y;
X	observer_rot.z=save_observer_rot.z;
X	observer_rot.xpos=save_observer_rot.xpos;
X	observer_rot.ypos=save_observer_rot.ypos;
X	observer_rot.zpos=save_observer_rot.zpos;
X	observer_rot.scale=save_observer_rot.scale;
X
X	obj_to_rot = 0;
X
X	glutPostRedisplay();	
X	break;
X    }
}
X
/*
X *  Main Loop
X *  Open window with initial window size, title bar, 
X *  RGBA display mode, and handle input events.
X */
int main(int argc, char** argv) 
{
X  /* print out the help information to tell how to use it */
X  printf("The object to be manipulated is selected by the menu\n");
X  printf("Tho model can be reset using the menu by pressing the right mouse button\n");
X  printf("The keys to operate the model and their meanings are\n");
X  printf("s rotates +x\t\tx rotates -x\n");
X  printf("d rotates +y\t\tc rotates -y\n");
X  printf("a rotates +z\t\tz rotates -z\n");
X  printf("k moves +x\t\t, moves -x\n");
X  printf("j moves +y\t\tm moves -y\n");
X  printf("l moves +z\t\t. moves -z\n");
X  printf("g increases object size\tb decreases object size\n\n");
X
X
X  glutInitWindowSize(600,400);
X  glutInit(&argc, argv);
X  glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA);
X  glutCreateWindow (argv[0]);
X  myInit ();
X  glutKeyboardFunc(Key);
X  glutReshapeFunc (myReshape);
X  glutDisplayFunc(display);
X  glutCreateMenu(Select);
X  /* add entries to the menu */
X  glutAddMenuEntry("Quit", 1);
X  glutAddMenuEntry("Manipulate Cube", 2);
X  glutAddMenuEntry("Manipulate Sphere", 3);
X  glutAddMenuEntry("Manipulate Teapot", 4);
X  glutAddMenuEntry("Manipulate Observer", 5);
X  glutAddMenuEntry("Reset Objects",6);
X  glutAttachMenu(GLUT_RIGHT_BUTTON);
X  glutMainLoop();
}
X
SHAR_EOF
  $shar_touch -am 0204223697 'proj1.c' &&
  chmod 0600 'proj1.c' ||
  $echo 'restore of' 'proj1.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'proj1.c:' 'MD5 check failed'
42cdba5a6e45fd8acf3d687a3470d052  proj1.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'proj1.c'`"
    test 14390 -eq "$shar_count" ||
    $echo 'proj1.c:' 'original size' '14390,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh123114
exit 0
# From: Matthew Schnee <schnem>
