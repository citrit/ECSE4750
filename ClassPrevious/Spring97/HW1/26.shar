#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 1997-02-07 08:40 EST by <wangc5@marcus>.
# Source directory was `/afs/rpi.edu/home/78/wangc5/HW'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#    898 -rw------- Makefile
#   9605 -rw------- hw1.c
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if mkdir _sh50614; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= Makefile ==============
if test -f 'Makefile' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'Makefile' '(file already exists)'
else
  $echo 'x -' extracting 'Makefile' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'Makefile' &&
#
# Sample Makefile for compilling the sample code for the
# Advanced Computer Graphics and Data Visualization 35.6961 (Fall 1995)
#
# Copy this to the directory where the program resides and use
#  
#       make progname
#
# The progname would be the prefix of the source file you generated.
# Like if your source file was hw1.c, the above line would read:
#
#       make hw1
#
# The make utility would automatically look for something with a suffix
# it understood and would find hw1.c. There are built in rules which
# tell it how to compile c source.
#
X
LDFLAGS= -L/campus/visualization/mesa-ogl/1.2.7/@sys/lib \
X	 -lGL -lGLU -lMesaaux -lMesatk -lglut -lXmu -lXt -lX11 -lm
CFLAGS= -g -I/campus/visualization/mesa-ogl/1.2.7/@sys/include/glut
CC=cc
X
TARGET = simple
X
$(TARGET): $(TARGET).o
X	$(CC) -o $@ $? $(LDFLAGS)
X
lorenz:    lorenz.o
X	$(CC) $(CFLAGS) -o $@ $? $(LIBS)
X
clean:
X	/bin/rm -f *.o
SHAR_EOF
  $shar_touch -am 0206232997 'Makefile' &&
  chmod 0600 'Makefile' ||
  $echo 'restore of' 'Makefile' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'Makefile:' 'MD5 check failed'
a911ac703d77657be3fecce582d7478a  Makefile
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'Makefile'`"
    test 898 -eq "$shar_count" ||
    $echo 'Makefile:' 'original size' '898,' 'current size' "$shar_count!"
  fi
fi
# ============= hw1.c ==============
if test -f 'hw1.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'hw1.c' '(file already exists)'
else
  $echo 'x -' extracting 'hw1.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'hw1.c' &&
#include <GL/gl.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <GL/glut.h>
X
/*##############################################*/
/*###             Globle Variables           ###*/
/*##############################################*/
X  GLfloat i=1.0;
X  int win;
X  int group=0;
X  int obj1=0,obj2=0,obj3=0;
X  int r1,r2,r3,r4;
X  int trans=0;
X  int camera;
X  int buffer=1;
X  GLfloat view1=0.0,view2=0.0,view3=0.0;
X  GLfloat view4=0.0,view5=0.0,view6=0.0;
X  static GLfloat spin1 = 0.0, spin2 = 0.0, spin3 = 0.0, spin4 = 0.0;
X  int submenu;
X
/*##############################################*/
void 
myinit(void)
{
X    GLfloat light_ambient[]  = {0.1, 0.1, 0.1, 1.0};
X    GLfloat light_diffuse[]  = {0.5, 0.5, 0.5, 1.0};
X    GLfloat light_specular[] = {0.6, 0.6, 0.6, 1.0};
X    GLfloat light_position[] = {1.0, 1.0, 1.0, 0.0};
X
X    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
X    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
X    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
X    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
X    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
X    glEnable(GL_LIGHT0);
X    glDepthFunc(GL_LESS);
X    glEnable(GL_DEPTH_TEST);
X    glEnable(GL_LIGHTING);
}
void 
display(void)
{
X    GLfloat y_ambient[]      = { 0.4, 0.4, 0.0, 1.0 };
X    GLfloat y_diffuse[]      = { 0.5, 0.5, 0.0, 1.0 }; 
X    GLfloat y_specular[]     = { 0.7, 0.7, 0.0, 1.0 }; 
X    GLfloat y_emission[]     = { 0.3, 0.3, 0.0, 1.0 }; 
X
X    GLfloat trans_diffuse[]      = { 0.8, 0.8, 0.0, 0.25 }; 
X
X    GLfloat r_ambient[]      = { 0.3, 0.0, 0.0, 1.0 };
X    GLfloat r_diffuse[]      = { 0.3, 0.0, 0.0, 1.0 }; 
X    GLfloat r_specular[]     = { 0.3, 0.0, 0.0, 1.0 }; 
X    GLfloat r_emission[]     = { 0.1, 0.0, 0.0, 0.0 }; 
X
X    GLfloat b_ambient[]      = { 0.0, 0.0, 0.5, 1.0 };
X    GLfloat b_diffuse[]      = { 0.0, 0.0, 0.3, 1.0 }; 
X    GLfloat b_specular[]     = { 0.0, 0.0, 0.1, 1.0 }; 
X    GLfloat b_emission[]     = { 0.0, 0.0, 0.1, 0.0 }; 
X 
X    GLfloat low_shininess[]    = { 0.0 }; 
X    GLfloat high_shininess[]   = { 110.0 }; 
X        
X    glEnable(GL_LIGHT0);
X    glEnable(GL_LIGHTING);
X    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
X
X    if(camera){
X    glPushMatrix();
X    glMatrixMode(GL_PROJECTION);
X    glRotated(view1, 0.0, 0.0, 1.0);
X    glRotated(view2, 0.0, 1.0, 0.0);
X    glRotated(view3, 1.0, 0.0, 0.0);
X    glTranslated(-view4, -view5, -view6);
X    glPopMatrix();
X    glMatrixMode(GL_MODELVIEW);
X    }
X    
X    glPushMatrix();
X    if(group)glRotatef(spin1, spin2, spin3, spin4);
X    glScalef(0.4, 0.4, 0.4);
X    glPushMatrix();
X    glTranslatef(-4.0, 0.0, 0.0);
X    if(obj1)glScalef(i, i, i);
X    if(obj1)glRotatef(spin1, spin2, spin3, spin4);
X    if(trans==1){
X      glEnable(GL_BLEND);
X      glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, trans_diffuse);
X      glutSolidTeapot(1.0);
X      glDisable(GL_BLEND);     
X    }
X    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, y_ambient);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, y_diffuse);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, y_specular);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, high_shininess);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, y_emission);
X    glColor3f(1.0, 1.0, 0.0);
X    glutSolidTeapot(1.0);
X    glPopMatrix();
X    glPushMatrix();
X    glTranslatef(0.0, 0, 0.0);
X    if(obj2)glScalef(i, i, i);
X    if(obj2)glRotatef(spin1, spin2, spin3, spin4);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, r_ambient); 
X    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, r_diffuse);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, r_specular);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, low_shininess);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, r_emission);
X    glColor3f(1.0, 0.0, 0.0);
X    glutSolidCube(1.0);
X    glPopMatrix();
X    
X    
X    glPushMatrix();
X    glTranslatef(4.0, 0.0, 0.0);
X    if(obj3)glScalef(i, i, i);
X    if(obj3)glRotatef(spin1, spin2, spin3, spin4);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, b_ambient); 
X    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, b_diffuse);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, b_specular);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, low_shininess);
X    glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, b_emission);
X    glColor3f(0.0, 0.0, 1.0);
X    glutSolidSphere(1,15,15);
X    glPopMatrix();
X    
X    glPopMatrix();
X    glutSwapBuffers();
X    glFlush();
}
X
void 
myReshape(int w, int h)
{
X    glViewport(0, 0, w, h);
X    glMatrixMode(GL_PROJECTION);
X    glLoadIdentity();
X    if (w <= h)
X        glOrtho(-2.5, 2.5, -2.5 * (GLfloat) h / (GLfloat) w,
X            2.5 * (GLfloat) h / (GLfloat) w, -10.0, 10.0);
X    else
X        glOrtho(-2.5 * (GLfloat) w / (GLfloat) h,
X            2.5 * (GLfloat) w / (GLfloat) h, -2.5, 2.5, -10.0, 10.0);
X    glMatrixMode(GL_MODELVIEW);
} 
void 
focus_object(int value)
{
X    switch (value) {
X    case 1:
X    obj1=1;
X    obj2=0;
X    obj3=0;
X    group=0;
X    spin1=spin2=spin3=spin4=0.0;
X    printf("Focus on the Teapot\n");
X    break;
X
X    case 2:
X    obj1=0;
X    obj2=1;
X    obj3=0;
X    group=0;
X    spin1=spin2=spin3=spin4=0.0;
X    printf("Focus on the Cube\n");
X    break;
X
X    case 3:
X    obj1=0;
X    obj2=0;
X    obj3=1;
X    group=0;
X    spin1=spin2=spin3=spin4=0.0;
X    printf("Focus on the Sphere\n");
X    break;
X    }
glutPostRedisplay();
}
X
void
Key(unsigned char key, int x, int y)
{
X    switch (key) {
X    case 'h':
X      spin1=spin1+15.0;
X      spin3=spin3+1.0;
X      break;
X    case 'j':
X      spin1=spin1+15.0;
X      spin2=spin2+1.0; 
X      break;
X    case 'k':
X      spin1=spin1-15.0;
X      spin2=spin2+1.0; 
X      break;
X    case 'l':
X      spin1=spin1-15.0;
X      spin3=spin3+1.0; 
X      break;
X    case '+':
X    i=i+0.1;
X    break;
X    case'-':
X    i=i-0.1;
X    if(i<=0.1){i=0.1;printf("Can't scale any more\n");}
X    break;
X    case 'w':
X    camera=1;
X    break;
X    case 'q':
X    camera=0;
X    break;
X    case '1':
X    view1=5.0;
X    break;
X    case '2':
X    view1=-5.0;
X    break;
X    case '3':
X    view2=5;
X    break;
X    case '4':
X    view2=-5;
X    break;
X    case '5':
X    view3=5;
X    break;
X    case '6':
X    view3=-5;
X    break;
X    case '7':
X    view4=0.5;
X    break;
X    case '8':
X    view4=-0.5;
X    break;
X    case 'a':
X    view5=0.5;
X    break;
X    case 'A':
X    view5=-0.5;
X    break;
X    case 'b':
X    view6=0.5;
X    break;
X    case 'B':
X    view6=-0.5;
X    break;
X    case 'T':
X    trans=1;
X    break;
X    case 't':
X    trans=0;
X    break;
X    case 27:           
X        exit(1);
X        break;
X    default:
X      break;
X    }
display();
}
X
void 
main_menu(int value)
{
X    if (value == 666)
X        exit(0);
X    if (value == 4){
X        group=1;
X        obj1=0;
X        obj2=0;
X        obj3=0;
X    }
X    if (value == 5){
X       buffer=0;
X       win=glutGetWindow();
X       glutDestroyWindow(win);
X       glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
X       glutCreateWindow("NEW");
X       myinit();
X       glutReshapeFunc(myReshape);
X       glutKeyboardFunc(Key);
X       glutDisplayFunc(display);
X       submenu = glutCreateMenu(focus_object);
X       glutAddMenuEntry("Focus on Teapot", 1);
X       glutAddMenuEntry("Focus on Cube", 2);
X       glutAddMenuEntry("Focus on Sphere", 3);
X       glutCreateMenu(main_menu);
X       glutAddMenuEntry("Working Together", 4);
X       glutAddMenuEntry("Single Buffer", 5);
X       glutAddMenuEntry("Double Buffer", 6);
X       glutAddSubMenu("Pick one", submenu);
X       glutAddMenuEntry("Quit", 666);
X       glutAttachMenu(GLUT_RIGHT_BUTTON);
X    }
X    
X    if (value == 6){
X       buffer=1;
X       win=glutGetWindow();
X       glutDestroyWindow(win);
X       glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA);
X       glutCreateWindow("NEW");
X       myinit();
X       glutReshapeFunc(myReshape);
X       glutKeyboardFunc(Key);
X       glutDisplayFunc(display);
X       submenu = glutCreateMenu(focus_object);
X       glutAddMenuEntry("Focus on Teapot", 1);
X       glutAddMenuEntry("Focus on Cube", 2);
X       glutAddMenuEntry("Focus on Sphere", 3);
X       glutCreateMenu(main_menu);
X       glutAddMenuEntry("Working Together", 4);
X       glutAddMenuEntry("Single Buffer", 5);
X       glutAddMenuEntry("Double Buffer", 6);
X       glutAddSubMenu("Pick one", submenu);
X       glutAddMenuEntry("Quit", 666);
X       glutAttachMenu(GLUT_RIGHT_BUTTON);
X    }
}
void
info(void)
{
system("clear");
printf("HW#1\n");
printf("Try Right Button !!\n");
printf("Key Board Functions:\n");
printf("    h,j,k,l:spin objects\n");
printf("          w:Enable camera movement--change of viewpoint\n");
printf("          q:Disable camera movement--change of viewpoint\n");
printf("1-8,A,a,B,b:moving camera\n");
printf("          T:Enable teapot transparency\n");
printf("          t:Disable teapot transparency\n");
printf("        +,-:scale object\n");
printf("\nAfter move camera, please disable camera movement\n");
}
void 
main(int argc, char **argv)
{
X 
X    glutInit(&argc, argv);
X    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
X    glutInitWindowPosition(500, 500);
X    glutInitWindowSize(600, 600);
X    glutCreateWindow(argv[0]);
X    myinit();
X    glutReshapeFunc(myReshape);
X    glutKeyboardFunc(Key);
X    glutDisplayFunc(display);
X    submenu = glutCreateMenu(focus_object);
X    glutAddMenuEntry("Focus on Teapot", 1);
X    glutAddMenuEntry("Focus on Cube", 2);
X    glutAddMenuEntry("Focus on Sphere", 3);
X    glutCreateMenu(main_menu);
X    glutAddMenuEntry("Working Together", 4);
X    glutAddMenuEntry("Single Buffer", 5);
X    glutAddMenuEntry("Double Buffer", 6);
X    glutAddSubMenu("Pick one", submenu);
X    glutAddMenuEntry("Quit", 666);
X    glutAttachMenu(GLUT_RIGHT_BUTTON);
X    info();
X    glutMainLoop();
}
SHAR_EOF
  $shar_touch -am 0206232897 'hw1.c' &&
  chmod 0600 'hw1.c' ||
  $echo 'restore of' 'hw1.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'hw1.c:' 'MD5 check failed'
5c69a4ac554149f50f7f8262c3b15cff  hw1.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'hw1.c'`"
    test 9605 -eq "$shar_count" ||
    $echo 'hw1.c:' 'original size' '9605,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh50614
exit 0
# From: Chuo-Lung Wang <wangc5>
