#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 1997-02-06 23:50 EST by <stefanm@vccnorth28>.
# Source directory was `/afs/rpi.edu/home/29/stefanm/Class/Vis/HW1'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#    879 -rw------- Makefile
#   7576 -rw-r--r-- hw1.c
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if mkdir _sh15172; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= Makefile ==============
if test -f 'Makefile' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'Makefile' '(file already exists)'
else
  $echo 'x -' extracting 'Makefile' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'Makefile' &&
#
# Sample Makefile for compilling the sample code for the
# Advanced Computer Graphics and Data Visualization 35.6961 (Fall 1995)
#
# Copy this to the directory where the program resides and use
#  
#       make progname
#
# The progname would be the prefix of the source file you generated.
# Like if your source file was hw1.c, the above line would read:
#
#       make hw1
#
# The make utility would automatically look for something with a suffix
# it understood and would find hw1.c. There are built in rules which
# tell it how to compile c source.
#
X
LDFLAGS= -L/campus/visualization/mesa-ogl/1.2.7/@sys/lib \
X	 -lGL -lGLU -lglut -lXmu -lXt -lX11 -lm
CFLAGS= -g -I/campus/visualization/mesa-ogl/1.2.7/@sys/include/glut
CC=cc
X
TARGET = simple
X
$(TARGET): $(TARGET).o
X	$(CC) -o $@ $? $(LDFLAGS)
X
lorenz:    lorenz.o
X	$(CC) $(CFLAGS) -o $@ $? $(LIBS)
X
clean:
X	/bin/rm -f *.o
SHAR_EOF
  $shar_touch -am 0206233697 'Makefile' &&
  chmod 0600 'Makefile' ||
  $echo 'restore of' 'Makefile' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'Makefile:' 'MD5 check failed'
8bfa1c81d2d168508ae125163712a893  Makefile
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'Makefile'`"
    test 879 -eq "$shar_count" ||
    $echo 'Makefile:' 'original size' '879,' 'current size' "$shar_count!"
  fi
fi
# ============= hw1.c ==============
if test -f 'hw1.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'hw1.c' '(file already exists)'
else
  $echo 'x -' extracting 'hw1.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'hw1.c' &&
/*
X *
X *  Simple2.c 
X *
X *  Simple example of programming using the OpenGL graphics library
X *  Taken from the "OpenGL Programming Guide"
X *
X *
X */
X
/* Includes required */
#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>
X
X
#define  HW_VIEWPOINT 0
#define  HW_SPHERE 1
#define  HW_CUBE  2
#define  HW_TEAPOT 3
X
X      int active = HW_VIEWPOINT;
/*       active keeps track of which object (HW_VIEWPOINT, */
/*       HW_SPHERE..) the user can rotate at the moment. */
X
X     GLfloat rotation[4][16]=
X         {   { 1.0, 0.0, 0.0, 0.0, 
X               0.0, 1.0, 0.0, 0.0,
X               0.0, 0.0, 1.0, 0.0,
X               0.0, 0.0, 0.0, 1.0 } ,
X             { 1.0, 0.0, 0.0, 0.0, 
X               0.0, 1.0, 0.0, 0.0,
X               0.0, 0.0, 1.0, 0.0,
X               0.0, 0.0, 0.0, 1.0 } ,
X             { 1.0, 0.0, 0.0, 0.0, 
X               0.0, 1.0, 0.0, 0.0,
X               0.0, 0.0, 1.0, 0.0,
X               0.0, 0.0, 0.0, 1.0 } ,
X             { 1.0, 0.0, 0.0, 0.0, 
X               0.0, 1.0, 0.0, 0.0,
X               0.0, 0.0, 1.0, 0.0,
X               0.0, 0.0, 0.0, 1.0 }   };
/*        rotation[HW_xxxx] keeps the transformation matrix */
/*        for object HW_xxxx.  Note, do not use matrix for */
/*        the viewpoint, but decided to keep it for  the  */
/*        sake of consistency  */
X
X
X
X
X
/*       PRE:   none */
/*       POST:  list number HW_xxxx draws object HW_xxxx */
/*              on the place defined by the modelview */
/*              Matrix */
void buildlists(void)
{
X      static float sphereAmbDiff[4] = {0.1, 0.8, 0.1, 1.0}; 
X      static float sphereSpec[4] = { 0.1, 0.1, 0.1, 1.0};   
X      static float sphereShine[1] = {10.0};                
X
X      static float cubeAmbDiff[4] = {0.9, 0.1, 0.1, 1.0}; 
X      static float cubeSpec[4] = { 0.8, 0.8, 0.8, 1.0};   
X      static float cubeShine[1] = {100.0};                
X
X
X      static float teapotAmbDiff[4] = {0.9, 0.9, 0.1, 1.0}; 
X      static float teapotSpec[4] = { 1.0, 1.0, 1.0, 1.0};   
X      static float teapotShine[1] = {100.0};                
X
X
X  glNewList(HW_TEAPOT, GL_COMPILE);
X      glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, teapotAmbDiff);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, teapotSpec);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, teapotSpec);
X      glMaterialfv(GL_FRONT, GL_SHININESS, teapotShine);
X      glutSolidTeapot(0.5); 
X  glEndList();
X
X  glNewList(HW_SPHERE, GL_COMPILE);
X      glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, sphereAmbDiff);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, sphereSpec);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, sphereSpec);
X      glMaterialfv(GL_FRONT, GL_SHININESS, sphereShine);
X      glutSolidSphere(0.5,20,20);   /*  draw a sphere      */
X  glEndList();
X
X  glNewList(HW_CUBE, GL_COMPILE);
X      glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, cubeAmbDiff);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, cubeSpec);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, cubeSpec);
X      glMaterialfv(GL_FRONT, GL_SHININESS, cubeShine);
X      glutSolidCube(1.0);   /*  draw a sphere      */
X  glEndList();
X
}
X
X
X    
/*   Draw objects on screen */
void display(void)
{
X
X      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
X      glMatrixMode (GL_MODELVIEW);
X
X      glPushMatrix();
X      glTranslatef(-2.0, 0.0, 0.0);
X      glMultMatrixf(rotation[HW_TEAPOT]);
X      glCallList(HW_TEAPOT);
X      glPopMatrix();
X
X      glPushMatrix();
X      glMultMatrixf(rotation[HW_CUBE]);
X      glCallList(HW_CUBE);
X      glPopMatrix();
X
X      glPushMatrix();
X      glTranslatef(2.0, 0.0, 0.0);
X      glMultMatrixf(rotation[HW_SPHERE]);
X      glCallList(HW_SPHERE);
X      glPopMatrix();
X
X      glutSwapBuffers(); 
}
X
X
/* Initialize shading model */
void myInit(void)
{
X
X      static float lightPos[4] = {8.0, 16.0, 8.0, 1.0};
X      static float lightDir[4] = {-8.0, -16.0, -8.0, 1.0};
X      static float lightAmb[4] = {0.7, 0.7, 0.7, 1.0};
X      static float lightDiff[4] = {0.8, 0.8, 0.8, 1.0};
X      static float lightSpec[4] = { 1.0, 1.0, 1.0, 1.0};
X
X      buildlists();
X
X      glOrtho( -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);
X
X
X      glEnable(GL_LIGHTING);
X      glEnable(GL_LIGHT0);
X      glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
X      glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmb);
X      glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiff);
X      glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpec);
X      glEnable(GL_DEPTH_TEST);
X      glEnable(GL_DITHER);
X
X      
X
X
/*     glShadeModel (GL_FLAT);
X *     glClearColor (0.0, 0.0, 0.0, 0.0);
X */
}
X
X
X
/*
X *  Called when the window is first opened and whenever 
X *  the window is reconfigured (moved or resized).
X */
void myReshape(int w, int h)
{
X
X      int i,j;
X      glViewport (0, 0, w, h);            /*  define the viewport */
X
X      for(i=0; i<4; i++)
X        for(j=0; j<16; j++)
X          rotation[i][j] =
X            (j==0 || j==5 || j==10 || j==15) ? 1.0: 0.0;
X
X      glMatrixMode(GL_PROJECTION);
X      glLoadIdentity();
X
X      gluPerspective(45.0, 1.0*(GLfloat)w/(GLfloat)h, 1.0, 10.0);
X      glTranslatef (0.0, 0.0, -5.0);     /*  viewing transformation      */
X      glMatrixMode (GL_MODELVIEW);        /* back to modelview matrix  */
}
X
/*
X * Keyboard handler
X */
void
Key(unsigned char key, int x, int y)
{
X    if ( active == HW_VIEWPOINT){
X      glMatrixMode(GL_PROJECTION);
X      switch (key) { 
X      case 'h': 
X	glRotatef(-15.0, 0.0,1.0,0.0); 
X	break; 
X      case 'j': 
X	glRotatef(-15.0, 1.0,0.0,0.0); 
X	break; 
X      case 'k': 
X	glRotatef(15.0, 1.0,0.0,0.0); 
X	break; 
X      case 'l': 
X	glRotatef(15.0, 0.0,1.0,0.0); 
X	break; 
X      case 27:          
X	exit(1); 
X	break; 
X      default:
X	break; 
X      }
X      glMatrixMode(GL_MODELVIEW);
X      glGetFloatv(GL_PROJECTION_MATRIX, rotation[active]);
X
X    }      
X    else{
X      glMatrixMode(GL_MODELVIEW);
X      glPushMatrix();
X      glLoadMatrixf(rotation[active]); 
X      switch (key) { 
X      case 'h': 
X	glRotatef(15.0, 0.0,1.0,0.0); 
X	break; 
X      case 'j': 
X	glRotatef(15.0, 1.0,0.0,0.0); 
X	break; 
X      case 'k': 
X	glRotatef(-15.0, 1.0,0.0,0.0); 
X	break; 
X      case 'l': 
X	glRotatef(-15.0, 0.0,1.0,0.0); 
X	break; 
X      case 27:          
X	exit(1); 
X	break; 
X      default:
X	break; 
X      }
X      glGetFloatv(GL_MODELVIEW_MATRIX, rotation[active]);
X      glPopMatrix();
X    }
X    glutPostRedisplay();
}
X
/*
X *  Handle Menus
X */
void
Select(int value)
{
X    int i,j;
X    switch (value) {
X    case 1:
X        active = HW_VIEWPOINT;
X        break;
X    case 2:
X        active = HW_SPHERE;
X        break;
X    case 3:
X        active = HW_CUBE;
X        break;
X    case 4:
X        active = HW_TEAPOT;
X        break;
X    case 5:
X	for(i=0; i<4; i++)
X	  for(j=0; j<16; j++)
X	    rotation[i][j] =
X	      (j==0 || j==5 || j==10 || j==15) ? 1.0: 0.0;
X        glMatrixMode(GL_PROJECTION);
X        glLoadIdentity();
X	myInit();
X	glutPostRedisplay();
X	glMatrixMode(GL_MODELVIEW);
X	break;
X    case 6:
X        exit(0);
X        break;
X    }
}
X
/*
X *  Main Loop
X *  Open window with initial window size, title bar, 
X *  RGBA display mode, and handle input events.
X */
int main(int argc, char** argv) 
{
X      glutInit(&argc, argv);
X      glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA);
X      glutCreateWindow (argv[0]);
X      myInit ();
X      glutKeyboardFunc(Key);
X      glutReshapeFunc (myReshape);
X      glutDisplayFunc(display);
X      glutCreateMenu(Select);
X      glutAddMenuEntry("ViewPoint", 1);
X      glutAddMenuEntry("Sphere", 2);
X      glutAddMenuEntry("Cube", 3);
X      glutAddMenuEntry("Tea Pot", 4);
X      glutAddMenuEntry("Restart", 5);
X      glutAddMenuEntry("Quit", 6);
X      glutAttachMenu(GLUT_RIGHT_BUTTON);
X      glutMainLoop();
}
X
X
X
X
X
X
X
X
X
SHAR_EOF
  $shar_touch -am 0206234297 'hw1.c' &&
  chmod 0644 'hw1.c' ||
  $echo 'restore of' 'hw1.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'hw1.c:' 'MD5 check failed'
6dd5737d020b7ef81e226a4bd91c8dde  hw1.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'hw1.c'`"
    test 7576 -eq "$shar_count" ||
    $echo 'hw1.c:' 'original size' '7576,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh15172
exit 0
# From: Magnus Stefansson <stefanm>
