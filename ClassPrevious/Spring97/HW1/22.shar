#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 1997-02-07 00:03 EST by <tehrani@vcmr-13.rcs.rpi.edu>.
# Source directory was `/afs/rpi.edu/locker/68/000868/class/visual'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#   8053 -rw-r--r-- hm1.c
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if mkdir _sh20133; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= hm1.c ==============
if test -f 'hm1.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'hm1.c' '(file already exists)'
else
  $echo 'x -' extracting 'hm1.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'hm1.c' &&
/*********************/
/* Homework Number 1 */
/* Mohammad Tehrani  */
/* tehrani@rpi.edu   */
/*********************/
X
/******************HELP***************************/
/*						 */
/* USE L, K, J, H  TO ROTATE THE CHOSEN OBJECT BY*/
/* USE <, > to SCALE  
X
/* Includes required */
#include <GL/gl.h>
#include <GL/glut.h>
#include  <stdio.h>
X
#define TEAPOT 1 
#define CUBE 2 
#define SPHERE 3
#define END 4
#define VIEW 5
X
X
X int object_rotate=0;
X int object_scale=0;
X int object_translate=0;
X
X float spin=0;
X float rx=0, ry=0, rz=0; /* for rotation */
X float sx=1, sy=1, sz=1; /* for scaling  */
X float tx=0, ty=0, tz=0; /* for translating */
X
X
/*
X *  Clear the screen.  Set the current color to white.
X *  Draw the cube.
X */
void display(void)
{
X      GLfloat no_mat[] = { 0.0, 0.0, 0.0, 1.0 };
X      GLfloat mat_ambient[] = { 0.7, 0.7, 0.7, 1.0 }; 
X      GLfloat mat_ambient_color[] = { 0.8, 0.8, 0.2, 1.0 }; 
X      GLfloat mat_diffuse[] = { 0.1, 0.5, 0.8, 1.0 }; 
X      GLfloat mat_specular[] = { 0.6, 0.3, 0.6, 0.6 }; 
X      GLfloat no_shininess[] = { 0.0 }; 
X      GLfloat low_shininess[] = { 5.0 }; 
X      GLfloat high_shininess[] = { 160.0 }; 
X      GLfloat mat_emission[] = {0.3, 0.8, 0.2, 0.0};  
X
X      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
X      glPushMatrix();
X      glScalef (0.3,0.3,0.3);
X
X      glEnable(GL_COLOR_MATERIAL);
X	
X      glPushMatrix();
X      glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
X      glColor3f(1.0, 1.0, 0.0);
X      glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);
X      glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat);
X      glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
X      glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);
X    if(object_scale==TEAPOT)
X	{
X      glScalef(sx,sy,sz );
X	}
X    if(object_translate==TEAPOT)
X	{
X      glTranslatef(tx,ty ,tz );
X	}
X      glTranslatef(-3,0 ,0 );
X    if(object_rotate==TEAPOT)
X	{
X      glRotatef(spin,rx,ry,rz);
X	}
X      glutSolidTeapot(1.0);   /*  draw the teapot  */
X      glPopMatrix();
X
X      glPushMatrix();
X      glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
X      glColor3f(1.0, 0.0, 0.0);
X      glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);
X      glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat);
X      glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
X      glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
X    if(object_scale==CUBE)
X	{
X      glScalef(sx,sy,sz );
X	}
X    if(object_translate==CUBE)
X	{
X      glTranslatef(tx,ty ,tz );
X	}
X    if(object_rotate == CUBE)
X	{
X      glRotatef(spin,rx,ry,rz);
X	}
X      glTranslatef(0.0, 0.0, 0.0);
X      glutSolidCube(1.0);   /*  draw the cube       */
X      glPopMatrix();
X
X      glPushMatrix();
X      glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
X      glColor3f(0.0, 0.0, 1.0);
X      glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
X      glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
X      glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
X      glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
X      glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
X    if(object_scale==SPHERE)
X	{
X      glScalef(sx,sy,sz );
X	}
X    if(object_translate==SPHERE)
X	{
X      glTranslatef(tx,ty,tz );
X	}
X    glTranslatef(3,0,0);
X    if(object_rotate==SPHERE)
X	{
X      glRotatef(spin,rx,ry,rz);
X	}
X      glutSolidSphere(1.0,50,50);   /*  draw the sphere     */
X      glPopMatrix();
X
X      glDisable(GL_COLOR_MATERIAL);
X      glPopMatrix();
X
X      glutSwapBuffers(); 
}
X
X
X
/*
X * Keyboard handler
X */
void
Key(unsigned char key, int x, int y)
{
X    switch (key) {
X    case 'h':                	 /****  Rotate           ****/
X	spin+=10;
X	rx=0;
X	ry=1;
X	rz=0;
X	break;
X    case 'j':			 /****   Rotate           ****/
X	spin+=10;
X	rx=1;
X	ry=0;
X	rz=0;
X	break;
X    case 'k': 			 /****     Rotate         ****/
X	spin+=10;
X	rx=1;
X	ry=0;
X	rz=0;
X	break; 
X    case 'l':			 /****     Rotate         ****/
X	spin+=10;
X	rx=0;
X	ry=1;
X	rz=0;
X	break;
X    case '<':			 /****    Scale         ****/
X	sx/=1.2;
X	sy/=1.2;
X	sz/=1.2;
X	break;
X    case '>':			 /****      Scale         ****/
X	sx*=1.2;
X	sy*=1.2;
X	sz*=1.2;
X	break;
X    case 'm':			 /****   Translate          ****/
X	tx+=0.2;
X	ty+=0.2;
X	tz+=0.2;
X	break;
X    case 'n':			 /****    Translate           ****/
X	tx-=.2;
X	ty-=.2;
X	tz-=.2;
X	break;
X    case 27: 
X        exit(1);
X        break;
X    default:
X      break;
X
X    }
X   display(); 
}
X
X
X
X
X
X
X
/* Initialize shading model */
void myInit(void)
{
X      static float lightPos[4] = {2.0, 2.0, 2.0, 1.0};
X      static float lightDir[4] = {-2.0, -4.0, -2.0, 1.0};
X      static float lightAmb[4] = {0.7, 0.7, 0.7, 1.0};
X      static float lightDiff[4] = {0.8, 0.8, 0.8, 1.0};
X      static float lightSpec[4] = {0.4, 0.4, 0.4, 1.0};
X
X      glColor3f(1.0, 0.0, 0.0);
X      glEnable(GL_LIGHTING);
X      glEnable(GL_LIGHT0);
X      glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
X      glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmb);
X      glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiff);
X      glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpec);
X      glEnable(GL_DEPTH_TEST);
X      glShadeModel (GL_FLAT);
X      glClearColor (0.0, 0.0, 0.0, 0.0);
X
}
X
/*
X *  Called when the window is first opened and whenever 
X *  the window is reconfigured (moved or resized).
X */
void myReshape(int w, int h)
{
X      glViewport (0, 0, w, h);            /*  define the viewport */
X      glMatrixMode(GL_PROJECTION);
X      glLoadIdentity();
X      gluPerspective(45.0, 1.0*(GLfloat)w/(GLfloat)h, 1.0, 10.0);
X      glTranslatef (0.0, 0.0, -5.0);     /*  viewing transformation      */
X      glMatrixMode (GL_MODELVIEW);        /* back to modelview matrix  */
}
X
X
/*
X *  Handle Menus
X */
void
Select(int value)
{
X    switch (value) {
X    case VIEW:
printf(" USE l,k,j,h to ROTATE the chosen object\n");
printf(" USE < , >   to SCALE  the chosen object\n");
printf(" USE  n, m   to TRANSLATE the chosen object\n");
X        break;
X
X    case END:
X        exit(0);
X        break;
X    }
}
X
void
Tranlate_select(int value)
{
X    switch (value) {
X    case TEAPOT:
X        object_translate=TEAPOT;
X        break;
X    case CUBE:
X        object_translate=CUBE;
X        break;
X    case SPHERE:
X        object_translate=SPHERE;
X        break;
X    }
}
X
void
Rotate_select(int value)
{
X    switch (value) {
X    case TEAPOT:
X        object_rotate=TEAPOT;
X        break;
X    case CUBE:
X        object_rotate=CUBE;
X        break;
X    case SPHERE:
X        object_rotate=SPHERE;
X        break;
X    }
}
X
void
Scale_select(int value)
{
X    switch (value) {
X    case TEAPOT:
X        object_scale=TEAPOT;
X        break;
X    case CUBE:
X        object_scale=CUBE;
X        break;
X    case SPHERE:
X        object_scale=SPHERE;
X        break;
X
X    }
}
X
X
X
X
/*
X *  Main Loop
X *  Open window with initial window size, title bar, 
X *  RGBA display mode, and handle input events.
X */
int main(int argc, char** argv) 
{
int rotate_menu, scale_menu, translate_menu;
X      glutInit(&argc, argv);
X      glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA);
X      glutInitWindowPosition(500, 500);
X      glutInitWindowSize(500, 500);
X      glutCreateWindow (argv[0]);
X      myInit ();
X      glutKeyboardFunc(Key);
X      glutReshapeFunc (myReshape);
X      glutDisplayFunc(display);
X
X      rotate_menu=glutCreateMenu(Rotate_select);
X      glutAddMenuEntry("Teapot",TEAPOT);
X      glutAddMenuEntry("Cube",  CUBE);
X      glutAddMenuEntry("Sphere", SPHERE);
X
X      translate_menu=glutCreateMenu(Tranlate_select);
X      glutAddMenuEntry("Teapot",TEAPOT);
X      glutAddMenuEntry("Cube",  CUBE);
X      glutAddMenuEntry("Sphere", SPHERE);
X
X
X      scale_menu=glutCreateMenu(Scale_select);
X      glutAddMenuEntry("Teapot", TEAPOT);
X      glutAddMenuEntry("Cube", CUBE);
X      glutAddMenuEntry("Sphere", SPHERE);
X
X      glutCreateMenu(Select);
X      glutAddSubMenu("Rotate", rotate_menu);
X      glutAddSubMenu("Translate", translate_menu);
X      glutAddSubMenu("Scale", scale_menu);
X      glutAddMenuEntry("HELP", VIEW);
X      glutAddMenuEntry("Quit", END);
X      glutAttachMenu(GLUT_RIGHT_BUTTON);
X      glutMainLoop();
}
X
SHAR_EOF
  $shar_touch -am 0206235897 'hm1.c' &&
  chmod 0644 'hm1.c' ||
  $echo 'restore of' 'hm1.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'hm1.c:' 'MD5 check failed'
d86fc09f3e2b56e363965ed56dd89bd6  hm1.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'hm1.c'`"
    test 8053 -eq "$shar_count" ||
    $echo 'hm1.c:' 'original size' '8053,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh20133
exit 0
# From: Mohammad Reza Taei Tehrani <tehrani>
