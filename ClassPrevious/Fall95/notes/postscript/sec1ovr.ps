%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - LEC1OVR.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - LEC1OVR.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (1) 21 SB
0 lc
0 lj
0 0 0 pC
6 6 SP
206 206 206 fC
/fm 256 def
gs 2700 40 478 342 CB
2694 3 481 360 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
478 436 1718 (Advanced Computer Graphics and Data Visualization) 1718 SB
206 206 206 fC
/fm 256 def
gs 2700 40 478 578 CB
2694 3 481 596 B
1 F
S
n
gr
32 0 0 92 92 0 0 0 84 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 806 1230 (Section 1:  The OpenGL Model) 1230 SB
/bytestr 73 string def
/pp 1 string def/s 1 string def/rn{currentfile s readhexstring{0 get}{pop
exit}ifelse}def/unpack{/DC 0 def/BC 0 def{DC bytestr length ge{exit}if
rn/BC exch def BC 127 le{/BC BC 1 add def DC 1 DC BC add 1 sub{bytestr
exch rn put}for}{/BC BC 255 xor 2 add def rn/pp exch def DC 1 DC BC
add 1 sub{bytestr exch pp put}for}ifelse/DC DC BC add def}loop bytestr}bd
gs 172 212 264 323 CB
save 264 323 translate 172 212 scale
73 90 8
[73 0 0 -90 0 90]
{unpack} bind
image
ccff010506ff07010908ff07ff05f7ff
d9ff03090aff07fdff0007ff0a010b0cff0dfd0e020d0b09ff070005f9ff
e2ff0006fbfffe0c000dff0bff0aff0cfd0e010f10fe18081918170e150b070506faff
e7fffe0e080f0e0b090b0cff090bff0c000dff0c000bff0e000fff10010f10fe180a1a191a21192018160e0906ff05fbff
e9ff010e0fff10030f100f10fc0e000dff0c030d0e0f10fe11011918fd19021a1b21ff220923221817160b07050605fcff
eaff02101213ff1202111011ff10000fff0e010d0aff0e011011ff12fc1a0019ff1a04211a1f2322fe1f072117160c07060506fcff
ecff000efc13011a13ff1101100fff0e040d0e0f1112ff13001afc1b071a211a19201a211aff21001aff20ff16020a0706ff05fcff
edff0010ff131014131b14131a12110f0e0c0e101112131afe1b001cfe2302221b21fe1902181920ff2105201a1f160e11ff06010506fcff
eeff011213ff14001bff14031a121110ff0e0010ff12031413141bff1c012324ff2305242a24232119fd18011920fd210618160a06050605fcff
eeff0013fc1402131211fe0f0012ff1406151c1d1c1d1c1dfc24052b231f231918ff16030f171821fd2a021f1607ff050006fcff
efff011213fd14011a12fe10041214151c16ff1d051e251e252425ff24ff2b0024ff2305211918171615ff1601201ffe33ff1f0314070605fcff
f0ff0011ff13ff14001aff12071112131415161d16fd1eff26042e26252c2bff24012a24ff230321191716ff0d0b1416212a333a3121160c0805fcff
f1ff011012ff1302141314ff13ff14021d161efe16ff1eff26fc2e132d2c2b232b2a231f221917160e0b0c1317201f32ff1f041e150b0706fdff
f1ff011113fb14ff15051d161e161d16ff1efe26002efd35022e2d25ff2b0e242a221a1917160d0c0b0a0c151617ff160013ff0b010905fdff
f2ff02111314fc15011c16fc1eff16ff1eff26ff2e01353efd35022d2c24ff2a0b23201817160e0d130b0c0d0eff16010e09ff07ff06fdff
f3ff02101314fe1501161cff15fc1eff16021d1e1ffd2eff35ff3efe350034ff2b04221f211817ff16000efe0d011617ff18021f1507ff060005fdff
f3ff05121314151615ff1401151dfc1e02161d16ff1e012e26ff2e01353efd380646352d2b2a2322ff1709160e150e150e16201f2aff1f011506ff05fdff
f4ff02101314ff150516131113151dfc1e03161e161efe26ff2e01353efb380f4635332a1f1a1716150e140d161f211fff32042e18130506fdff
f4ff0912131415161311131c1dfa1eff16ff1e0026fd2efe38005bfc38073d321f2217160d14ff0c02151e1fff320039ff1f011506ff05feff
f4ff011214ff15020e141cfc1dfc1e02161d16ff26ff2eff35ff38005bfb38013d2bfe1f0a160d0c120b0d1d20313a39ff1f0316070506feff
f5ff011113ff14020f1c1eff26021e251dfb1eff16041d1e272e3eff46ff38045b385b385bff3801452aff1f011716ff0c040a0912151fff320031ff1f0312070605feff
f5ff011213ff0e071c2627353e352726fa1eff16031e263e46fe38045b385b385bfe38153e312a1f1816140c0907090c1e2e33312a1e13070506feff
f6ff0b111211191b262e353e383726fd1e0026ff1e07171d161f2e3e385bff38095b386e385b385b383d32fe1f03160e130aff0703111d1f32fe1f0315080605feff
f7ff02101219ff2602353738ff62026e3e26ff1e0025fd1e001dff160c262e46385b385b386e386e386eff380845311f2a1f17150d0bff0702131f33fe1f0220180dff05feff
f7ff041112333862fc6e03543c1516fb1eff16031d1f3538ff5b0038fb5bfe380043ff2afe1f1016150d0907132e463e21130e18100e0c07ffff
f8ff07100e2444626e7077ff7e0477623e151dfb1eff16031e1f3e38ff5b04386e386e62fe5b043845322b2eff1f0020ff1605140b0911595bff38013e11ff0e0416151307ff
f8ffff05032e335362fd77037e381c15ff1eff26fe1e09161d162735386e5b625bff62025b625bff380343312e2aff1f0021ff160815140b14386e385b38ff3e05353e3b1f0b06
f9ff0011ff0508063c3a386e5b385b53ff13021d1e27ff280026fe1e0a161e2635386e5b625b626eff5b06385b443a322a32fe1f01201efe16021f4062ff5b01385bfe3803451f1d07
faff02100506ff050c342a312c251e242c11141e2726ff2e0028fd1e031f27465bff6eff62026e5b62ff5bff38023c312efc1fff20031f1e1f38ff62095b6e626e625b43311f07
fbff011013ff050806052c21181b1c1614ff13021c1f26ff2e02262826fe1e041f2e46386efd62ff5b0062ff38003cfe310021fe1f013120ff1f02324438ff5b0062ff6eff62ff3802311406
fcff01111cff050006ff05042c1b191113ff14021c161efc2e0229281fff1e021f2e38fe6efe62ff5bff38054432312a1f31fd1f03313a3b43fe380a6e626e626e3843311f1106
fdff040f2c360506ff050406362c1c1aff15011d1eff260d28262e262e262e29271f272e5b6efe62025b385bfe38033b312e2afc1f07313a44385b38625bff6e08626e5b383b1f1d07ff
feff040e25693e06ff05010605ff3e052e1d141e2628fb2e0026ff2e0526281f273538ff6eff6201385bfe380243322afe1f0920171e1f3a42385b3862ff5bff62086e5b38421f1e0a05ff
feff0334776944ff0502060506ff46032e251e1ffe2e02292e28ff2eff35ff2e07292728355b6e625bfe380643423a33322e23ff1f001eff16031e313862fe5bfd62066e3845311e1207ffff
ffff031362604cff050006fe0504363d261d1eff2e0335262e28ff2efd35072e28272e465b6e62ff5b093a32313a333a2e2a1f20ff1603150c1631ff5bff62025b625bff62ff3804442e160705ffff
ffff04273c3a2306ff050406051c2d25ff1e0027fe35ff2e01292efe35063e352e29283538ff6e0062ff5b073c2a201f2b2a211ffe16050d0b12143738fd6efd5b04383c2e1f08ff05ffff
04ff10362b1aff130006ff05070613151d1e272e3efe35fd2eff3e014635ff2e02293538fe6e045b62383d20ff19062117160c130c0bff08030b1e3162fe6efe5bff3802331f11ff060005ffff
11ff1014180f11130506050e14253c282e373efe350d2e352e353e463846352e35465b62ff6e045b62384623ff1902180e0bfe080011ff070305133762fe6eff5b05383c2e211407ff050006ffff
ffff0011fe0f07110507091d3c5b62f935002eff35003efe3804462e353862fe6eff62085b3846352e2d190d09fc070306112e5bfe6e0054ff38073a20140705070605ffff
ffff000fff0e0010ff140305061156ff2e0235373ef9350046fe380446353e3862ff6e01626eff62005bfd380335211408fc060c071d3a38625b3844311f161105ff07ff05ffff
ffff000bfe0d0216131fff070311292e35ff37fc35ff3eff4608385b38462e3e386e62ff6eff62036e5b385bfe38023e1f14ff06ff0504060512182dff4206332e2116120506ff070006feff
feff05090b0e16141ffb2eff37fd3eff46fe38005bff3806462e46386e626eff62026e626efd5b07385b3d1f16070506ff0502080e1fff21012e1fff150011ff0502070605feff
fdff010a12ff150027fe46ff3efd46fa38005bfe38073e2e3e386e626e5bfe6eff62015b6efe5b04383d1f1607ff05030605090cff140416150b0a07ff0502060506feff
fcffff14091d375b62543854385b54fc38005bfe38075b54463e3546386eff62025b6e62ff6e035b626e62ff5bff38043d1f140807ff050006fe07ff0a0608070506050605fdff
fcff0413141c3e69ff70005bff62ff6e02546e62ff5b03385b3854fe38044635385b6efe5b0062ff6efd62006efe5b0838441f1e140a080706ff05ff0602080706fc05fdff
fdff0012ff1308194670776e625b776eff62ff6e07626e625b385b385bfe460038ff62045b545b626efd62016e62ff5bff380644311f1e161309ff070306050605ff06040506050605fdff
fdff06131214162e3869ff54075b6e625b38463e38fe6eff5b013854fe38025b386efe5bff62026e5b6efd62065b385b44322a1fff16000dff0a010806fe050006ff05010605fcff
feff02111214fe16013646ff3e02386e62fd38043626445161ff6e016254fe38075b625b385b626e5bfe62045b625b3862ff3805442e211f1614ff0c040a07060506ff050006ff05fcff
feffff130015ff16011e1fff2e023e3862fe6e0c777e5b2e1d1323596e38706238ff6e01776eff5b006efd62006eff62013862fe38033c31201fff16030c130b09ff06ff050006ff050006fcff
ffff0011ff15ff16011e17ff20013738ff6efe770c7e776e463e352d13393c435962ff7701867eff70037e70625bfe62013862fe3804443331201eff16ff0c050b0907060506ff05010605fcff
ffff02141615ff160b1e2720272e546e777e77706eff5b01385bff380746261c131a395338fb77117e6e626e5b625b385b45413a2e23171e1614fe0a02080706ff0502060506fcff
ffff05141315161e1fff280329375470ff77ff70006eff380054ff5b0054ff3809372e26241a1639556e53fc77006eff6201385bff380444392b2e19ff16000dfe0a040907060506fd05fdff
0cff12161416171e2827202e3862ff6e01626eff38085446385b54385b385bfe460045fe3d052d3538867770fe6eff62075b38544339312e18ff1603140b0809ff080007fe0502060506fdff
07ff131615161e1f27ff1f012e38ff62016e54ff380546385b46385bfd38045b5462706eff77fe38011256fe6e0070ff6e0c5b54385443322a1f16150e0b08fd07ff06ff05010605fdff
01ff14fe16021e1726ff1f06375b543854463eff46045438463854fe38ff54025b6277ff7eff77ff7e02773833ff38ff5bff6e015b54ff3807432e19160e160c09ff07ff060005ff06fe05fdff
0011ff15fe160b1e171f274638543e372e3738fe5b023e3854fe38005bff62ff6e0070fe77fe86007efe3803332e386eff620a5b5444322e160e140c0a07ff06010506ff0502060506fdff
0013ff15fe16061e17262e3e463eff37043e465b625bff38ff5bff54025b6277fa7e0077ff86ff77006eff38044633424554fe380a442a200d150e1307060506ff050306050605fdff
011315fe16ff1e021f2737fe3e0d373e46545b625b5446386e626e77fc86fa77037e776e62ff3803461f2e36ff44043d42322e17ff16020d0b07fe050006fd05fdff
0013fd16ff1f0327373e37fd4603385b626eff5b013862fe77f986047786777e77ff6e016254ff380f54442b20161a2e3b3331201617161408ff06ff0502060506fcff
0013fe160017ff1f06292e372846385bff5403626e7062ff5b016277f686ff77007eff6eff620053fd38013521ff170a0c122e1b1f201e1f160c07ff06ff05010605fcff
0013fe16031727202eff370430465b695bff6202777e77ff70007ef586ff77ff6e005bff62fd540a3b2e21181f18212a101718ff1f03160e0a07ff06fe05fcff
0012fe16031e28202eff37062e54707e77626eff77018677f48601777eff6e035b545354fe5b0338432e21ff1f0520211f160a0efe1606140b0907050605fbff
0012fe160d1828272e3e2e375b7e77865b6e7ef186037e776e62ff5bff54045b54384531fe200721201e0f0d09070bff0dff0c020a0706ff05fbff
0012fe16081f2721283e2e3e6277ff8603776e7e77f486ff77037e706e62fe5b0054ff380f3c2e1a2a31212e2116150a0706070d0aff0bff0aff06faff
0012fe16071f2027283e2e4d6efd860077f386ff77037e776e62fc5b043844312031ff430b322a28160d070605080d100cff0b020a0705faff
02111516ff1702252830ff3e02467077fc86ff77f686fe77ff6efe62015b54ff380a3b2a3a445438442e211609ff0709060507060a080a090705faff
04ff1416171eff280037ff3e0338777e77fd8601777ef886fd7702706e62ff5bfe3805453a2a313862ff380344301615fe070806050607090e090706f9ff
01ff13ff16091f292f37465469777e77fc86ff7e0077fb8604777e77706efe62055b5344433a32ff2a0b425b6254433a28160a060907ff05050605ff070a07f8ff
01ff10ff16001fff30063e545b6e5b6e77fc86027e867eff860077ff8603777e706efd62ff5b0854433a3329323b5b54ff38034c311f15fe0702050605f2ff
ffffff16041f28293738ff6902625470fc86fd7e06867e867e77706eff62005bfe54ff3812463a333a4c545b385443322017090506050605f1ff
ffff02141617ff2807274d5b625b627077fd860077fe70fe7eff77006eff5b0654385b38544543ff3c013b4bfe54054c433a281e0cff06010506ff05f1ff
feff01151eff1f0820465b543870777e77ff86017e77ff70016970ff7701706eff62005bff54005bfd540f4443444c38544c4b3a30180d07060506ff05f0ff
feff011316ff1e011f37fe460038ff77fe7e0070ff6e03625b626efe69ff62015b54fb5bff540c4c4b444b434229201307060506ff05efff
feff011213ff16021d1e2eff3702546e70fe77006efe620a54465b626e625b3854385bff54ff5b036054534bfe43033a29200dff06010506ff05eeff
feff0a1116151b161d1e272e3e38ff62ff700069fe5b0054ff460354385445fd44033c4b4d4cfe440043ff3b032a20170cfe050006ff05edff
fdfffe160027ff160427261d2e3eff4d02386269fe621054464d3e3d35333c3d3b332b23222a3334ff3b073120160a05060506ff05ecff
fdff0014ff16053627172e372eff1d0b263646545b6270776e5b384dff3eff3d0e44342a2118222a342b2c3121170b05ff06ff05eaff
fdff000dff160d3e451e20464d452c1d1e2e465b69fe700b6e625b5438544d4432211832ff3c052c2220170e08ff06fe05e9ff
fcff030e152e54ff1f004cff5b083d3c262f3646386269ff62ff5b074d544d3d332a2033ff4c0a3b2a180e0b060706050605e8ff
fbff0512141f241f3eff5b0a45534d28363d4445464d45fe44023c3432ff22082b443c332a200f0706ff070006ff05e7ff
faff0b11121e151e2e454d5b54462eff3404363e363d3cff340a2b22232b333c322a21190fff06ff07fe05e6ff
f9ff14101213141d253d4654463e32242c2e363e3d3b3433ff2c05333429211f10fe07ff06ff05e4ff
f8ff000fff110312142d36ff3e053423222b2d2eff3dff3c0834353b2b21180f0c05fe070006ff05e3ff
f7ff000efe100b131c1e2e2428222c351e2d34ff3308343221100f0b060709ff07ff05e1ff
f5ff05090d0e101214ff1b0722343d351c1b1a19ff0f060e0d06090b0a07fe05e0ff
f3ff16060a0b0e0f11222b33291f0f0e0d0b0a0c080a0b0a0705ddff
f3ff0e070f130708090e1617160c0b090b0cff0e030b090705dbff
f1ff060b0e13110d0b0dfe0bff0aff0c010a07d8ff
efff010b0dff0e030c090705ffff010607d6ff
edff010709ceff
restore
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Italic
%%Page: 2 2
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (2) 21 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1410 40 264 318 CB
1408 7 265 334 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 412 584 (What is OpenGL?) 584 SB
/fm 256 def
264 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 489 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 572 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 577 2387 (OpenGL is a software interface to 3D and 2D graphics routines. OpenGL can be used as an interface to) 2387 SB
384 646 1575 (graphics hardware or in some instances, be a software only solution.) 1575 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 763 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 768 2485 (This interface consists of about 120 distinct commands, which you use to specify the objects and operations) 2485 SB
384 837 1414 (needed to produce interactive three-dimensional applications.) 1414 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 954 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 959 2443 (OpenGL is designed to work efficiently even if the computer that displays the graphics you create isn't the) 2443 SB
384 1028 981 (computer that runs your graphics program.) 981 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1120 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
441 1125 2523 (This might be the case if you work in a networked computer environment where many computers are connected to one another) 2523 SB
441 1184 2389 (by wires capable of carrying digital data. In this situation, the computer on which your program runs and issues OpenGL) 2389 SB
441 1243 2500 (drawing commands is called the client, and the computer that receives those commands and performs the drawing is called the) 2500 SB
441 1302 2474 (server. The format for transmitting OpenGL commands \(called the protocol\) from the client to the server is always the same,) 2474 SB
441 1361 2501 (so OpenGL programs can work across a  network even if the client and server are different kinds of computers. If an OpenGL) 2501 SB
441 1420 2193 (program isn't running across a network, then there's only one computer, and it is both the client and the server.) 2193 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1527 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1532 2481 (OpenGL is designed as a streamlined, hardware-independent interface to be implemented on many different) 2481 SB
384 1601 463 (hardware platforms.) 463 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1693 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
441 1698 524 (To achieve these qualities:) 524 SB
32 0 0 50 50 0 0 0 50 /Symbol font
441 1780 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
501 1785 1902 (No commands for performing windowing tasks or obtaining user input are included in OpenGL.) 1902 SB
32 0 0 50 50 0 0 0 50 /Symbol font
441 1867 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
501 1872 1971 (You must work through whatever windowing system controls the particular hardware you're using.) 1971 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (3) 21 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 2544 (With OpenGL, you must build up your desired model from a small set of geometric primitive points, lines, and) 2544 SB
384 299 2507 (polygons. \(A sophisticated library that provides these features could certainly be built on top of OpenGL, we) 2507 SB
384 368 680 (will investigate this in detail\).) 680 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 572 641 (How does OpenGL work?) 641 SB
32 0 0 58 58 0 0 0 58 /Symbol font
325 702 27 (\267) 28 SB
353 702 15 ( ) 32 SB
324 702 27 (\267) 28 SB
352 702 15 ( ) 32 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 707 2574 (Here is the order in which OpenGL performs the major graphics operations necessary to render an image on the) 2574 SB
384 776 163 (screen.) 163 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
381 870 51 (1. ) 60 SB
441 870 2507 (Construct shapes from geometric primitives, thereby creating mathematical descriptions of objects. \(OpenGL considers points,) 2507 SB
441 929 1073 (lines, polygons, images, and bitmaps to be primitives.\)) 1073 SB
381 1013 51 (2. ) 60 SB
441 1013 2309 (Arrange the objects in three-dimensional space and select the desired vantage point for viewing the composed scene.) 2309 SB
381 1097 51 (3. ) 60 SB
441 1097 2398 (Calculate the color of all the objects. The color might be explicitly assigned by the application, determined from specified) 2398 SB
441 1156 1366 (lighting conditions, or obtained by pasting a texture onto the objects.) 1366 SB
381 1240 51 (4. ) 60 SB
441 1240 2488 (Convert the mathematical description of objects and their associated color information to pixels on the screen. This process is) 2488 SB
441 1299 386 (called rasterization.) 386 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1406 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1411 2439 (During these stages, OpenGL might perform other operations, such as eliminating parts of objects that are) 2439 SB
384 1480 2565 (hidden by other objects \(the hidden parts won't be drawn, which might increase performance\). In addition, after) 2565 SB
384 1549 2504 (the scene is rasterized but just before it's drawn on the screen, you can manipulate the pixel data if you want.) 2504 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (4) 21 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 362 451 (Some basic terms:) 451 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 542 204 (Rendering) 204 SB
378 614 1486 (Conversion of primitives specified in object co-ordinates to an image in the) 1486 SB
378 673 1267 (framebuffer. Rendering is the primary operation of OpenGL, it's) 1267 SB
378 732 401 (what OpenGL does.) 401 SB
264 889 165 (Bitplane) 165 SB
378 961 1163 (A rectangular array of bits mapped one-to-one with pixels.) 1163 SB
264 1118 243 (Framebuffer) 243 SB
378 1190 2555 (All the buffers of a given window or context. Sometimes includes all the pixel memory of the graphics hardware accelerator. The) 2555 SB
378 1249 773 (framebuffer is also a stack of bitplanes.) 773 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (5) 21 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
264 266 586 (A simple example:) 586 SB
0 0 0 fC
/fm 256 def
264 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 343 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 426 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 431 2294 (Because you can do so many things with the OpenGL graphics system, an OpenGL program can be) 2294 SB
384 500 2512 (complicated. However, the basic structure of a useful program can be simple: Its tasks are to initialise certain) 2512 SB
384 569 1803 (states that control how OpenGL renders and to specify objects to be rendered.) 1803 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 686 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 691 202 (Example) 202 SB
586 691 1703 ( 1-1  renders a white rectangle on a black background, as shown in Figure) 1703 SB
2289 691 122 ( 1-1 .) 122 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 849 875 (Example 1-1: A simple OpenGL Program.) 875 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
264 932 700 (#include <whateverYouNeed.h>) 700 SB
264 1003 200 (main\(\) {) 200 SB
264 1074 50 (  ) 50 SB
314 1074 575 (   OpenAWindowPlease\(\);) 575 SB
264 1145 50 (  ) 50 SB
314 1145 900 (   glClearColor\(0.0, 0.0, 0.0, 0.0\);) 900 SB
264 1216 50 (  ) 50 SB
314 1216 800 (   glClear\(GL_COLOR_BUFFER_BIT\);) 800 SB
264 1287 50 (  ) 50 SB
314 1287 700 (   glColor3f\(1.0, 1.0, 1.0\);) 700 SB
264 1358 50 (  ) 50 SB
314 1358 375 (   glOrtho\(-1.0) 375 SB
689 1358 725 (, 1.0, -1.0, 1.0, -1.0, 1.0\);) 725 SB
264 1429 50 (  ) 50 SB
314 1429 575 (   glBegin\(GL_POLYGON\);) 575 SB
264 1500 50 (  ) 50 SB
314 1500 725 (      glVertex2f\(-0.5, -0.5\);) 725 SB
264 1571 50 (  ) 50 SB
314 1571 700 (      glVertex2f\(-0.5, 0.5\);) 700 SB
264 1642 50 (  ) 50 SB
314 1642 675 (      glVertex2f\(0.5, 0.5\);) 675 SB
264 1713 50 (  ) 50 SB
314 1713 700 (      glVertex2f\(0.5, -0.5\);) 700 SB
264 1784 50 (  ) 50 SB
314 1784 275 (   glEnd\(\);) 275 SB
264 1855 50 (  ) 50 SB
314 1855 325 (   glFlush\(\);) 325 SB
264 1926 50 (  ) 50 SB
314 1926 975 (   KeepTheWindowOnTheScreenForAWhile\(\);) 975 SB
264 1997 25 (}) 25 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (6) 21 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 104 (The ) 104 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
488 231 539 (OpenAWindowPlease\(\)) 539 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1027 230 1655 ( routine is meant as a placeholder for a window system-specific routine.) 1655 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 347 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 352 1733 (The next two lines are OpenGL commands that clear the window to black: ) 1733 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2117 353 351 (glClearColor\(\)) 351 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2468 352 392 ( establishes what) 392 SB
384 421 945 (color the window will be cleared to, and ) 945 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1329 422 215 (glClear\(\)) 215 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1544 421 1395 ( actually clears the window. Once the color to clear to is set,) 1395 SB
384 490 1052 (the window is cleared to that color whenever ) 1052 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1436 491 215 (glClear\(\)) 215 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1651 490 220 ( is called.) 220 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 607 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 612 1159 (The next OpenGL command used in the program, ) 1159 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1543 613 236 (glOrtho\(\),) 236 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1779 612 983 ( specifies the  co-ordinate system OpenGL) 983 SB
384 681 1889 (assumes as it draws the final image and how the image gets mapped to the screen.) 1889 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 798 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 803 905 (The next calls, which are bracketed by ) 905 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1289 804 217 (glBegin\(\)) 217 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1506 803 113 ( and ) 113 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1619 804 190 (glEnd\(\),) 190 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1809 803 1107 ( define the object to be drawn in this example, a) 1107 SB
384 872 620 (polygon with four vertices.) 620 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 989 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 994 997 (The polygon's "corners" are defined by the ) 997 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1381 995 278 (glVertex2f\(\)) 278 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1659 994 1194 ( commands. As you might be able to guess from the) 1194 SB
384 1063 1670 (arguments, which are \(x, y\) co-ordinate pairs, the polygon is a rectangle.) 1670 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1180 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1185 188 (Finally, ) 188 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
572 1186 213 (glFlush\(\)) 213 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
785 1185 2025 ( ensures that the drawing commands are actually executed, rather than stored in a buffer) 2025 SB
384 1254 932 (awaiting additional OpenGL commands.) 932 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1371 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1376 104 (The ) 104 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
488 1377 1003 (KeepTheWindowOnTheScreenForAWhile\(\)) 1003 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1491 1376 1426 ( placeholder routine forces the picture to remain on the screen) 1426 SB
384 1445 845 (instead of immediately disappearing.) 845 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (7) 21 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 240 587 (Figure 1-1: Resultant image) 587 SB
/bytestr 251 string def
gs 593 637 264 323 CB
save 264 323 translate 593 637 scale
251 269 8
[251 0 0 -269 0 269]
{unpack} bind
image
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
restore
gr
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 1005 CB
1460 7 265 1021 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 1099 896 (OpenGL Command Syntax:) 896 SB
/fm 256 def
264 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
852 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
894 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
936 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
978 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1020 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1062 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1104 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1146 1176 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1259 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1264 2469 (OpenGL commands use the prefix gl and initial capital letters for each word making up the command name) 2469 SB
384 1333 161 (\(recall ) 161 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
545 1334 366 (glClearColor\(\),) 366 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
911 1333 323 ( for example\).) 323 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1450 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1455 2534 (OpenGL defined constants begin with GL_, use all capital letters, and use underscores to separate words \(like) 2534 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 1544 475 (GL_COLOR_BUFFER_BIT) 475 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
859 1524 34 (\).) 34 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1641 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1646 1708 (The seemingly extraneous letters appended to some command names \(the ) 1708 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2092 1647 45 (3f) 45 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2137 1646 73 ( in ) 73 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2210 1647 278 (glColor3f\(\),) 278 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2488 1646 394 ( for example\) are) 394 SB
384 1715 1765 (necessary to allow the command to be used with various type of data values.) 1765 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1832 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1837 104 (The ) 104 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
488 1838 29 (3) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
517 1837 2378 ( part of the suffix indicates that three arguments are given; another version of the Color command takes) 2378 SB
384 1906 480 (four arguments. The ) 480 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
864 1907 16 (f) 16 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
880 1906 1692 ( part of the suffix indicates that the arguments are floating-point numbers.) 1692 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 2023 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 2028 2094 (Some OpenGL commands accept as many as eight different data types for their arguments.) 2094 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (8) 21 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
264 351 1410 (Command suffixes maping to ANSI C types:) 1410 SB
0 0 0 fC
/fm 256 def
264 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
852 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
894 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
936 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
978 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1020 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1062 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1104 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1146 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1188 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1230 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1272 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1314 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1356 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1398 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1440 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1482 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1524 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1566 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1608 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1650 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 561 1184 (Table 1-1: Command Suffixes and Argument Data Types) 1184 SB
128 128 128 fC
/fm 256 def
188 5 240 716 B
1 F
n
/fm 256 def
5 5 429 716 B
1 F
n
/fm 256 def
529 5 435 716 B
1 F
n
/fm 256 def
5 5 965 716 B
1 F
n
/fm 256 def
419 5 971 716 B
1 F
n
/fm 256 def
5 5 1391 716 B
1 F
n
/fm 256 def
629 5 1397 716 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 188 91 241 716 CB
264 737 119 (Suffix) 119 SB
gr
gs 536 91 429 716 CB
453 737 209 (Data Type) 209 SB
gr
gs 426 91 965 716 CB
988 737 359 (C-Language Type) 359 SB
gr
gs 636 91 1391 716 CB
1415 737 498 (OpenGL Type Definition) 498 SB
gr
128 128 128 fC
/fm 256 def
188 2 240 807 B
1 F
n
/fm 256 def
2 2 429 807 B
1 F
n
/fm 256 def
532 2 432 807 B
1 F
n
/fm 256 def
2 2 965 807 B
1 F
n
/fm 256 def
422 2 968 807 B
1 F
n
/fm 256 def
2 2 1391 807 B
1 F
n
/fm 256 def
632 2 1394 807 B
1 F
n
0 0 0 fC
gs 188 88 241 807 CB
324 825 24 (b) 24 SB
gr
gs 536 88 429 807 CB
453 825 243 (8-bit integer) 243 SB
gr
gs 426 88 965 807 CB
988 825 225 (signed char) 225 SB
gr
gs 636 88 1391 807 CB
1415 825 150 (GLbyte) 150 SB
gr
gs 188 85 241 895 CB
326 910 19 (s) 19 SB
gr
gs 536 85 429 895 CB
453 910 268 (16-bit integer) 268 SB
gr
gs 426 85 965 895 CB
988 910 101 (short) 101 SB
gr
gs 636 85 1391 895 CB
1415 910 167 (GLshort) 167 SB
gr
gs 188 85 241 980 CB
330 995 12 (i) 12 SB
gr
gs 536 85 429 980 CB
453 995 268 (32-bit integer) 268 SB
gr
gs 426 85 965 980 CB
988 995 87 (long) 87 SB
gr
gs 636 85 1391 980 CB
1415 995 278 (Glint, GLsizei) 278 SB
gr
gs 188 85 241 1065 CB
328 1080 15 (f) 15 SB
gr
gs 536 85 429 1065 CB
453 1080 401 (32-bit floating-point) 401 SB
gr
gs 426 85 965 1065 CB
988 1080 90 (float) 90 SB
gr
gs 636 85 1391 1065 CB
1415 1080 363 (Glfloat, GLclampf) 363 SB
gr
gs 188 85 241 1150 CB
323 1165 25 (d) 25 SB
gr
gs 536 85 429 1150 CB
453 1165 401 (64-bit floating-point) 401 SB
gr
gs 426 85 965 1150 CB
988 1165 134 (double) 134 SB
gr
gs 636 85 1391 1150 CB
1415 1165 417 (Gldouble, GLclampd) 417 SB
gr
gs 188 85 241 1235 CB
311 1250 49 (ub) 49 SB
gr
gs 536 85 429 1235 CB
453 1250 432 (8-bit unsigned integer) 432 SB
gr
gs 426 85 965 1235 CB
988 1250 274 (unsigned char) 274 SB
gr
gs 636 85 1391 1235 CB
1415 1250 405 (Glubyte, GLboolean) 405 SB
gr
gs 188 85 241 1320 CB
314 1335 44 (us) 44 SB
gr
gs 536 85 429 1320 CB
453 1335 457 (16-bit unsigned integer) 457 SB
gr
gs 426 85 965 1320 CB
988 1335 290 (unsigned short) 290 SB
gr
gs 636 85 1391 1320 CB
1415 1335 192 (GLushort) 192 SB
gr
128 128 128 fC
/fm 256 def
188 5 240 1490 B
1 F
n
/fm 256 def
5 5 429 1490 B
1 F
n
/fm 256 def
529 5 435 1490 B
1 F
n
/fm 256 def
5 5 965 1490 B
1 F
n
/fm 256 def
419 5 971 1490 B
1 F
n
/fm 256 def
5 5 1391 1490 B
1 F
n
/fm 256 def
629 5 1397 1490 B
1 F
n
0 0 0 fC
gs 188 85 241 1405 CB
317 1420 37 (ui) 37 SB
gr
gs 536 85 429 1405 CB
453 1420 457 (32-bit unsigned integer) 457 SB
gr
gs 426 85 965 1405 CB
988 1420 276 (unsigned long) 276 SB
gr
gs 636 85 1391 1405 CB
1415 1420 558 (GLuint,GLenum, GLbitfield) 558 SB
gr
32 0 0 58 58 0 0 0 58 /Symbol font
324 1631 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1636 593 (Thus, the two commands:) 593 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 1788 425 (glVertex2i\(1, 3\);) 425 SB
378 1833 525 (glVertex2f\(1.0, 3.0\);) 525 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1928 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1933 2555 (are equivalent, except that the first specifies the vertex's coordinates as 32-bit integers and the second specifies) 2555 SB
384 2002 1108 (them as single-precision floating-point numbers.) 1108 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1555 2150 97 (Page ) 97 SB
1652 2150 21 (9) 21 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 2575 (Some OpenGL commands can take a final letter v, which indicates that the command takes a pointer to a vector) 2575 SB
384 299 1464 (\(or array\) of values rather than a series of individual arguments:) 1464 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 451 625 (glColor3f\(1.0, 0.0, 0.0\);) 625 SB
378 541 925 (float color_array[] = {1.0, 0.0,0.0};) 925 SB
378 586 600 (glColor3fv\(color_array\);) 600 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 681 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 686 2308 (The particular implementation of OpenGL that you're using might not follow this scheme exactly; an) 2308 SB
384 755 1436 (implementation in C++ or Ada, for example, wouldn't need to.) 1436 SB
0 0 0 fC
/fm 256 def
5 5 238 907 B
1 F
n
/fm 256 def
5 5 238 907 B
1 F
n
/fm 256 def
336 5 244 907 B
1 F
n
/fm 256 def
5 5 581 907 B
1 F
n
/fm 256 def
1576 5 587 907 B
1 F
n
/fm 256 def
5 5 2164 907 B
1 F
n
/fm 256 def
5 5 2164 907 B
1 F
n
/fm 256 def
5 84 238 913 B
1 F
n
/fm 256 def
5 5 238 998 B
1 F
n
/fm 256 def
5 5 238 998 B
1 F
n
/fm 256 def
336 5 244 998 B
1 F
n
/fm 256 def
2 84 581 913 B
1 F
n
/fm 256 def
5 5 581 998 B
1 F
n
/fm 256 def
1576 5 587 998 B
1 F
n
/fm 256 def
5 84 2164 913 B
1 F
n
/fm 256 def
5 5 2164 998 B
1 F
n
/fm 256 def
5 5 2164 998 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 244 907 CB
401 928 21 (?) 21 SB
gr
gs 1580 91 584 907 CB
605 928 1271 (How would C++ or Ada remove these extra routine definitions?) 1271 SB
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
264 1300 900 (OpenGL as a State Machine) 900 SB
/fm 256 def
264 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
852 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
894 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
936 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
978 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1020 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1062 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1104 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1146 1377 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1460 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1465 2567 (OpenGL is a state machine. You put it into various states \(or modes\) that then remain in effect until you change) 2567 SB
384 1534 128 (them.) 128 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1651 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1656 2373 (The current color is a state variable. You can set the current color to white, red, or any other color, and) 2373 SB
384 1725 2204 (thereafter every object is drawn with that color until you set the current color to something else.) 2204 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1842 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1847 2545 (The current color is only one of many state variables that OpenGL preserves. Others control such things as the) 2545 SB
384 1916 2455 (current viewing and projection transformations, line and polygon stipple patterns, polygon drawing modes,) 2455 SB
384 1985 2514 (pixel-packing conventions, positions and characteristics of lights, and material properties of the objects being) 2514 SB
384 2054 159 (drawn.) 159 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (10) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 1917 (Many state variables refer to modes that are enabled or disabled with the command) 1917 SB
2301 230 30 (  ) 30 SB
2331 230 15 ( ) 15 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2346 231 246 (glEnable\(\)) 246 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2592 230 78 ( or ) 78 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2670 231 278 (glDisable\(\).) 278 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 347 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 352 2516 (Each state variable or mode has a default value, and at any point you can query the system for each variable's) 2516 SB
384 421 1302 (current value using one of the four following commands:) 1302 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
378 549 985 (glGetBooleanv\(\), glGetDoublev\(\), glGetFloatv\(\),) 985 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1363 549 69 ( or ) 69 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1432 549 310 (glGetIntegerv\(\)) 310 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 656 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 661 2466 (Which of these commands you select depends on what data type you want the answer to be given in. Some) 2466 SB
384 730 1420 (state variables have a more specific query command \(such as ) 1420 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1804 731 661 (glGetLight*\(\), glGetError\(\),) 661 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2465 730 63 ( or) 63 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
384 800 519 (glGetPolygonStipple\(\)) 519 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
903 799 49 ( \).) 49 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 916 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 921 2558 (In addition, you can save and later restore the values of a collection of state variables on an attribute stack with) 2558 SB
384 990 85 (the ) 85 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
469 991 332 (glPushAttrib\(\)) 332 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
801 990 98 ( and) 98 SB
899 990 30 (  ) 30 SB
929 990 15 ( ) 15 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
944 991 309 (glPopAttrib\(\)) 309 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1253 990 1651 ( commands. Whenever possible, you should use these commands rather) 1651 SB
384 1059 1687 (than any of the query commands, since they're likely to be more efficient.) 1687 SB
0 0 0 fC
/fm 256 def
5 5 238 1296 B
1 F
n
/fm 256 def
5 5 238 1296 B
1 F
n
/fm 256 def
336 5 244 1296 B
1 F
n
/fm 256 def
5 5 581 1296 B
1 F
n
/fm 256 def
1576 5 587 1296 B
1 F
n
/fm 256 def
5 5 2164 1296 B
1 F
n
/fm 256 def
5 5 2164 1296 B
1 F
n
/fm 256 def
5 84 238 1302 B
1 F
n
/fm 256 def
5 5 238 1387 B
1 F
n
/fm 256 def
5 5 238 1387 B
1 F
n
/fm 256 def
336 5 244 1387 B
1 F
n
/fm 256 def
2 84 581 1302 B
1 F
n
/fm 256 def
5 5 581 1387 B
1 F
n
/fm 256 def
1576 5 587 1387 B
1 F
n
/fm 256 def
5 84 2164 1302 B
1 F
n
/fm 256 def
5 5 2164 1387 B
1 F
n
/fm 256 def
5 5 2164 1387 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 244 1296 CB
401 1317 21 (?) 21 SB
gr
gs 1580 91 584 1296 CB
605 1317 680 (Why would this be more efficient?) 680 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (11) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1410 40 264 257 CB
1408 7 265 273 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 351 1696 (The OpenGL Programming Guide Auxiliary Library) 1696 SB
/fm 256 def
264 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
852 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
894 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
936 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
978 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1020 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1062 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1104 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1146 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1188 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1230 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1272 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1314 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1356 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1398 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1440 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1482 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1524 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1566 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1608 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1650 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1692 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1734 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1776 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1818 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1860 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1902 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1944 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 596 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 601 2514 (OpenGL contains rendering commands but is designed to be independent of any window system or operating) 2514 SB
384 670 2520 (system. Consequently, it contains no commands for opening windows or reading events from the keyboard or) 2520 SB
384 739 164 (mouse.) 164 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 856 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 861 2567 (The auxiliary library is intentionally simple, and it would be difficult to build a large application on top of it. It's) 2567 SB
384 930 2464 (intended solely to support the examples in the \223OpenGL Programming Guide\224, but you may find it a useful) 2464 SB
384 999 1114 (starting point to begin building real applications.) 1114 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1203 545 (Window Management) 545 SB
/fm 256 def
264 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
553 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
589 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
625 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
661 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
697 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
733 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
769 1263 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
805 1263 M -4 0 0 -6 4 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1333 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1338 1638 (Three routines perform tasks necessary to initialise and open a window) 1638 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1430 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
441 1435 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
777 1435 2051 ( opens a window on the screen. It enables the Escape key to be used to exit the program, and it sets the) 2051 SB
441 1494 853 (background color for the window to black.) 853 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1576 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
441 1581 341 (auxInitPosition\(\)) 341 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
782 1581 106 ( tells ) 106 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
888 1581 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1224 1581 856 ( where to position a window on the screen.) 856 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1663 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
441 1668 444 (auxInitDisplayMode\(\)) 444 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
885 1668 106 ( tells ) 106 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
991 1668 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1327 1668 1509 ( whether to create an RGBA or color-index window. You can also specify a) 1509 SB
441 1727 2443 (single- or double-buffered window. \(If you're working in color-index mode, you'll want to load certain colors into the color) 2443 SB
441 1786 176 (map; use) 176 SB
617 1786 26 (  ) 26 SB
643 1786 13 ( ) 13 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
656 1786 365 (auxSetOneColor\(\)) 365 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1021 1786 1844 ( to do this.\) Finally, you can use this routine to indicate that you want the window to have an) 1844 SB
441 1845 1055 (associated depth, stencil, and/or accumulation buffer.) 1055 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 12 12
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (12) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 562 (Handling Input Events) 562 SB
0 0 0 fC
/fm 256 def
264 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
732 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
768 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
804 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2402 (You can use these routines to register callback commands that are invoked when specified events occur.) 2402 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 454 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
441 459 376 (auxReshapeFunc\(\)) 376 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
817 459 1733 ( indicates what action should be taken when the window is resized, moved, or exposed.) 1733 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 541 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
441 546 284 (auxKeyFunc\(\)) 284 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
725 546 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
822 546 340 (auxMouseFunc\(\)) 340 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1162 546 1733 ( allow you to link a keyboard key or a mouse button with a routine that's invoked when) 1733 SB
441 605 933 (the key or mouse button is pressed or released.) 933 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 799 524 (Drawing 3-D Objects) 524 SB
/fm 256 def
264 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
732 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
768 859 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 929 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 934 2090 (The auxiliary library includes several routines for drawing these three-dimensional objects:) 2090 SB
32 0 0 50 50 0 0 0 50 /Symbol font
381 1026 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
441 1031 1650 (sphere, octahedron, cube, dodecahedron, torus, icosahedron, cylinder, teapot, cone) 1650 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1138 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1143 2374 (You can draw these objects as wireframes or as solid shaded objects with surface normals defined. For) 2374 SB
384 1212 1400 (example, the routines for a sphere and a torus are as follows:) 1400 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
378 1366 795 (void auxWireSphere\(GLdouble radius\);) 795 SB
378 1425 802 (void auxSolidSphere\(GLdouble radius\);) 802 SB
378 1484 1373 (void auxWireTorus\(GLdouble innerRadius, GLdouble outerRadius\);) 1373 SB
378 1543 1380 (void auxSolidTorus\(GLdouble innerRadius, GLdouble outerRadius\);) 1380 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1650 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1655 2516 (All these models are drawn centered at the origin. When drawn with unit scale factors, these models fit into a) 2516 SB
384 1724 2188 (box with all coordinates from -1 to 1. Use the arguments for these routines to scale the objects.) 2188 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (13) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 814 (Managing a Background Process) 814 SB
0 0 0 fC
/fm 256 def
264 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
732 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
768 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
804 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
840 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
876 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
912 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
948 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
984 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1020 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1056 287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2467 (You can specify a function that's to be executed if no other events are pending for example, when the event) 2467 SB
384 431 800 (loop would otherwise be idle with ) 800 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1184 432 344 (auxIdleFunc\(\).) 344 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1528 431 1241 ( This routine takes a pointer to the function as its only) 1241 SB
384 500 1446 (argument. Pass in zero to disable the execution of the function.) 1446 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 704 539 (Running the Program) 539 SB
/fm 256 def
264 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
553 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
589 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
625 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
661 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
697 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
733 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
769 764 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 834 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 839 291 (Within your ) 291 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
675 840 153 (main\(\)) 153 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
828 839 303 ( routine, call ) 303 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1131 840 362 (auxMainLoop\(\)) 362 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1493 839 1429 ( and pass it the name of the routine that redraws the objects in) 1429 SB
384 908 495 (your scene.  Example) 495 SB
879 908 669 ( 1-2  shows how you might u) 669 SB
1548 908 1411 (se the auxiliary library to create the simple program shown in) 1411 SB
384 977 202 (Example) 202 SB
586 977 122 ( 1-1 .) 122 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (14) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 1657 (Example 1-2: A Simple OpenGL Program Using the Auxiliary Library: simple.c) 1657 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 440 575 (/* Includes required */) 575 SB
378 485 450 (#include <GL/gl.h>) 450 SB
378 530 400 (#include "aux.h") 400 SB
378 575 50 (/*) 50 SB
378 620 1350 ( *  Clear the screen.  Set the current color to white.) 1350 SB
378 665 725 ( *  Draw the wire frame cube.) 725 SB
378 710 75 ( */) 75 SB
378 755 450 (void display\(void\)) 450 SB
378 800 25 ({) 25 SB
378 845 75 (   ) 75 SB
453 845 925 (   glClearColor \(0.0, 0.0, 0.0, 0.0\);) 925 SB
378 890 50 (  ) 50 SB
428 890 825 (    glClear\(GL_COLOR_BUFFER_BIT\);) 825 SB
378 935 25 ( ) 25 SB
403 935 750 (     glColor3f\(1.0, 1.0, 1.0\);) 750 SB
378 980 50 (  ) 50 SB
428 980 1125 (    glOrtho\(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0\);) 1125 SB
378 1025 25 ( ) 25 SB
403 1025 575 (     glBegin\(GL_POLYGON) 575 SB
978 1025 50 (\);) 50 SB
378 1070 25 ( ) 25 SB
403 1070 50 (  ) 50 SB
453 1070 875 (            glVertex2f\(-0.5, -0.5\);) 875 SB
378 1115 25 ( ) 25 SB
403 1115 50 (  ) 50 SB
453 1115 850 (            glVertex2f\(-0.5, 0.5\);) 850 SB
378 1160 25 ( ) 25 SB
403 1160 50 (  ) 50 SB
453 1160 825 (            glVertex2f\(0.5, 0.5\);) 825 SB
378 1205 25 ( ) 25 SB
403 1205 50 (  ) 50 SB
453 1205 850 (            glVertex2f\(0.5, -0.5\);) 850 SB
378 1250 50 (  ) 50 SB
428 1250 300 (    glEnd\(\);) 300 SB
378 1295 50 (  ) 50 SB
428 1295 350 (    glFlush\(\);) 350 SB
378 1340 25 (}) 25 SB
378 1385 750 (/* Initialize shading model */) 750 SB
378 1430 425 (void myInit\(void\)) 425 SB
378 1475 25 ({) 25 SB
378 1520 725 (      glShadeModel \(GL_FLAT\);) 725 SB
378 1565 25 (}) 25 SB
378 1610 50 (/*) 50 SB
378 1655 1375 ( *  Called when the window is first opened and whenever) 1375 SB
378 1700 1250 ( *  the window is reconfigured \(moved or resized\).) 1250 SB
378 1745 75 ( */) 75 SB
378 1790 900 (void myReshape\(GLsizei w, GLsizei h\)) 900 SB
378 1835 25 ({) 25 SB
378 1880 50 (  ) 50 SB
428 1880 800 (    glMatrixMode\(GL_PROJECTION\);) 800 SB
378 1925 50 (  ) 50 SB
428 1925 525 (    glLoadIdentity\(\);) 525 SB
378 1970 1825 (      glFrustum \(-1.0, 1.0, -1.0, 1.0, 1.5, 20.0\);  /* transformation  */) 1825 SB
378 2015 1825 (      glMatrixMode \(GL_MODELVIEW\);        /* back to modelview matrix  */) 1825 SB
378 2060 1700 (      glViewport \(0, 0, w, h\);            /*  define the viewport */) 1700 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%Page: 15 15
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (15) 42 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 225 25 (}) 25 SB
378 270 50 (/*) 50 SB
378 315 325 ( *  Main Loop) 325 SB
378 360 1300 ( *  Open window with initial window size, title bar,) 1300 SB
378 405 1175 ( *  RGBA display mode, and handle input events.) 1175 SB
378 450 75 ( */) 75 SB
378 495 775 (int main\(int argc, char** argv\)) 775 SB
378 540 25 ({) 25 SB
378 585 25 ( ) 25 SB
403 585 50 (  ) 50 SB
453 585 1150 (   auxInitDisplayMode \(AUX_SINGLE | AUX_RGBA\);) 1150 SB
378 630 25 ( ) 25 SB
403 630 50 (  ) 50 SB
453 630 900 (   auxInitPosition \(0, 0, 500, 500\);) 900 SB
378 675 25 ( ) 25 SB
403 675 50 (  ) 50 SB
453 675 675 (   auxInitWindow \(argv[0]\);) 675 SB
378 720 50 (  ) 50 SB
428 720 100 (    ) 100 SB
528 720 250 (myInit \(\);) 250 SB
378 765 825 (      auxReshapeFunc \(myReshape\);) 825 SB
378 810 675 (      auxMainLoop\(display\);) 675 SB
378 855 25 (}) 25 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%Page: 16 16
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (16) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 257 CB
1460 7 265 273 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 351 621 (Compilling on RCS) 621 SB
/fm 256 def
264 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
601 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
643 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
685 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
727 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
769 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
811 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
853 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 511 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 516 2383 (There is an example Makefile in the VisClass/apps directory which can be used as a template for future) 2383 SB
384 585 294 (assignments.) 294 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 752 930 (Example 1-3: Example Makefile for simple.c) 930 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 822 25 (#) 25 SB
378 867 1400 (# Sample Makefile for compilling the sample code for the) 1400 SB
378 912 1775 (# Advanced Computer Graphics and Data Visualization 35.6961 \(Fall 1995\)) 1775 SB
378 957 25 (#) 25 SB
378 1002 1550 (# Copy this to the directory where the program resides and use) 1550 SB
378 1047 25 (#) 25 SB
378 1092 525 (#       make progname) 525 SB
378 1137 25 (#) 25 SB
378 1182 1700 (# The progname would be the prefix of the source file you generated.) 1700 SB
378 1227 1600 (# Like if your source file was hw1.c, the above line would read:) 1600 SB
378 1272 25 (#) 25 SB
378 1317 400 (#       make hw1) 400 SB
378 1362 25 (#) 25 SB
378 1407 1775 (# The make utility would automatically look for something with a suffix) 1775 SB
378 1452 1700 (# it understood and would find hw1.c. There are built in rules which) 1700 SB
378 1497 850 (# tell it how to compile c source.) 850 SB
378 1542 25 (#) 25 SB
378 1632 2500 (LDFLAGS= -L/locker/44/000644/Mesa/@sys/lib -lglut -lMesaGLU -lMesaGL -L/usr/local/X11/lib -lXmu -lXt) 2500 SB
378 1677 225 (-lX11 -lm) 225 SB
378 1722 1200 (CFLAGS= -g -I/locker/44/000644/Mesa/@sys/include) 1200 SB
378 1812 550 ($\(TARGET\): $\(TARGET\).o) 550 SB
414 1857 825 ($\(CC\) -o $@ $? $\(LIBS\) $\(LDFLAGS\)) 825 SB
378 1947 150 (clean:) 150 SB
414 1992 325 (/bin/rm -f *.) 325 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 17 17
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (17) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 871 (Example 1-4: Results of the build process.) 871 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 480 950 (% make -f Makefile.Mesa  TARGET=simple) 950 SB
378 525 1400 (    cc -I/locker/44/000644/Mesa/@sys/include -c simple.c) 1400 SB
378 570 2125 (    cc -o simple simple.o -L/locker/44/000644/Mesa/@sys/lib -lglut -lMesaGLU -lMesaGL) 2125 SB
378 615 1025 (-L/usr/local/X11/lib -lXmu -lXt -lX11 -lm) 1025 SB
378 660 25 (%) 25 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 755 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 760 1840 (Obviously there should be no warning or error messages as a result of the build.) 1840 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (18) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 257 CB
1460 7 265 273 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 351 337 (Animation) 337 SB
/fm 256 def
264 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
433 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
475 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
517 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
559 428 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 511 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 516 2545 (One of the most exciting things you can do on a graphics computer is draw pictures that move. Whether you're) 2545 SB
384 585 2553 (an engineer trying to see all sides of a mechanical part you're designing, a pilot learning to fly an airplane using) 2553 SB
384 654 2517 (a simulation, or merely a computer-game aficionado, it's clear that animation is an important part of computer) 2517 SB
384 723 209 (graphics.) 209 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 840 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 845 2483 (In a movie theater, motion is achieved by taking a sequence of pictures \(24 per second\), and then projecting) 2483 SB
384 914 2513 (them at 24 per second on the screen. \(The old Charlie Chaplin movies were shot at 16 frames per second and) 2513 SB
384 983 491 (are noticeably jerky.\)) 491 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1100 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1105 2554 (Computer-graphics screens typically refresh \(redraw the picture\) approximately 60 to 76 times per second, and) 2554 SB
384 1174 2410 (some even run at about 120 refreshes per second. Clearly, 60 per second is smoother than 30, and 120 is) 2410 SB
384 1243 2531 (marginally better than 60. Refresh rates faster than 120, however, are beyond the point of diminishing returns,) 2531 SB
384 1312 846 (since the human eye is only so good.) 846 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1429 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1434 2495 (The key idea that makes motion picture projection work is that when it is displayed, each frame is complete.) 2495 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1551 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1556 2064 (What is the problem with this following code segment which attempts to animate a scene:) 2064 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 1668 350 (open_window\(\);) 350 SB
378 1713 775 (for \(i = 0; i < 1000000; i++\) {) 775 SB
378 1758 50 (  ) 50 SB
428 1758 550 (   clear_the_window\(\);) 550 SB
378 1803 50 (  ) 50 SB
428 1803 425 (   draw_frame\(i\);) 425 SB
378 1848 50 (  ) 50 SB
428 1848 1075 (   wait_until_a_24th_of_a_second_is_over\(\);) 1075 SB
378 1893 25 (}) 25 SB
/fm 256 def
5 5 238 2023 B
1 F
n
/fm 256 def
5 5 238 2023 B
1 F
n
/fm 256 def
336 5 244 2023 B
1 F
n
/fm 256 def
5 5 581 2023 B
1 F
n
/fm 256 def
1576 5 587 2023 B
1 F
n
/fm 256 def
5 5 2164 2023 B
1 F
n
/fm 256 def
5 5 2164 2023 B
1 F
n
/fm 256 def
5 84 238 2029 B
1 F
n
/fm 256 def
5 5 238 2114 B
1 F
n
/fm 256 def
5 5 238 2114 B
1 F
n
/fm 256 def
336 5 244 2114 B
1 F
n
/fm 256 def
2 84 581 2029 B
1 F
n
/fm 256 def
5 5 581 2114 B
1 F
n
/fm 256 def
1576 5 587 2114 B
1 F
n
/fm 256 def
5 84 2164 2029 B
1 F
n
/fm 256 def
5 5 2164 2114 B
1 F
n
/fm 256 def
5 5 2164 2114 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 244 2023 CB
401 2044 21 (?) 21 SB
gr
gs 1580 91 584 2023 CB
605 2044 808 (What is the problem with this algorithm?) 808 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (19) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 360 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 365 2575 (A modified version of the preceding program that does display smoothly animated graphics might look like this:) 2575 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 517 900 (open_window_in_double_buffer_mode\(\);) 900 SB
378 562 775 (for \(i = 0; i < 1000000; i++\) {) 775 SB
378 607 50 (  ) 50 SB
428 607 550 (   clear_the_window\(\);) 550 SB
378 652 50 (  ) 50 SB
428 652 425 (   draw_frame\(i\);) 425 SB
378 697 50 (  ) 50 SB
428 697 550 (   swap_the_buffers\(\);) 550 SB
378 742 25 (}) 25 SB
0 0 0 fC
/fm 256 def
5 5 238 1042 B
1 F
n
/fm 256 def
5 5 238 1042 B
1 F
n
/fm 256 def
336 5 244 1042 B
1 F
n
/fm 256 def
5 5 581 1042 B
1 F
n
/fm 256 def
1576 5 587 1042 B
1 F
n
/fm 256 def
5 5 2164 1042 B
1 F
n
/fm 256 def
5 5 2164 1042 B
1 F
n
/fm 256 def
5 84 238 1048 B
1 F
n
/fm 256 def
5 5 238 1133 B
1 F
n
/fm 256 def
5 5 238 1133 B
1 F
n
/fm 256 def
336 5 244 1133 B
1 F
n
/fm 256 def
2 84 581 1048 B
1 F
n
/fm 256 def
5 5 581 1133 B
1 F
n
/fm 256 def
1576 5 587 1133 B
1 F
n
/fm 256 def
5 84 2164 1048 B
1 F
n
/fm 256 def
5 5 2164 1133 B
1 F
n
/fm 256 def
5 5 2164 1133 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 244 1042 CB
401 1063 21 (?) 21 SB
gr
gs 1580 91 584 1042 CB
605 1063 1130 (How does this remove the problem of the last algorithm?) 1130 SB
gr
32 0 0 58 58 0 0 0 58 /Symbol font
324 1274 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1279 2366 (OpenGL doesn't have a swap_the_buffers\(\) command because the feature might not be available on all) 2366 SB
384 1348 2395 (hardware and, in any case, it's highly dependent on the window system. However, GLX provides such a) 2395 SB
384 1417 1460 (command, for use on machines that use the X Window System.) 1460 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (20) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 1091 (Example 1-3: A Double-Buffered Program: double.c) 1091 SB
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
378 480 360 (#include <GL/gl.h>) 360 SB
378 516 380 (#include <GL/glu.h>) 380 SB
378 552 380 (#include <GL/glx.h>) 380 SB
378 588 320 (#include "aux.h") 320 SB
378 624 520 (static GLfloat spin = 0.0;) 520 SB
378 660 360 (void display\(void\)) 360 SB
378 696 20 ({) 20 SB
378 732 40 (  ) 40 SB
418 732 660 (    glClear\(GL_COLOR_BUFFER_BIT\);) 660 SB
378 768 40 (  ) 40 SB
418 768 380 (    glPushMatrix\(\);) 380 SB
378 804 40 (  ) 40 SB
418 804 700 (    glRotatef\(spin, 0.0, 0.0, 1.0\);) 700 SB
378 840 40 (  ) 40 SB
418 840 760 (    glRectf\(-25.0, -25.0, 25.0, 25.0\);) 760 SB
378 876 40 (  ) 40 SB
418 876 360 (    glPopMatrix\(\);) 360 SB
378 912 40 (  ) 40 SB
418 912 280 (    glFlush\(\);) 280 SB
378 948 40 (  ) 40 SB
418 948 960 (    glXSwapBuffers\(auxXDisplay\(\), auxXWindow\(\)\);) 960 SB
378 984 20 (}) 20 SB
378 1020 440 (void spinDisplay\(void\)) 440 SB
378 1056 20 ({) 20 SB
378 1092 40 (  ) 40 SB
418 1092 440 (    spin = spin + 2.0;) 440 SB
378 1128 40 (  ) 40 SB
418 1128 420 (    if \(spin > 360.0\)) 420 SB
378 1164 40 (  ) 40 SB
418 1164 560 (        spin = spin - 360.0;) 560 SB
378 1200 40 (  ) 40 SB
418 1200 280 (    display\(\);) 280 SB
378 1236 20 (}) 20 SB
378 1308 780 (void startIdleFunc\(AUX_EVENTREC *event\)) 780 SB
378 1344 20 ({) 20 SB
378 1380 40 (  ) 40 SB
418 1380 580 (    auxIdleFunc\(spinDisplay\);) 580 SB
378 1416 20 (}) 20 SB
378 1452 760 (void stopIdleFunc\(AUX_EVENTREC *event\)) 760 SB
378 1488 20 ({) 20 SB
378 1524 40 (  ) 40 SB
418 1524 380 (    auxIdleFunc\(0\);) 380 SB
378 1560 20 (}) 20 SB
378 1596 340 (void myinit\(void\)) 340 SB
378 1632 20 ({) 20 SB
378 1668 40 (  ) 40 SB
418 1668 740 (    glClearColor\(0.0, 0.0, 0.0, 1.0\);) 740 SB
378 1704 40 (  ) 40 SB
418 1704 580 (    glColor3f\(1.0, 1.0, 1.0\);) 580 SB
378 1740 40 (  ) 40 SB
418 1740 520 (    glShadeModel\(GL_FLAT\);) 520 SB
378 1776 20 (}) 20 SB
378 1848 720 (void myReshape\(GLsizei w, GLsizei h\)) 720 SB
378 1884 20 ({) 20 SB
378 1920 20 ( ) 20 SB
398 1920 40 (  ) 40 SB
438 1920 540 (    glViewport\(0, 0, w, h\);) 540 SB
378 1956 20 ( ) 20 SB
398 1956 40 (  ) 40 SB
438 1956 640 (    glMatrixMode\(GL_PROJECTION\);) 640 SB
378 1992 20 ( ) 20 SB
398 1992 40 (  ) 40 SB
438 1992 420 (    glLoadIdentity\(\);) 420 SB
378 2028 20 ( ) 20 SB
398 2028 40 (  ) 40 SB
438 2028 300 (    if \(w <= h\)) 300 SB
378 2064 40 (  ) 40 SB
418 2064 1160 (        glOrtho \(-50.0, 50.0, -50.0*\(GLfloat\)h/\(GLfloat\)w,) 1160 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%Page: 21 21
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (21) 42 SB
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
378 225 40 (  ) 40 SB
418 225 1020 (            50.0*\(GLfloat\)h/\(GLfloat\)w, -1.0, 1.0\);) 1020 SB
378 261 40 (  ) 40 SB
418 261 160 (    else) 160 SB
378 297 40 (  ) 40 SB
418 297 840 (        glOrtho \(-50.0*\(GLfloat\)w/\(GLfloat) 840 SB
1258 297 60 (\)h,) 60 SB
378 333 40 (  ) 40 SB
418 333 1280 (            50.0*\(GLfloat\)w/\(GLfloat\)h, -50.0, 50.0, -1.0, 1.0\);) 1280 SB
378 369 40 (  ) 40 SB
418 369 620 (    glMatrixMode\(GL_MODELVIEW\);) 620 SB
378 405 40 (  ) 40 SB
418 405 440 (    glLoadIdentity \(\);) 440 SB
378 441 20 (}) 20 SB
378 477 620 (int main\(int argc, char** argv\)) 620 SB
378 513 20 ({) 20 SB
378 549 40 (  ) 40 SB
418 549 920 (    auxInitDisplayMode\(AUX_DOUBLE | AUX_RGBA\);) 920 SB
378 585 40 (  ) 40 SB
418 585 720 (    auxInitPosition\(0, 0, 500, 500\);) 720 SB
378 621 40 (  ) 40 SB
418 621 540 (    auxInitWindow\(argv[0]\);) 540 SB
378 657 40 (  ) 40 SB
418 657 260 (    myinit\(\);) 260 SB
378 693 40 (  ) 40 SB
418 693 600 (    auxReshapeFunc\(myReshape\);) 600 SB
378 729 40 (  ) 40 SB
418 729 580 (    auxIdleFunc\(spinDisplay\);) 580 SB
378 765 40 (  ) 40 SB
418 765 1260 (    auxMouseFunc\(AUX_LEFTBUTTON, AUX_MOUSEDOWN, startIdleFunc\);) 1260 SB
378 801 40 (  ) 40 SB
418 801 1280 (    auxMouseFunc\(AUX_MIDDLEBUTTON, AUX_MOUSEDOWN, stopIdleFunc\);) 1280 SB
378 837 40 (  ) 40 SB
418 837 180 (    auxMa) 180 SB
598 837 320 (inLoop\(display\);) 320 SB
378 873 20 (}) 20 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%Page: 22 22
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (22) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 1006 (Figure 1-2: A Double-Buffered Program Results) 1006 SB
/bytestr 518 string def
gs 1619 594 264 408 CB
save 264 408 translate 1619 594 scale
518 190 8
[518 0 0 -190 0 190]
{unpack} bind
image
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
f0fdff00f8fdff00fcfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f5fdfe00c3fdff00f9fdff00fbfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f4fdff00f9fdfe00cafdff00f9fdff00fbfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f9fdf700fcfdfe00c8fdff00f8fdff00fbfdfd00fffdff0000fdff00fdfdff00fdfdff00fcfdfc00f6fdfc00fafdfe00e4fd
f0fdff00f8fdff00fdfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00f8fdff00fefdff00c5fdff00f9fdff00fcfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00f5fdff00fbfdff00fefdff00ccfdff00f9fdff00fcfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00fafdff00f6fdff00fefdff00cafdff00f8fdff00fcfdff00fefdfe00fffdff00fdfdff00fdfdff00fdfdff00fefdff00f8fdff00fefdff00fdfdff00fefdff00e6fd
f0fdff00f8fdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00f9fdff00fefdff00c5fdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00f6fdff00fbfdff00fefdff00ccfdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00fafdff00f7fdff00fefdff00cafdff00f8fdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fdfd0000fcfdff00fafdff00fcfdff00fefdff00fefdff00e6fd
f0fdff00f8fdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00f2fd0000fcfd0000c5fdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00effdff00fbfd0000fcfd0000ccfdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00f3fdfe00f8fd0000fcfd0000cafdff00f8fdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fefdff00f3fdff00fcfdff00fefd0000fcfd0000e6fd
f0fdff00f8fdff00fcfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00f3fdff00fcfdff00c6fdff00f9fdff00fbfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00effdff00fcfdff00fcfdff00cdfdff00f9fdff00fbfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00f1fdff00fafdff00fcfdff00cbfdff00f8fdff00fbfdfe00fffdff00fffdff00fdfdff00fdfdff00fefdff00f3fdff00fcfdff00fffdff00fcfdff00e7fd
f0fdff00f8fdff00fbfdfb00fefdff00fdfdff00fdfdff00fffdf800fafdff00fcfdff00c6fdff00f9fdff00fafdfb00fefdff00fdfdff00fdfdff00fffdf800f6fdff00fcfdff00fcfdff00cdfdff00f9fdff00fafdfb00fefdff00fdfdff00fdfdff00fffdf800f7fdfe00fcfdff00fcfdff00cbfdff00f8fdff00fafdfb00fffdff00fdfdff00fdfdff00fefdf800f3fdff00fffdff00fcfdff00e7fd
f0fdff00f8fdff00f7fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00fafdff00fcfdff00c6fdff00f9fdff00f6fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00f6fdff00fcfdff00fcfdff00cdfdff00f9fdff00f6fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00f5fdff00fdfdff00fcfdff00cbfdff00f8fdff00f6fdff00fffdff00fdfdff00fdfdff00fefdff00fcfdff00f4fdff00fefdff00fcfdff00e7fd
f0fdf800fffdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f9fdff00fcfdff00c6fdf80000fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f5fdff00fcfdff00fcfdff00cdfdf80000fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f3fdff00fefdff00fcfdff00cbfdf800fffdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fdfd0000fcfd0000f6fdfd00fdfdff00fcfdff00e7fd
f0fdff00f8fdfe00fdfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f9fdff00fcfdff00c6fdff00f9fdfe00fcfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f5fdff00fcfdff00fcfdff00cdfdff00f9fdfe00fcfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f2fdff00fffdff00fcfdff00cbfdff00f8fdfe00fcfd0000fdfdff00fffdfe00fefdfe00fefdff00fdfdff00fefdff00f3fdff00fefdff00fcfdff00e7fd
f0fdff00f8fdff0000fdff00fefdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f8fdff00fcfdff00c6fdff00f9fdff0000fdff00fdfdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f4fdff00fcfdff00fcfdff00cdfdff00f9fdff0000fdff00fdfdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f8fdff00fcfdff00fffdff00fcfdff00cbfdff00f8fdff0000fdff00fdfdfd00fdfdff0000fdfd00fffdfd00fafdfd00f1fdff00fffdff00fcfdff00e7fd
f0fdff00c6fd0000fcfd0000c5fdff00c6fdfc00fbfd0000fcfd0000ccfdff00c7fdff00fcfdff00fefd0000fcfd0000cafdff00c6fdff00fcfdff00fefd0000fcfd0000e6fd
f0fdff00c6fdff00fefdff00c5fdff00c4fdfe00fbfdff00fefdff00ccfdff00c6fd0000fcfdff00fefdff00fefdff00cafdff00c6fdff00fcfdff00fefdff00fefdff00e6fd
f0fdff00c6fdff00fefdff00c5fdff00c3fdff00fbfdff00fefdff00ccfdff00c6fdff00fefdff00fdfdff00fefdff00cafdff00c5fdff00fefdff00fdfdff00fefdff00e6fd
f0fdf700ccfdfe00c3fdf700cbfdff00f9fdfe00cafdf700cdfdfc00fafdfe00c8fdf700ccfdfc00fafdfe00e4fd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fdb0fd0000d0fd
80fd80fd80fdb2fdff0001fd00d1fd
80fd80fd80fdb4fdff00fefd0000d1fd
80fd80fd80fdb5fd0000fbfd0000d2fd
80fd80fdabfdff008efdff00fafd0000d2fd
80fd80fdaefdfe0001fd0090fdff00f7fd0000d3fd
80fd80fdb1fdfe00fcfd000092fd0000f5fd0000d3fd
80fd80fdb3fdff00f9fd000094fdff00f3fd0000d4fd
80fd80fdb6fdfe00f6fd000097fdff00f0fd0000d5fd
80fda5fd000095fdfe00f3fd000099fdff00eefd0000d5fd
80fdabfdfa0098fdfe00f0fd00009afd0000ebfd0000d6fd
80fdb0fdfc00fafd00009bfdff00ecfd00009dfdff00eafd0000d6fd
80fdb6fdfb00f5fd00009efdfe00eafd00009ffdff00e7fd0000d7fd
80fdbcfdfb00effd0000a1fdfe00e7fd0000a1fdff00e4fd0000d8fd
80fdc2fdfb00e9fd0000a4fdfe00e3fd0000a3fd0000e2fd0000d8fd
80fdc7fdfc00e3fd0000a6fdff00e0fd0000a5fdff00e0fd0000d9fd
fafda700adfdfb00defd0000a9fdfe00defd0000a7fdff00defd0000d9fd
fafd0000a9fd0000b3fdfb00d7fd0000adfdfe00dafd0000a9fd0000dbfd0000dafd
fafd0000a9fd0000b8fdfc00d1fd0000b0fdfe00d7fd0000abfdff00dafd0000dafd
fafd0000a9fd0000befdfb00ccfd0000b2fdff00d3fd0000aefdff00d7fd0000dbfd
fafd0000a9fd0000c4fdfb00c6fd0000b5fdfe00d1fd0000b0fdff00d4fd0000dcfd
fafd0000a9fd0000c9fdfc00c0fd0000b8fdfe00cefd0000b1fd0000d2fd0000dcfd
fafd0000a9fd0000cffdfb00bbfd0000bbfdfe00cafd0000b4fdff00d0fd0000ddfd
fafd0000a9fd0000d5fdfb00b4fd0000befdff00c7fd0000b6fdff00cefd0000ddfd
fafd0000a9fd0000dafdfc00aefd0000c1fdfe00c5fd0000b8fdff00cbfd0000defd
fafd0000a9fd0000dcfdff00a9fd0000c4fdfe00c1fd0000bafd0000c9fd0000defd
fafd0000a9fd0000dcfd0000a8fd0000c7fdfe00befd0000bcfdff00c7fd0000dffd
fafd0000a9fd0000dcfd0000a8fd0000c9fdff00bbfd0000befdff00c4fd0000e0fd
fafd0000a9fd0000dcfd0000a7fd0000cdfdfe00b8fd0000c1fdff00c2fd0000e0fd
fafd0000a9fd0000dcfd0000a7fd0000d0fdfe00b5fd0000c2fd0000bffd0000e1fd
fafd0000a9fd0000dbfd0000a8fd0000d3fdfe00b1fd0000c5fdff00befd0000e1fd
fafd0000a9fd0000dbfd0000a8fd0000d5fdff00aefd0000c7fdff00bbfd0000e2fd
fafd0000a9fd0000dbfd0000a8fd0000d8fdfe00acfd0000c8fd0000b8fd0000e3fd
fafd0000a9fd0000dbfd0000a8fd0000dbfdfe00a8fd0000cbfdff00b7fd0000e3fd
fafd0000a9fd0000dbfd0000a7fd0000defdff00a5fd0000cdfdff00b4fd0000e4fd
fafd0000a9fd0000dbfd0000a7fd0000defd0000a4fd0000cffdff00b2fd0000e4fd
fafd0000a9fd0000dafd0000a8fd0000defd0000a3fd0000d1fd0000affd0000e5fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a4fd0000d3fdff00aefd0000e5fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a4fd0000d5fdff00abfd0000e6fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a3fd0000d8fdff00a8fd0000e7fd
fafd0000a9fd0000dafd0000a7fd0000ddfd0000a4fd0000d9fd0000a6fd0000e7fd
fafd0000a9fd0000d9fd0000a8fd0000ddfd0000a3fd0000dcfdff00a4fd0000e8fd
fafd0000a9fd0000d9fd0000a8fd0000ddfd0000a3fd0000defdff00a2fd0000e8fd
fafd0000a9fd0000d9fd0000a8fd0000dcfd0000a4fd0000e0fdff009ffd0000e9fd
fafd0000a9fd0000d9fd0000a8fd0000dcfd0000a3fd0000e2fd00009dfd0000e9fd
fafd0000a9fd0000d9fd0000a7fd0000ddfd0000a3fd0000e3fd00009bfd0000eafd
fafd0000a9fd0000d9fd0000a7fd0000dcfd0000a4fd0000e2fd00009bfd0000ebfd
fafd0000a9fd0000d8fd0000a8fd0000dcfd0000a3fd0000e2fd00009cfd0000ebfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a4fd0000e2fd00009bfd0000ecfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a4fd0000e1fd00009cfd0000ecfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a3fd0000e2fd00009bfd0000edfd
fafd0000a9fd0000d8fd0000a7fd0000dbfd0000a4fd0000e1fd00009cfd0000edfd
fafd0000a9fd0000d8fd0000a7fd0000dbfd0000a3fd0000e2fd00009bfd0000eefd
fafd0000a9fd0000d7fd0000a8fd0000dbfd0000a3fd0000e1fd00009bfd0000effd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a4fd0000e0fd00009cfd0000effd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a3fd0000e1fd00009bfd0000f0fd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a3fd0000e0fd00009cfd0000f0fd
fafd0000a9fd0000d7fd0000a7fd0000dafd0000a4fd0000e0fd00009bfd0000f1fd
fafd0000a9fd0000d6fd0000a8fd0000dafd0000a3fd0000e0fd00009bfd0000f2fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a4fd0000e0fd00009bfd0000f2fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a4fd0000dffd00009bfd0000f3fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a3fd0000dffd00009cfd0000f3fd
fafd0000a9fd0000d6fd0000a7fd0000d9fd0000a4fd0000dffd00009bfd0000f4fd
fafd0000a9fd0000d6fd0000a7fd0000d9fd0000a3fd0000dffd00009cfd0000f4fd
fafd0000a9fd0000d5fd0000a8fd0000d9fd0000a3fd0000dffd00009bfd0000f5fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a4fd0000defd00009bfd0000f6fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a3fd0000dffd00009bfd0000f6fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a3fd0000defd00009bfd0000f7fd
fafd0000a9fd0000d5fd0000a7fd0000d8fd0000a4fd0000ddfd00009cfd0000f7fd
fafd0000a9fd0000d5fd0000a7fd0000d8fd0000a3fd0000defd00009bfd0000f8fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a4fd0000ddfd00009cfd0000f8fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a4fd0000ddfd00009bfd0000f9fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a3fd0000ddfd00009bfd0000fafd
fafd0000a9fd0000d4fd0000a8fd0000d6fd0000a4fd0000dcfd00009cfd0000fafd
fafd0000a9fd0000d4fd0000a7fd0000d7fd0000a3fd0000ddfd00009bfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d7fd0000a3fd0000dcfd00009cfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a4fd0000dcfd00009bfd0000fcfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a3fd0000dcfd00009cfdff00fdfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a3fd0000dcfd00009dfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d5fd0000a4fd0000dbfd0000a0fdff00fafd
fafd0000a9fd0000d3fd0000a7fd0000d6fd0000a3fd0000dbfd0000a3fdff00f8fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a4fd0000dbfd0000a5fdff00f6fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a3fd0000dbfd0000a7fd0000f4fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a3fd0000dbfd0000a9fdff00f3fd
fafd0000a9fd0000d2fd0000a8fd0000d4fd0000a4fd0000dafd0000acfdff00f1fd
fafd0000a9fd0000d2fd0000a7fd0000d5fd0000a3fd0000dbfd0000aefdff00effd
fafd0000a9fd0000d2fd0000a7fd0000d5fd0000a3fd0000dafd0000b0fd0000edfd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a4fd0000d9fd0000b3fdff00ecfd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a6fdfe00d9fd0000b5fdff00eafd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a9fdfe00d5fd0000b7fd0000e8fd
fafd0000a9fd0000d1fd0000a8fd0000d3fd0000adfdfe00d2fd0000b9fdff00e7fd
fafd0000a9fd0000d1fd0000a7fd0000d4fd0000affdff00cefd0000bcfdff00e5fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b3fdfe00cbfd0000bffdff00e3fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b6fdfe00c8fd0000c0fd0000e1fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b9fdfe00c4fd0000c3fdff00e0fd
fafd0000a9fd0000d0fd0000a8fd0000d2fd0000bcfdff00c1fd0000c5fdff00defd
fafd0000a9fd0000d0fd0000a8fd0000d2fd0000bffdfe00befd0000c8fdff00dcfd
fafd0000a9fd0000d0fd0000aafdfd00d3fd0000c2fdfe00bbfd0000c9fd0000dafd
fafd0000a9fd0000cffd0000b1fdfb00cefd0000c6fdfe00b7fd0000ccfdff00d9fd
fafd0000a9fd0000cffd0000b7fdfb00c8fd0000c8fdff00b3fd0000cffdff00d7fd
fafd0000a9fd0000cffd0000bcfdfc00c2fd0000cbfdfe00b1fd0000d0fd0000d5fd
fafd0000a9fd0000cffd0000c2fdfb00bcfd0000cffdfe00adfd0000d3fdff00d4fd
fafd0000a9fd0000cffd0000c8fdfb00b6fd0000d2fdfe00aafd0000d5fdff00d2fd
fafd0000a9fd0000cffd0000cdfdfc00affd0000d5fdff00a6fd0000d8fdff00d0fd
fafd0000a9fd0000cefd0000d4fdfb00aafd0000d8fdfe00a4fd0000d9fd0000cefd
fafda700cefd0000dafdfb00a4fd0000dbfdfe00a0fd0000dcfdff00cdfd
80fdeefd0000dffdfc009dfd0000dffdfe009cfd0000dffdff00cbfd
80fdeefd0000e5fdfb0098fd0000e1fdff0099fd0000e1fdff00c9fd
80fdeefd0000ebfdfb0092fd0000e4fdfe0096fd0000e3fd0000c7fd
80fdedfd0000f1fdfc008bfd0000e8fdfe0093fd0000e5fdff00c6fd
80fdedfd0000f7fdfb0086fd0000ebfdfe008ffd0000e8fdff00c4fd
80fdedfd0000fdfdfb0080fd0000edfdff008cfd0000eafdff00c2fd
80fdedfdfc0080fdfafd0000f1fdfe0089fd0000ecfd0000c0fd
80fd80fde1fd0000f4fdfe0085fd0000effdff00bffd
80fd80fde0fd0000f8fdfe0082fd0000f1fdff00bdfd
80fd80fde0fd0000fafdff0080fdfffd0000f3fd0000bbfd
80fd80fde0fd0000fdfdfe0080fdfdfd0000f5fdff00bafd
80fd80fddffdfd0080fdf9fd0000f8fdff00b8fd
80fd80fddffd000080fdf5fd0000fbfdff00b6fd
80fd80fd80fdd2fd0000fcfd0000b4fd
80fd80fd80fdd1fd0000fffdff00b3fd
80fd80fd80fdd1fdfe00b1fd
80fd80fd80fdd0fd0000b0fd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80f680f680f680f6fff6
restore
gr
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 1217 CB
1460 7 265 1233 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 1311 895 (Drawing Geometric Objects) 895 SB
/fm 256 def
264 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
727 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
769 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
811 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
853 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
895 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
937 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
979 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1021 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1063 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1105 1388 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1147 1388 M -12 0 0 -7 12 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1556 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1561 2484 (At the highest level of abstraction, there are three basic drawing operations: clearing the window, drawing a) 2484 SB
384 1630 1057 (geometric object, and drawing a raster object.) 1057 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1747 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1752 2417 (All the curved lines and surfaces you've seen are approximated by large numbers of little flat polygons or) 2417 SB
384 1821 293 (straight lines) 293 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (23) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 2448 (OpenGL\222s default style of drawing graphics is immediate-mode. This specifies that OpenGL will draw the) 2448 SB
384 299 2579 (object when you issue the command. The other mode is display list drawing which store the drawing commands) 2579 SB
384 368 1791 (for later usage. Display lists are more efficient and we will look at those later.) 1791 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 572 527 (Clearing the Window) 527 SB
0 0 0 fC
/fm 256 def
264 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 632 M -13 0 0 -6 13 0 0 6 4 PP
1 F
n
/fm 256 def
553 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
589 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
625 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
661 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
697 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
733 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
769 632 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 702 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 707 2552 (Drawing on a computer screen is different from drawing on paper in that the paper starts out white, and all you) 2552 SB
384 776 2465 (have to do is draw the picture. On a computer, the memory holding the picture is usually filled with the last) 2465 SB
384 845 2521 (picture you drew, so you typically need to clear it to some background color before you start to draw the new) 2521 SB
384 914 144 (scene.) 144 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1031 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1036 955 (This is how to clear the window to black:) 955 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 1148 825 (glClearColor\(0.0, 0.0, 0.0, 0.0\);) 825 SB
378 1193 725 (glClear\(GL_COLOR_BUFFER_BIT\);) 725 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1373 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1378 2465 (The first line sets the clearing color to black, and the next command clears the entire window to the current) 2465 SB
384 1447 905 (clearing color. The single parameter to ) 905 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1289 1448 215 (glClear\(\)) 215 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1504 1447 1337 ( indicates which buffers are to be cleared. In this case, the) 1337 SB
384 1516 1976 (program clears only the color buffer, where the image displayed on the screen is kept.) 1976 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1633 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1638 2516 (Typically, you set the clearing color once, early in your application, and then you clear the buffers as often as) 2516 SB
384 1707 2460 (necessary. OpenGL keeps track of the current clearing color as a state variable rather than requiring you to) 2460 SB
384 1776 891 (specify it each time a buffer is cleared.) 891 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (24) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 362 456 (Specifying a Color) 456 SB
0 0 0 fC
/fm 256 def
264 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 492 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 497 2478 (With OpenGL, the description of the shape of an object being drawn is independent of the description of its) 2478 SB
384 566 2391 (color. Whenever a particular geometric object is drawn, it's drawn using the currently specified coloring) 2391 SB
384 635 187 (scheme.) 187 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 752 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 757 2557 (Until the color or coloring scheme is changed, all objects are drawn in that color or using that coloring scheme.) 2557 SB
384 826 2545 (This method helps OpenGL achieve higher drawing performance than would result if it didn't keep track of the) 2545 SB
384 895 310 (current color.) 310 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1012 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1017 676 (For example, the pseudocode) 676 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 1129 575 (set_current_color\(red\);) 575 SB
378 1174 375 (draw_object\(A\);) 375 SB
378 1219 375 (draw_object\(B\);) 375 SB
378 1264 625 (set_current_color\(green\);) 625 SB
378 1309 600 (set_current_color\(blue\);) 600 SB
378 1354 375 (draw_object\(C\);) 375 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1449 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1454 2534 (draws objects A and B in red, and object C in blue. The command on the fourth line that sets the current color) 2534 SB
384 1523 432 (to green is wasted.) 432 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1640 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1645 764 (To set a color, use the command ) 764 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1148 1646 278 (glColor3f\(\).) 278 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1426 1645 1508 ( It takes three parameters, all of which are floating-point numbers) 1508 SB
384 1714 2309 (between 0.0 and 1.0. The parameters are, in order, the red, green, and blue components of the color.) 2309 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (25) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 240 867 (Table 1-2: Color mappings to RGB values) 867 SB
128 128 128 fC
/fm 256 def
997 5 240 310 B
1 F
n
/fm 256 def
5 5 1238 310 B
1 F
n
/fm 256 def
687 5 1244 310 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 997 91 241 310 CB
264 331 204 (Command) 204 SB
gr
gs 694 91 1238 310 CB
1262 331 114 (Color) 114 SB
gr
128 128 128 fC
/fm 256 def
997 2 240 401 B
1 F
n
/fm 256 def
2 2 1238 401 B
1 F
n
/fm 256 def
690 2 1241 401 B
1 F
n
0 0 0 fC
gs 997 88 241 401 CB
264 419 479 (glColor3f\(0.0, 0.0, 0.0\);) 479 SB
gr
gs 694 88 1238 401 CB
1262 419 105 (black) 105 SB
gr
gs 997 85 241 489 CB
264 504 479 (glColor3f\(1.0, 0.0, 0.0\);) 479 SB
gr
gs 694 85 1238 489 CB
1262 504 64 (red) 64 SB
gr
gs 997 85 241 574 CB
264 589 479 (glColor3f\(0.0, 1.0, 0.0\);) 479 SB
gr
gs 694 85 1238 574 CB
1262 589 110 (green) 110 SB
gr
gs 997 85 241 659 CB
264 674 479 (glColor3f\(1.0, 1.0, 0.0\);) 479 SB
gr
gs 694 85 1238 659 CB
1262 674 131 (yellow) 131 SB
gr
gs 997 85 241 744 CB
264 759 479 (glColor3f\(0.0, 0.0, 1.0\);) 479 SB
gr
gs 694 85 1238 744 CB
1262 759 83 (blue) 83 SB
gr
gs 997 85 241 829 CB
264 844 479 (glColor3f\(1.0, 0.0, 1.0\);) 479 SB
gr
gs 694 85 1238 829 CB
1262 844 167 (magenta) 167 SB
gr
gs 997 85 241 914 CB
264 929 479 (glColor3f\(0.0, 1.0, 1.0\);) 479 SB
gr
gs 694 85 1238 914 CB
1262 929 91 (cyan) 91 SB
gr
128 128 128 fC
/fm 256 def
997 5 240 1084 B
1 F
n
/fm 256 def
5 5 1238 1084 B
1 F
n
/fm 256 def
687 5 1244 1084 B
1 F
n
0 0 0 fC
gs 997 85 241 999 CB
264 1014 479 (glColor3f\(1.0, 1.0, 1.0\);) 479 SB
gr
gs 694 85 1238 999 CB
1262 1014 109 (white) 109 SB
gr
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1227 785 (Forcing Completion of Drawing) 785 SB
/fm 256 def
264 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
661 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
697 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
733 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
769 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
805 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
841 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
877 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
913 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
949 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
985 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1021 1287 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1362 2479 (Most modern graphics systems can be thought of as an assembly line, sometimes called a graphics pipeline.) 2479 SB
384 1431 2489 (The main central processing unit \(CPU\) issues a drawing command, perhaps other hardware does geometric) 2489 SB
384 1500 2547 (transformations, clipping occurs, then shading or texturing is performed, and finally, the values are written into) 2547 SB
384 1569 553 (the bitplanes for display) 553 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1686 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1691 2431 (The client server model of OpenGL uses packets of drawing commands as the method of communication.) 2431 SB
384 1760 2497 (These packets hold a number of drawing commands and the client will wait for the packet to be filled before) 2497 SB
384 1829 2531 (sending it to the server. This can result in a few drawing commands getting \223stuck\224 in the transmission packet) 2531 SB
384 1898 298 (on the client.) 298 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 26 26
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (26) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 1125 (For this reason, OpenGL provides the command ) 1125 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1509 231 228 (glFlush\(\),) 228 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1737 230 1173 ( which forces the client to send the network packet) 1173 SB
384 299 2518 (even though it might not be full. Where there is no network and all commands are truly executed immediately) 2518 SB
384 368 343 (on the server,  ) 343 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
727 369 213 (glFlush\(\)) 213 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
940 368 1892 ( might have no effect. However, if you're writing a program that you want to work) 1892 SB
384 437 1369 (properly both with and without a network, include a call to ) 1369 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1753 438 213 (glFlush\(\)) 213 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1966 437 792 ( at the end of each frame or scene.) 792 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 536 CB
1460 7 265 552 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 630 908 (Drawing Graphic Primitives) 908 SB
/fm 256 def
264 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
852 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
894 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
936 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
978 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1020 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1062 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1104 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1146 707 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
264 840 133 (Points) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 912 2559 (A point is represented by a set of floating-point numbers called a vertex. All internal calculations are done as if vertices are three-) 2559 SB
378 971 2583 (dimensional. Vertices specified by the user as two-dimensional \(that is, with only x and y coordinates\) are assigned a z co-ordinate) 2583 SB
378 1030 506 (equal to zero by OpenGL) 506 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
264 1102 116 (Lines) 116 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 1174 2498 (In OpenGL, line means line segment, not the mathematician's version that extends to infinity in both directions. There are easy) 2498 SB
378 1233 2559 (ways to specify a connected series of line segments, or even a closed, connected series of segments. In all cases, though, the lines) 2559 SB
378 1292 1730 (comprising the connected series are specified in terms of the vertices at their endpoints.) 1730 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
264 1364 190 (Polygons) 190 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 1436 2522 (Polygons are the areas enclosed by single closed loops of line segments, where the line segments are specified by the vertices at) 2522 SB
378 1495 2523 (their endpoints. Polygons are typically drawn with the pixels in the interior filled in, but you can also draw them as outlines or a) 2523 SB
378 1554 244 (set of points) 244 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
264 1626 229 (Rectangles) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 1698 2230 (Since rectangles are so common in graphics applications, OpenGL provides a filled-rectangle drawing primitive, ) 2230 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2608 1698 199 (glRect*\(\).) 199 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2807 1698 100 ( You) 100 SB
378 1757 1893 (can draw a rectangle as a but your particular implementation of OpenGL might have optimized ) 1893 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2271 1757 186 (glRect*\(\)) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2457 1757 297 ( for rectangles.) 297 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 27 27
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (27) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 275 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 280 2492 (How to draw an OpenGL Primitive, the following code specifies the vertices for a polygon show in figure 3:) 2492 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 392 500 (glBegin\(GL_POLYGON\);) 500 SB
378 437 50 (  ) 50 SB
428 437 600 (   glVertex2f\(0.0, 0.0\);) 600 SB
378 482 50 (  ) 50 SB
428 482 600 (   glVertex2f\(0.0, 3.0\);) 600 SB
378 527 50 (  ) 50 SB
428 527 600 (   glVertex2f\(3.0, 3.0\);) 600 SB
378 572 50 (  ) 50 SB
428 572 600 (   glVertex2f\(4.0, 1.5\);) 600 SB
378 617 50 (  ) 50 SB
428 617 600 (   glVertex2f\(3.0, 0.0\);) 600 SB
378 662 200 (glEnd\(\);) 200 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 807 985 (Figure 1-3: Drawing a Polygon or Set of Points) 985 SB
/bytestr 246 string def
gs 769 331 264 890 CB
save 264 890 translate 769 331 scale
246 106 8
[246 0 0 -106 0 106]
{unpack} bind
image
80f68cf6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f6ecfdf90080fdf6fdf900bffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f6fafdfe00fffd0000fffdfb00f8fd0000f5fdfe00fdfdfb00fdfd0000f9fdfe00fffd0000fcfdfe00fcfd0000fcfdff00c7fdfe00fffd0000fffdfb00f8fd0000f5fdfe00fbfd0200fd00fcfdff00fbfd0000fbfdfe00effdfff6
00f6fcfdff00fefdfe00fffd0000f3fd0000f7fdff00fefdff00fffd0000f8fd0000fbfdff00fefdfe00fefdff00fefdff00fefd0000fcfdff00c9fdff00fefdfe00fffd0000f3fd0000f7fdff00fefdff00fdfd0200fd00fcfdff00fbfd0000fdfdff00fefdff00f1fdfff6
00f6fcfd0000fbfd0000fffd0000f3fd0000f7fd0000fcfd0000fffd0000f8fd0000fbfd0000fbfd0000fefd0000fcfd0000fefd0000fdfd0200fd00c9fd0000fbfd0000fffd0000f3fd0000f7fd0000fcfd0000fdfd0200fd00fdfd0200fd00fbfd0000fdfd0000fcfd0000f1fdfff6
00f6fdfd0000fafd0000fffd0000f3fd0000f8fd0000fafd0200fd00f8fd0000fcfd0000fafd0000fffd0000fafd0000fffd0000fdfd0200fd00cafd0000fafd0000fffd0000f3fd0000f8fd0000fafd0000fefd0200fd00fdfd0200fd00fbfd0000f7fd0000f1fdfff6
00f6fdfd0000fafd0000fffd0000f3fd0000f8fd0000fafd0200fd00f9fdfe00fdfd0000fafd0000fffd0000fafd0000fffd0000fefd0000fffd0000cafd0000fafd0000fffd0000f3fd0000f8fd0000fafd0000fefd0200fd00fefd0000fffd0000fbfd0000f8fdff00f1fdfff6
00f6fdfd0000fdfdfd00fffd0000f3fdfb00fdfd0000fafd0200fd00f9fd0200fd00fdfd0000fdfdfd00fffd0000fafd0000fffd0000fefd0000fffd0000cafd0000fdfdfd00fffd0000f3fdfb00fdfd0000fafd0000fefd0200fd00fefd0000fffd0000fbfd0000fafdff00effdfff6
00f6fdfd0000f7fd0000f3fd0000fdfdff00fefd0000fafd0200fd00fafd0000fefd0000fefd0000f7fd0000fafd0000fffd0000fffd0000fefd0000cafd0000f7fd0000f3fd0000fdfdff00fefd0000fafd0000fefd0200fd00fffd0000fefd0000fbfd0000fcfdff00edfdfff6
00f6fdfd0000f7fd0000f3fd0000fcfd0000fefd0000fafd0200fd00fafd0000fefd0000fefd0000f7fd0000fafd0000fffd0000fffd0000fefd0000cafd0000f7fd0000f3fd0000fcfd0000fefd0000fafd0000fefd0200fd00fffd0000fefd0000fbfd0000fdfd0000ebfdfff6
00f6fcfd0000fbfd0000fffd0000f3fd0000fcfd0000fdfd0000fcfd0000fffd0000fbfd0000fcfd0000fefd0000fbfd0000fefd0000fcfd0000fefd0200fd00fdfd0000c9fd0000fbfd0000fffd0000f3fd0000fcfd0000fdfd0000fcfd0000fdfd0400fd00fd00fdfd0000fbfd0000fdfd0000fcfd0000f1fdfff6
00f6fcfdff00fdfdff00fffd0000f3fd0000fdfdff00fdfdff00fefdff00fffd0000fcfdff00fcfdff00fffdff00fdfdff00fefdff00fefdff00fefd0200fd00fdfd0000c9fdff00fdfdff00fffd0000f3fd0000fdfdff00fdfdff00fefdff00fdfd0400fd00fd00fdfd0000fbfd0000fdfdff00fefdff00f1fdfff6
00f6fafdfd00fdfd0000f3fdfb00fafdfe00fdfd0000fcfd0000fafd0000fdfdfd00fafdfe00fcfdff00fcfd0000c7fdfd00fdfd0000f3fdfb00fafdfe00fbfd0100fdff00fcfd0000fffdf800fffdfe00effdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fdf2fdfe00c6fdfe00dffdfff6
00f680fdf3fdfc00c8fdfc00e0fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f6fcfdc000b9fdfa00cafdfa00e1fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd0000b9fdfc00c8fdfc00e0fdfff6
00f6fcfd0000c0fd0000b9fdfe00c6fdfe00dffdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fdd8fdfff6
00f6fcfd0000befd000080fdd9fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddafdfff6
00f6fcfd0000bcfd000080fddbfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddcfdfff6
00f6fcfd0000bafd000080fdddfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddefdfff6
00f6fcfd0000b8fd000080fddffdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde0fdfff6
00f6fcfd0000b6fd000080fde1fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde2fdfff6
00f6fcfd0000b5fd000080fde2fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde3fdfff6
00f6fcfd0000b3fd000080fde4fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde5fdfff6
00f6fcfd0000b1fd000080fde6fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde7fdfff6
00f6fcfd0000affd000080fde8fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde9fdfff6
00f6fcfd0000adfd000080fdeafdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdebfdfff6
00f6fcfd0000abfd000080fdecfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdedfdfff6
00f6fcfd0000a9fd000080fdf9fdfe00f9fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdfbfdfc00fafdfff6
00f6fcfd0000a9fd000080fdfbfdfa00fbfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdfafdfa00fbfdfff6
00f6fcfd0000abfd000080fdf9fdfa00fbfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdf7fdfc00fafdfff6
00f6fcfd0000adfd000080fdf5fdfe00f9fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde9fdfff6
00f6fcfd0000affd000080fde8fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde7fdfff6
00f6fcfd0000b1fd000080fde6fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde5fdfff6
00f6fcfd0000b3fd000080fde4fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde3fdfff6
00f6fcfd0000b5fd000080fde2fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde2fdfff6
00f6fcfd0000b6fd000080fde1fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde0fdfff6
00f6fcfd0000b8fd000080fddffdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddefdfff6
00f6fcfd0000bafd000080fdddfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddcfdfff6
00f6fcfd0000bcfd000080fddbfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddafdfff6
00f6fcfd0000befd000080fdd9fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fdd8fdfff6
00f6fcfd0000c0fd0000b9fdfe00c6fdfe00dffdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd0000b9fdfc00c8fdfc00e0fdfff6
00f6fcfdc000b9fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf3fdfc00c8fdfc00e0fdfff6
00f680fdf2fdfe00c6fdfe00dffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
80f68cf6
restore
gr
32 0 0 58 58 0 0 0 58 /Symbol font
324 1454 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1459 2550 (If you had used GL_POINTS instead of GL_POLYGON, the primitive would have been simply the five points) 2550 SB
384 1528 370 (shown in Figure) 370 SB
754 1528 220 ( 2 . Table) 220 SB
974 1528 1008 ( 1-2  in the following function summary for ) 1008 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1982 1529 217 (glBegin\(\)) 217 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2199 1528 733 ( lists the ten possible arguments) 733 SB
384 1597 923 (and the corresponding type of primitive.) 923 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
264 1764 598 (void glBegin\(GLenum mode\);) 598 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 1836 2569 (Marks the beginning of a vertex list that describes a geometric primitive. The type of primitive is indicated by mode, which can be) 2569 SB
378 1895 525 (any of the values shown in) 525 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (28) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 1108 (Table 1-3: Geometric Primitive Names and Meanings) 1108 SB
128 128 128 fC
/fm 256 def
571 5 240 480 B
1 F
n
/fm 256 def
5 5 812 480 B
1 F
n
/fm 256 def
1417 5 818 480 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 571 91 241 480 CB
264 501 117 (Value) 117 SB
gr
gs 1424 91 812 480 CB
836 501 173 (Meaning) 173 SB
gr
128 128 128 fC
/fm 256 def
571 2 240 571 B
1 F
n
/fm 256 def
2 2 812 571 B
1 F
n
/fm 256 def
1420 2 815 571 B
1 F
n
0 0 0 fC
gs 571 88 241 571 CB
264 589 267 (GL_POINTS) 267 SB
gr
gs 1424 88 812 571 CB
836 589 327 (individual points) 327 SB
gr
gs 571 85 241 659 CB
264 674 233 (GL_LINES) 233 SB
gr
gs 1424 85 812 659 CB
836 674 1083 (pairs of vertices interpreted as individual line segments) 1083 SB
gr
gs 571 85 241 744 CB
264 759 329 (GL_POLYGON) 329 SB
gr
gs 1424 85 812 744 CB
836 759 757 (boundary of a simple, convex polygon) 757 SB
gr
gs 571 85 241 829 CB
264 844 368 (GL_TRIANGLES) 368 SB
gr
gs 1424 85 812 829 CB
836 844 806 (triples of vertices interpreted as triangles) 806 SB
gr
gs 571 85 241 914 CB
264 929 262 (GL_QUADS) 262 SB
gr
gs 1424 85 812 914 CB
836 929 1129 (quadruples of vertices interpreted as four-sided polygons) 1129 SB
gr
gs 571 85 241 999 CB
264 1014 367 (GL_LINE_STRIP) 367 SB
gr
gs 1424 85 812 999 CB
836 1014 659 (series of connected line segments) 659 SB
gr
gs 571 85 241 1084 CB
264 1099 360 (GL_LINE_LOOP) 360 SB
gr
gs 1424 85 812 1084 CB
836 1099 1355 (same as above, with a segment added between last and  first vertices) 1355 SB
gr
gs 571 85 241 1169 CB
264 1184 502 (GL_TRIANGLE_STRIP) 502 SB
gr
gs 1424 85 812 1169 CB
836 1184 456 (linked strip of triangles) 456 SB
gr
gs 571 85 241 1254 CB
264 1269 463 (GL_TRIANGLE_FAN) 463 SB
gr
gs 1424 85 812 1254 CB
836 1269 429 (linked fan of triangles) 429 SB
gr
128 128 128 fC
/fm 256 def
571 5 240 1424 B
1 F
n
/fm 256 def
5 5 812 1424 B
1 F
n
/fm 256 def
1417 5 818 1424 B
1 F
n
0 0 0 fC
gs 571 85 241 1339 CB
264 1354 396 (GL_QUAD_STRIP) 396 SB
gr
gs 1424 85 812 1339 CB
836 1354 555 (linked strip of quadrilaterals) 555 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (29) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 362 1037 (Restriction on using glBegin\(\) and glEnd\(\)) 1037 SB
0 0 0 fC
/fm 256 def
264 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
732 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
768 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
805 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
841 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
877 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
913 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
949 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
985 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1021 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1057 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1093 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1129 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1165 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1201 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1237 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1273 422 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 492 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 497 2018 (The most important aspect of  vertices are their coordinates, which are specified by the ) 2018 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2402 498 233 (glVertex\(\)) 233 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2635 497 254 ( command.) 254 SB
384 566 2491 (You can also supply additional vertex specific information for each vertex - a color, a normal vector, texture) 2491 SB
384 635 1398 (coordinates, or any combination of the following commands:) 1398 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 802 1225 (Table 1-4: Valid commands between glBegin\(\) and glEnd\(\)) 1225 SB
128 128 128 fC
/fm 256 def
678 5 240 957 B
1 F
n
/fm 256 def
5 5 919 957 B
1 F
n
/fm 256 def
1306 5 925 957 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 678 91 241 957 CB
264 978 204 (Command) 204 SB
gr
gs 1313 91 919 957 CB
943 978 422 (Purpose of command) 422 SB
gr
128 128 128 fC
/fm 256 def
678 2 240 1048 B
1 F
n
/fm 256 def
2 2 919 1048 B
1 F
n
/fm 256 def
1309 2 922 1048 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
gs 678 88 241 1048 CB
264 1066 226 (glVertex*\(\)) 226 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 88 919 1048 CB
943 1066 418 (set vertex commands) 418 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1136 CB
264 1151 213 (glColor*\(\)) 213 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1136 CB
943 1151 327 (set current color) 327 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1221 CB
264 1236 208 (glIndex*\(\)) 208 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1221 CB
943 1236 447 (set current color index) 447 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1306 CB
264 1321 249 (glNormal*\(\)) 249 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1306 CB
943 1321 587 (set normal vertex coordinates) 587 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1391 CB
264 1406 316 (glEvalCoord*\(\)) 316 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1391 CB
943 1406 412 (generate coordinates) 412 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1476 CB
264 1491 511 (glCallList\(\), glCallLists\(\)) 511 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1476 CB
943 1491 427 (execute display list\(s\)) 427 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1561 CB
264 1576 296 (glTexCoord*\(\)) 296 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1561 CB
943 1576 452 (set texture coordinates) 452 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 241 1646 CB
264 1661 279 (glEdgeflag*\(\)) 279 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1646 CB
943 1661 496 (control drawing of edges) 496 SB
gr
128 128 128 fC
/fm 256 def
678 5 240 1816 B
1 F
n
/fm 256 def
5 5 919 1816 B
1 F
n
/fm 256 def
1306 5 925 1816 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
gs 678 85 241 1731 CB
264 1746 272 (glMaterial*\(\)) 272 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 919 1731 CB
943 1746 441 (set material properties) 441 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 30 30
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (30) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 360 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 365 1160 (No other OpenGL commands are valid between a ) 1160 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1544 366 217 (glBegin\(\)) 217 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1761 365 113 ( and ) 113 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1874 366 175 (glEnd\(\)) 175 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2049 365 846 ( pair, making any other OpenGL call) 846 SB
384 434 2498 (will generate and error. Note though that only OpenGL commands are restricted.  For example the following) 2498 SB
384 503 691 (code draws an outlined circle:) 691 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 629 650 (#define PI 3.1415926535897) 650 SB
378 674 650 (Glint circle_points = 100;) 650 SB
378 719 550 (glBegin\(GL_LINE_LOOP\);) 550 SB
378 764 900 (for \(I = 0;I < circle_points; I++\) {) 900 SB
378 809 925 (   angle = 2 * PI * I /circle_points;) 925 SB
378 854 950 (   glVertex2f\(cos\(angle\), sin\(angle\)\);) 950 SB
378 899 25 (}) 25 SB
378 944 200 (glEnd\(\);) 200 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1039 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1044 2516 (This is of course not the most efficient method of drawing a circle, more efficient methods include storing the) 2516 SB
384 1113 1461 (vertexes in an array, create a display list, or use a GLU routine.) 1461 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1230 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1235 1481 (You can use any combination of the twenty-four versions of the ) 1481 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1865 1236 262 (glVertex*\(\)) 262 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2127 1235 547 ( command between the ) 547 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2674 1236 217 (glBegin\(\)) 217 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1304 98 (and ) 98 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
482 1305 190 (glEnd\(\),) 190 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
672 1304 2208 ( although in real applications all the calls in any particular instance tends to be of the same type.) 2208 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1508 953 (Displaying Points, Lines, and Polygons) 953 SB
0 0 0 fC
/fm 256 def
264 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
660 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
696 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
732 1568 M -13 0 0 -6 13 0 0 6 4 PP
1 F
n
/fm 256 def
769 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
805 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
841 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
877 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
913 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
949 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
985 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1021 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1057 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1093 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1129 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1165 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1201 1568 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1638 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1643 2399 (By default, a point is drawn as a single pixel on the screen, a line is drawn solid and one pixel wide, and) 2399 SB
384 1712 2577 (polygons are drawn solidly filled in. The following commands control the display modes for the default drawing) 2577 SB
384 1781 165 (modes.) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1949 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1948 237 (glPointSize) 237 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
601 1949 186 (\(GLfloat ) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
787 1949 74 (size) 74 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
861 1949 17 (\)) 17 SB
378 2021 877 (Sets the width in pixels for rendered points, ) 877 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1255 2021 74 (size) 74 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1329 2021 908 ( must be greater than 0.0 and by default is 1.0) 908 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (31) 42 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 313 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 312 272 (glLineWidth) 272 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
636 313 186 (\(GLfloat ) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
822 313 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
931 313 17 (\)) 17 SB
378 385 845 (Sets the width in pixels for rendered lines; ) 845 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1223 385 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1332 385 921 ( must be greater than 0.0 and by default is 1.0.) 921 SB
264 543 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 542 285 (glLineStipple) 285 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
649 543 147 (\(GLint ) 147 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
796 543 120 (factor) 120 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
916 543 213 (, Glushort ) 213 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1129 543 144 (pattern) 144 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1273 543 17 (\)) 17 SB
378 615 937 (Sets the current stippling pattern for lines. The ) 937 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1315 615 144 (pattern) 144 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1459 615 1417 ( argument is a 16 bit series of 0s and 1s, and is repeated as necessary to) 1417 SB
378 674 1228 (stipple a given line. The pattern can be stretched out by using ) 1228 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1606 674 120 (factor) 120 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1726 674 1154 (, which multiplies each subseries of consecutive 1s and 0s.) 1154 SB
378 733 1324 (Line stippling must be enabled by passing GL_LINE_STIPPLE to ) 1324 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1702 733 231 (glEnable\(\);) 231 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1933 733 909 ( it\222s disabled by passing the same argument to) 909 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
378 792 240 (glDisable\(\).) 240 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 950 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 949 332 (glPolygonMode) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
696 950 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
900 950 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
984 950 195 (, Glenum ) 195 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1179 950 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1287 950 30 (\);) 30 SB
378 1022 1560 (Controls the drawing mode for a polgons front and back faces. The parameter ) 1560 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1938 1022 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2022 1022 713 ( can be GL_FRONT_AND_BACK,) 713 SB
378 1081 589 (GL_FRONT, or GL_BACK; ) 589 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
967 1081 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1075 1081 1869 ( can be GL_POINT, GL_LINE or GL_FILL to indicate whether the polygon should be drawn) 1869 SB
378 1140 1710 (as points, outlined, or filled. By default, both the front and back faces are drawn filled.) 1710 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1332 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1337 2454 (In general, polygons can be complicated, so OpenGL makes some strong restrictions on what constitutes a) 2454 SB
384 1406 422 (primitive polygon.) 422 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
381 1500 51 (1. ) 60 SB
441 1500 1645 (The edges of a OpenGL polygon can\222t intersect \(a mathematician would call this a ) 1645 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2086 1500 304 (simple polygon) 304 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2390 1500 17 (\)) 17 SB
381 1584 51 (2. ) 60 SB
441 1584 1316 (OpenGL polygons must be convex, they cannot have indentations.) 1316 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1691 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1696 2406 (Note that polygons with holes cannot be described. They are nonconvex, and they can\222t be drawn with a) 2406 SB
384 1765 975 (boundary made up of a single closed loop.) 975 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (32) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
264 325 815 (Figure 1-4: Valid and Invalid Polygons) 815 SB
/bytestr 319 string def
gs 997 253 264 493 CB
save 264 493 translate 997 253 scale
319 81 8
[319 0 0 -81 0 81]
{unpack} bind
image
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ffd3ff0000ffff0000fdff0000fdff0000fcfffd0001ff00ffff0000ffff0000fdfffe0001ff0099ff
80ffd3ff0000ffff0000fdff0000fdff0000fdff0000fdffff00ffff0000ffff0000feff0000feffff0099ff
e9ff0000fafffd0001ff00ffff0000ffff0000fdfffe0001ff0087ff0000ffff0000fdff0000feff0200ff00feff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
e9ff0000fbff0000fdffff00ffff0000ffff0000feff0000feffff0087ff0000ffff0000fdff0000feff0200ff00feff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
eaff0200ff00fcff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000fefffe00ffff0000ffff0000ffff0000ffff0000fcff000099ff
eaff0200ff00fcff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000fbfffe00ffff0000ffff0000ffff0000fcff000099ff
ebff0000feff0000fcfffe00ffff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000ffff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
ebff0000feff0000f9fffe00ffff0000ffff0000ffff0000fcff000087ff0000ffffff00feff0200ff00fcff0000ffff0000fdff0000ffff0000ffff0000feff0000feffff0099ff
ebff0000feff0000fdff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0100fffe00ffff0000fcff0000fefffd00feff0000ffff0000fdfffe0001ff0099ff
ecff0000fcff0000fdff0000fdff0000ffff0000ffff0000feff0000feffff0087ff0000e7ff0000f6ff000099ff
ecff0000fcff0000fcfffd00feff0000ffff0000fdfffe0001ff0087ff0000e7ff0000f6ff000099ff
ecff0000fcff0000f5ff0000f6ff000087ff0000e7ff0000ffff0000f9ff000099ff
edff0000faff0000f6ff0000f6ff000080ff80fff9ff
edff0000faff0000f6ff0000ffff0000f9ff000080ff80fff9ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
fbffff0080ff80ffccff
fafffe0080ff80ffceff
faff0000fffffe0080ff80ffd1ff
f9ff0000fdffff00d0fffc0080fff6ffec00a8ff
f9ff0000fbffff00d2ff0000fdfff70080ff01ff00efff0000ebffcc00f2ff
f8ff0000fafffe00d5ff0000f3fffb0085ff0000f0ff0000eaff0000ceff0000f2ff
f8ff0000f7ffff00d8ff0000ecff0000bcffe300e9ff0000f2ffff00e9ff0000ceff0000f2ff
f7ff0000f6fffe00dbff0000ecff0000bbff0000e7ff0000e8ff0000f3ff0000e7ff0000ceff0000f2ff
f6ff0000f4ffff00ddff0000ebff0000bbff0000e9ff0000e7ff0000f4ff0000e6ff0000ceff0000f2ff
f6ff0000f2ffff00dfff0000eaff0000bbff0000ebff0000e6ff0000f5ff0000e4ff0000cfff0000f2ff
f5ff0000f1fffe00e2ff0000e9ff0000bbff0000ecff0000e6ff0000f6ff0000e3ff0000d0ff0000f1ff
f5ff0000eeffff00e5ff0000e8ff0000baff0000eeff0000e5ff0000f8ffff00e2ff0000d0ff0000f1ff
f4ff0000edfffe00e8ff0000e7ff0000baff0000f0ff0000e4ff0000f9ff0000e0ff0000d0ff0000f1ff
f3ff0000ebffff00eaff0000e6ff0000baff0000f2ff0000e3ff0000faff0000dfff0000d0ff0000f1ff
f3ff0000e9ffff00ecff0000e6ff0000b9ff0000f4ff0000e2ff0000f9ffff00e1ff0000f2fffe00e2ff0000f1ff
f2ff0000e8fffe00efff0000e5ff0000b9ff0000f6ff0000e1ff0000f7ff0000e2ff0000f2ff0000fffffb00e8ff0000f1ff
f2ff0000e5ffff00f2ff0000e3ff0000b9ff0000f8ff0000e0ff0000f6ffff00e4ff0000f3ff0000f8fffd00ecff0000f1ff
f1ff0000e4ffff00f4ff0000e3ff0000b8ff0000faff0000dfff0000f4ff0000e4ff0000f4ff0000f4ff0000edff0000f1ff
f1ff0000e4ff0000f3ff0000e2ff0000b8ff0000fbff0000dfff0000f3ffff00e6ff0000f4ff0000f4ff0000edff0000f1ff
f0ff0000e5ff0000f3ff0000e1ff0000b8ff0000fdff0000deff0000f1ff0000e7ff0000f5ff0000f2ff0000eeff0000f1ff
efff0000e7ff0000f2ff0000e0ff0000b8ff0000ffff0000ddff0000f0ffff00e9ff0000f5ff0000f2ff0000eeff0000f1ff
efff0000e7ff0000f3ff0000dfff0000b7ffff00dcff0000eeff0000eaff0000f5ff0000f1ff0000efff0000f1ff
eeff0000e9ff0000f2ff0000deff0000b8ff0000dbff0000f0ffff00e9ff0000f6ff0000f0ff0000f0ff0000f0ff
eeff0000eaff0000f1ff0000dfff0000b8ff0200ff00dcff0000f2ffff00e7ff0000f6ff0000efff0000f1ff0000f0ff
edff0000ebff0000f0ff0000e0ff0000b9ff0000feff0000ddff0000f4ffff00e5ff0000f6ff0000efff0000f1ff0000f0ff
ecff0000edff0000eeff0000e2ff0000b9ff0000fcff0000deff0000f6ffff00e3ff0000f7ff0000edff0000f2ff0000f0ff
ecff0000eeff0000ecffff00e5ff0000b8ff0000fbff0000dfff0000f8ffff00e0ff0000f8ff0000edff0000f2ff0000f0ff
ebff0000efff0000eaff0000e7ff0000b8ff0000f9ff0000e0ff0000faffff00deff0000f7ff0000edff0000f3ff0000f0ff
ebff0000f0ff0000e8ff0000e8ff0000b9ff0000f7ff0000e1ff0000fcffff00dcff0000f6ff0000eeff0000f3ff0000f0ff
eaff0000f1ff0000e7ff0000eaff0000b9ff0000f5ff0000e2ff0000fbffff00ddff0000f5ffff00f1ff0000f2ff0000f0ff
eaff0000f2ff0000e5ff0000ecff0000b9ff0000f3ff0000e3ff0000f9ff0000deff0000f3ff0000f3ff0000f1ff0000f0ff
e9ff0000f4ff0000e3ff0000edff0000baff0000f1ff0000e4ff0000f8ff0000dfff0000f2ff0000f4ff0000f1ff0000f0ff
e8ff0000f5ff0000e2ff0000efff0000baff0000efff0000e5ff0000f7ffff00e1ff0000f1ff0000f6ff0000f0ff0000f0ff
e8ff0000f6ff0000e0ffff00f2ff0000baff0000edff0000e6ff0000f5ff0000e2ff0000f0ff0000f8ff0000efff0000f0ff
e7ff0000f7ff0000deff0000f3ff0000baff0000ecff0000e7ff0000f4ffff00e3ff0000f0ff0000faff0000efff0000efff
e7ff0000f8ff0000dcff0000f5ff0000baff0000eaff0000e8ff0000f2ff0000e4ff0000efffff00fdff0000eeff0000efff
e6ff0000faff0000daff0000f7ff0000baff0000e8ff0000e9ff0000f1ff0000e5ff0000edff0000feff0000eeff0000efff
e5ff0000fbff0000d9ff0000f9ff0000baffe400eaff0000f0ffff00e7ff0000ecff0200ff00edff0000efff
e5ff0000fcff0000d7ff0000faff000086ffec00e8ffff00ecff0000ecff0000efff
e4ff0000feff0000d5ffff00fdff000080ffd6ffff00d8ff0000efff
e4ff0000feff0000d3ff0000ffff000080ffd3fffe00dcffff00efff
e3ff0200ff00d1ff0200ff0080ffd0fffe00e1ffff00edff
e3ff0200ff00d0ff000080ffccffff00e5ffff00ebff
e2ff000080ff97fffe00ebfffe00e9ff
80ff80fff5ffff00efffff00e6ff
80ff80fff3fffe00f5fffe00e4ff
80ff80fff0fffe00faffff00e1ff
80ff80ffedffff00feffff00dfff
80ff80ffebfffe00ddff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
restore
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
264 885 497 (Polygon Details) 497 SB
0 0 0 fC
/fm 256 def
264 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
517 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
559 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
601 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
643 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
685 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
727 962 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1045 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1050 1963 (Polygons are typically drawn by filling in all the pixels enclosed within the boundary.) 1963 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1167 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1172 2451 (Polygons have two sides, a front and a back and might be rendered differently depending on which side  is) 2451 SB
384 1241 2360 (facing the viewer. This allows you to have cutaway views of solid objects in which there is an obvious) 2360 SB
384 1310 1587 (distinction between the parts that are inside and those on the outside.) 1587 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1427 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1432 1021 (The polygon drawing mode is controlled by:) 1021 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1600 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1599 332 (glPolygonMode) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
696 1600 204 (\(GLenmu ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
900 1600 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
984 1600 195 (, Glenum ) 195 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1179 1600 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1287 1600 30 (\);) 30 SB
378 1672 1548 (Controls the drawing mode for polygons front and back faces. The parameter ) 1548 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1926 1672 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2010 1672 713 ( can be GL_FRONT_AND_BACK,) 713 SB
378 1731 589 (GL_FRONT, or GL_BACK; ) 589 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
967 1731 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1075 1731 913 ( can be GL_POINT, GL_LINE, or GL_FILL.) 913 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1838 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1843 1924 (You can have the front faces filled and the back faces outlined with these two calls:) 1924 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
378 1969 825 (glPolygonMode\(GL_FRONT, GL_FILL\);) 825 SB
378 2014 800 (glPolygonMode\(GL_BACK, GL_LINE\);) 800 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (33) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 918 (Reversing and Culling Polygon Faces) 918 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 1966 (Polygons whose vertices appear in a counterclockwise order on the screen are called ) 1966 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2350 363 277 (front-facing) 277 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2627 362 224 (. You can) 224 SB
384 431 1956 (construct the surface of any reasonable solid from polygons of consistent orientation.) 1956 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 548 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 553 1738 (You can swap what OpenGL considers the back face by using the function:) 1738 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 721 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 720 258 (glFrontFace) 258 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
622 721 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
826 721 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
934 721 30 (\);) 30 SB
378 793 1276 (Controls how front-facing polygons are determined. By default, ) 1276 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1654 793 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1762 793 1108 ( is GL_CCW, which corresponds to a counterclockwise) 1108 SB
378 852 1673 (orientation of the ordered vertices of a projected polygon in window coordinates. If ) 1673 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2051 852 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2159 852 697 ( is GL_CW, faces with a clockwise) 697 SB
378 911 776 (orientation are considered front-facing.) 776 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1018 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1023 2479 (In a completely enclosed surface constructed from polygons with a consistent orientation, none of the back-) 2479 SB
384 1092 2510 (facing polygons are ever visible, they are always obscured by the front-facing polygons. In this situation, you) 2510 SB
384 1161 2537 (can maximize drawing speed by having OpenGL discard polygons as soon as it determines that they are back-) 2537 SB
384 1230 156 (facing.) 156 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1347 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1352 1546 (To instruct OpenGL to discard front- or back-facing polygons, use:) 1546 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1520 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1519 227 (glCullFace) 227 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
591 1520 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
795 1520 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
903 1520 30 (\);) 30 SB
378 1592 2144 (Indicates which polygons should be discarded \(culled\) before they are converted to screen coordinates. The ) 2144 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2522 1592 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2630 1592 169 ( is either) 169 SB
378 1651 2523 (GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK to indicate front-, back-facing, or all polygons. To take effect, culling) 2523 SB
378 1711 450 (must be enabled using ) 450 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
828 1710 221 (glEnable\(\)) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1049 1711 1038 ( with the GL_CULL_FACE; it can be disabled with ) 1038 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
2087 1710 229 (glDisable\(\)) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2316 1711 484 ( and the same argument.) 484 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (34) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 275 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 280 2477 (By default, filled polygons are drawn with a solid pattern. They can also be filled with a 32x32 bit window-) 2477 SB
384 349 1197 (aligned stipple pattern, which can be specified with:) 1197 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 517 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 516 359 (glPolygonStipple) 359 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
723 517 312 (\(cont Glubyte *) 312 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1035 517 102 (mask) 102 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1137 517 30 (\);) 30 SB
378 589 1350 (Defines the current stipple pattern for filled polygons. the argument ) 1350 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1728 589 102 (mask) 102 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1830 589 1049 ( is a pointer to a 32x32 bitmap that\222s interpreted as a) 1049 SB
378 649 1397 (mask of 0s and 1s.  Polygon stippling is enabled and disabled by using ) 1397 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1775 648 221 (glEnable\(\)) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1996 649 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
2093 648 229 (glDisable\(\)) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2322 649 100 ( with) 100 SB
378 708 888 (GL_POLYGON_STIPPLE as the argument.) 888 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 902 394 (Normal Vectors) 394 SB
0 0 0 fC
/fm 256 def
264 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
300 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
336 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
372 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
408 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
444 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
480 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
516 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
552 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
588 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
624 962 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1032 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1037 2469 (A normal vector \(or normal for short\) is a vector that points in a direction that is perpendicular to a surface.) 2469 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1154 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1159 2501 (For a flat surface one perpendicular direction suffices for every point on the surface, but for a general curved) 2501 SB
384 1228 2547 (surface, the normal direction might be different at each point. With OpenGL you can specify a normal for each) 2547 SB
384 1297 158 (vertex.) 158 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1414 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1419 2360 (Vertices may share the same normal, but you can\222t assign normals anywhere other than at the vertices.) 2360 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1536 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1541 1128 (To set the current normal for subsequent calls to ) 1128 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
1512 1540 250 (glVertex\(\)) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1762 1541 107 ( use:) 107 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1709 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1708 224 (glNormal3) 224 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
588 1709 160 ({bsidf}\() 160 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
748 1709 577 (TYPE nx, TYPE ny, TYPE nz) 577 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1325 1709 30 (\);) 30 SB
264 1795 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1794 224 (glNormal3) 224 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
588 1795 143 ({bsidf}) 143 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
731 1794 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
756 1795 136 (\(const ) 136 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
892 1795 176 (TYPE *v) 176 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1068 1795 30 (\);) 30 SB
378 1868 1940 (Sets the current normal vector as specified by the arguments. The nonvector version \(without the ) 1940 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
2318 1867 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2343 1868 609 (\) takes three arguments, which) 609 SB
378 1927 227 (specify an \() 227 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
605 1927 190 (nx, ny, nz) 190 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
795 1927 2150 (\) vector that is taken to be the normal. alternatively, you can use the vector version of this function \(with the) 2150 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
378 1986 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
403 1987 1573 (\) and supply a single array of three elements to specify the desired normal. The ) 1573 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1976 1986 73 (b, s) 73 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2049 1987 110 (, and ) 110 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
2159 1986 14 (i) 14 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2173 1987 738 ( versions scale their parameter values) 738 SB
378 2046 624 (linearly to the range [-1.0, 1.0].) 624 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 35 35
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (35) 42 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 225 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 230 2528 (There is no magic to finding the normals for an object, most likely you have to perform some calculations that) 2528 SB
384 299 1901 (might include taking derivatives. Normals are used in shading of polygon surfaces.) 1901 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 483 CB
1460 7 265 499 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 577 263 (Viewing) 263 SB
/fm 256 def
264 654 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 654 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 654 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 654 M -15 0 0 -7 15 0 0 7 4 PP
1 F
n
/fm 256 def
433 654 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
475 654 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
517 654 M -10 0 0 -7 10 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 737 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 742 2435 (There is a transformation process to produce the desired results when viewing a geometric model and it is) 2435 SB
384 811 2465 (analogous to taking a photo with a camera. The same steps are required to setup the viewing position using) 2465 SB
384 880 975 (OpenGL transformations. These steps are:) 975 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
381 974 51 (1. ) 60 SB
441 974 2158 (Setting the position of the camera \(on a tripod\) and aiming the camera at the scene. \(viewing transformation\)) 2158 SB
381 1058 51 (2. ) 60 SB
441 1058 2035 (Arrange the scene and components in the desired positions and orientation. \(modelling transformation\)) 2035 SB
381 1142 51 (3. ) 60 SB
441 1142 1447 (Choose the camera lens and adjust the zoom. \(projection transformation\)) 1447 SB
381 1226 51 (4. ) 60 SB
441 1226 1280 (Determine the size of the final output. \(viewport transformation\)) 1280 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1333 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1338 2481 (After these steps are complete the picture can be taken or the geometry can be rendered to the frame buffer.) 2481 SB
384 1407 1698 (OpenGL uses transformations based on the current transformation matrix.) 1698 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1524 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1529 1332 (The Viewing Transformation matrix is manipulated using ) 1332 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
1716 1528 341 (glTranslatef\(\)) 341 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2057 1529 865 ( and since this command accumulates) 865 SB
384 1599 1294 (transformations, it is important to clear the matrix using ) 1294 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
1678 1598 452 (glLoadIndentity\(\).) 452 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
2130 1599 741 ( It is important to set the current) 741 SB
384 1668 721 (transformation matrix by using:) 721 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1836 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1835 310 (glMatrixMode) 310 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
674 1836 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
878 1836 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
986 1836 30 (\);) 30 SB
378 1908 2189 (Specifies whether the modelview, projection, or texture matrix will be modified using the GL_MODELVIEW,) 2189 SB
378 1967 877 (GL_PROJECTION, or GL_TEXTURE for ) 877 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1255 1967 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1363 1967 1539 (. Subsequent transformation commands manipulate the specified matrix. Note) 1539 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 36 36
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (36) 42 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 227 2422 (that only one matrix can be modified at a time. By default, the modelview matrix is the one that is modifiable, and all three) 2422 SB
378 286 712 (matrices contain the identity matrix.) 712 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 393 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 398 1183 (The general purpose transformation commands are ) 1183 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1567 399 1219 (glLoadIdentity\(\), glLoadMatrix*\(\), glMultMatrix*\(\),) 1219 SB
384 468 989 (slTranslate*\(\), glScale*\(\), and glRotate*\(\)) 989 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1373 467 15 (.) 15 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 671 425 (Perspective View) 425 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 801 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 806 2544 (The glFrustum\(\) routine creates a matrix for a perspective-view frustum and multiplies the current matrix by it.) 2544 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1010 608 (Orthographic Projection) 608 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1140 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1145 2164 (An orthographic projection creates a viewing volume that resembles a box. It is created using:) 2164 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1313 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1312 168 (glOrtho) 168 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
532 1313 230 (\(GLdouble ) 230 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
762 1313 65 (left) 65 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
827 1313 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1048 1313 97 (right) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1145 1313 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1366 1313 139 (bottom) 139 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1505 1313 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1726 1313 64 (top) 64 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1790 1313 13 (,) 13 SB
264 1398 455 (                    Gldouble ) 455 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
719 1398 91 (near) 91 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
810 1398 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1031 1398 59 (far) 59 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1090 1398 30 (\);) 30 SB
378 1470 2532 (Creates a matrix for an orthographic parallel viewing volume and multiplies the current matrix by it. The near clipping plane is a) 2532 SB
378 1529 779 (rectangle with the lower left corner at \() 779 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1157 1529 377 (left, bottom,  -near) 377 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1534 1529 629 (\) and the upper right corner at \() 629 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2163 1529 321 (right, top, -near) 321 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2484 1529 475 (\). The far clipping plane) 475 SB
378 1588 600 (is a rectangle with corners at \() 600 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
978 1588 332 (left, bottom, -far) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1310 1588 131 (\) and \() 131 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1441 1588 289 (right, top, -far) 289 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1730 1588 154 (\). Both ) 154 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1884 1588 91 (near) 91 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1975 1588 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2072 1588 59 (far) 59 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2131 1588 556 ( can be positive or negative.) 556 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1782 638 (Viewport Transformation) 638 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1912 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1917 2563 (The viewport transformation corresponds to the stage where the size of the final image is chosen. It is specified) 2563 SB
384 1986 137 (using:) 137 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 37 37
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (37) 42 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 228 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 227 239 (glViewPort) 239 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
603 228 147 (\(GLint ) 147 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
750 228 22 (x) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
772 228 138 (, Glint ) 138 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
910 228 22 (y) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
932 228 174 (, Glsizei ) 174 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1106 228 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1215 228 174 (, Glsizei ) 174 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1389 228 125 (height) 125 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1514 228 30 (\);) 30 SB
378 300 1652 (Defines a pixel rectangle in the window into which the final image is mapped. The \() 1652 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2030 300 70 (x, y) 70 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2100 300 828 (\) parameter specifies the lower left corner) 828 SB
378 359 415 (of the viewport, and ) 415 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
793 359 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
902 359 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
999 359 125 (height) 125 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1124 359 1619 ( are the size of the viewport rectangle. By default, the initial viewport values are \() 1619 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2743 359 89 (0, 0,) 89 SB
378 418 421 (winWidth, winHeight) 421 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
799 418 30 (\).) 30 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 612 666 (Additional Clipping Planes) 666 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 742 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 747 2535 (In addition to the six clipping planes of the viewing volume you can define up to six additional clipping planes) 2535 SB
384 816 870 (to further restrict the viewing volume.) 870 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 933 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 938 2274 (Each plane is defined by the coefficients of its equation: Ax+By+Cz+D=0. The clipping planes are) 2274 SB
384 1007 2557 (automatically transformed appropriately by the modelling and viewing transformations. They are created using:) 2557 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1175 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1174 247 (glClipPlane) 247 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
611 1175 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
815 1175 111 (plane) 111 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
926 1175 365 (, const Gldouble *) 365 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1291 1175 175 (equation) 175 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1466 1175 30 (\);) 30 SB
378 1247 589 (Defines a clipping plane. The ) 589 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
967 1247 175 (equation) 175 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1142 1247 1609 ( argument points to the four coefficients of the plane equation, Ax+By+Cz+D=0.) 1609 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 1336 CB
1460 7 265 1352 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 1430 414 (Display Lists) 414 SB
/fm 256 def
264 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 1507 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1675 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1680 2571 (A display List is a group of OpenGL commands that have been stored for later execution. When a display list is) 2571 SB
384 1749 1651 (invoked, the commands in it are executed in the order they were issued.) 1651 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1951 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1956 2480 (An example of using a display list may be that you need to draw a circle many times in an OpenGL session.) 2480 SB
384 2025 403 (Your options are:) 403 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 38 38
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (38) 42 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
381 227 51 (1. ) 60 SB
441 227 2494 (Create a loop to calculate the circle based on cosines and sines of arc segments. This requires you to calculate the coordinates) 2494 SB
441 286 910 (of the endpoints each time the circle is drawn.) 910 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
381 370 51 (2. ) 60 SB
441 370 2455 (You could store the coordinates of the endpoints of the circle segments in an array and pull them out as needed. This would) 2455 SB
441 429 1767 (incur the overhead of an extra variable, looping, and the actual test condition of the loop.) 1767 SB
381 513 51 (3. ) 60 SB
441 513 2512 (What you would like is to define the circle once to OpenGL and have the ability to send one command to OpenGL to draw the) 2512 SB
441 572 2505 (circle again. We assume the developers of the library code are optimizing memory and the internal drawing aspect of the code.) 2505 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 764 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 769 2452 (A display list is created much the way we have defined drawing to OpenGL in the previous examples. The) 2452 SB
384 838 2376 (difference being is you replace glBegin\(\) with glNewList\(\) and replace glEnd\(\) with glEndList\(\). These) 2376 SB
384 907 598 (commands are defined as:) 598 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 990 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 989 215 (glNewList) 215 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
579 990 172 (\(GLuint ) 172 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
751 990 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
812 990 213 (, GLenum ) 213 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1025 990 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1133 990 30 (\);) 30 SB
378 1062 2377 (Specifies the start of the list. All but a few restricted OpenGL calls are stored in the list \(restricted routines are executed) 2377 SB
378 1121 1110 (immediately during the creation of the display list\). The ) 1110 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1488 1121 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1549 1121 1344 ( parameter is a unique positive integer that identifies the display list.) 1344 SB
378 1180 544 (The possible values for the ) 544 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
922 1180 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1030 1180 1868 ( parameter are GL_COMPILE and GL_COMPILE_AND_EXECUTE. Use GL_COMPILE if) 1868 SB
378 1239 2076 (you don't want the following OpenGL commands to actually display as they are placed in the display list.) 2076 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1433 794 (What's stored in the display list.) 794 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1563 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1568 2483 (When you build the display list, only the values for the expressions are stored  in the list.  If the values in an) 2483 SB
384 1637 1567 (array are subsequently changed, the display list values don't change.) 1567 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 39 39
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (39) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 447 906 (What 's not stored in the display list:) 906 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 542 1207 (Here are the commands that are not stored in the display list:) 1207 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 662 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 671 375 (glDeleteLists\(\)) 375 SB
864 671 325 (glIsEnabled\(\)) 325 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 766 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 775 450 (glFeedbackBuffer\(\)) 450 SB
864 775 250 (glIsList\(\)) 250 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 870 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 879 250 (glFinish\(\)) 250 SB
864 879 350 (glPixelStore\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 974 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 983 225 (glFlush\(\)) 225 SB
864 983 350 (glReadPixels\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 1078 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 1087 300 (glGenLists\(\)) 300 SB
864 1087 350 (glRenderMode\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
324 1182 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
384 1191 175 (glGet\(\)) 175 SB
864 1191 400 (glSelectBuffer\(\)) 400 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1373 559 (Executing Display lists) 559 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1503 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1508 2445 (After you have created a display list,  you can execute it by calling glCallList\(\). You can execute the same) 2445 SB
384 1577 2397 (display list as many times as you want and you an also intermix calls to different display lists to perform) 2397 SB
384 1646 605 (immediate mode graphics.) 605 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1814 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1813 208 (glCallList) 208 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
572 1814 172 (\(GLuint ) 172 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
744 1814 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
805 1814 30 (\);) 30 SB
378 1886 980 (This routine executes the display list specified by ) 980 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1358 1886 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1419 1886 1525 (. The commands in the display list are executed in the order they were saved.) 1525 SB
378 1945 937 (If list has not been saved then nothing happens.) 937 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 40 40
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (40) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 244 CB
1460 7 265 260 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 338 548 (The Color Model) 548 SB
/fm 256 def
264 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 415 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 415 M -2 0 0 -7 2 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 498 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 503 2562 (On a computer screen, the hardware causes each pixel on the screen to emit different amount of red, green, and) 2562 SB
384 572 1886 (blue light \(these are called the RGB values\). This is referred to as the RGB mode.) 1886 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 689 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 694 2557 (OpenGL also supports a color-index display mode which uses a color map \(or lookup table\) which is similar to) 2557 SB
384 763 2564 (using a palette to mix paints to prepare for a paint by the numbers scene. This useful if you are coloring a scene) 2564 SB
384 832 1528 (based on some external scalar value associated with the geometry.) 1528 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 949 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 954 2404 (You should base you decision on which color model you use on the hardware available and also on your) 2404 SB
384 1023 416 (application needs.) 416 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1140 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1145 1135 (To specify a color to OpenGL in RGB mode use:) 1135 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1313 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1312 158 (glColor) 158 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
522 1313 17 ([) 17 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
539 1312 50 (34) 50 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
589 1313 619 (]{b s i f d ub us ui}[v]\(TYPE {) 619 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1208 1313 92 (r, *v) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1300 1313 193 (}[,TYPE ) 193 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1493 1313 19 (r) 19 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1512 1313 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1677 1313 25 (g) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1702 1313 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1867 1313 25 (b) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1892 1313 182 ( [,TYPE ) 182 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2074 1313 25 (a) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2099 1313 47 (]\);) 47 SB
378 1385 1870 (Sets the current R,G,B, and Alpha values. If you do not specify an Alpha value it is set to one.) 1870 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1492 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1497 1088 (To specify a color in the color-index mode use:) 1088 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 1665 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 1664 159 (glIndex) 159 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
523 1665 24 ({) 24 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
547 1664 77 (sifd) 77 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
624 1665 41 (}[) 41 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
665 1664 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
690 1665 385 (]\([const] TYPE [*]) 385 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1075 1665 22 (c) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1097 1665 30 (\);) 30 SB
378 1737 2459 (Sets the current color index. The first suffix for this command indicates the data type for parameters: short, integer, float, or) 2459 SB
378 1796 2482 (double. The second option suffix is v, which indicates that the argument is an array of values of the given data type \(the array) 2482 SB
378 1855 495 (contains only one value\).) 495 SB
/fm 256 def
5 5 238 1997 B
1 F
n
/fm 256 def
5 5 238 1997 B
1 F
n
/fm 256 def
336 5 244 1997 B
1 F
n
/fm 256 def
5 5 581 1997 B
1 F
n
/fm 256 def
1576 5 587 1997 B
1 F
n
/fm 256 def
5 5 2164 1997 B
1 F
n
/fm 256 def
5 5 2164 1997 B
1 F
n
/fm 256 def
5 84 238 2003 B
1 F
n
/fm 256 def
5 5 238 2088 B
1 F
n
/fm 256 def
5 5 238 2088 B
1 F
n
/fm 256 def
336 5 244 2088 B
1 F
n
/fm 256 def
2 84 581 2003 B
1 F
n
/fm 256 def
5 5 581 2088 B
1 F
n
/fm 256 def
1576 5 587 2088 B
1 F
n
/fm 256 def
5 84 2164 2003 B
1 F
n
/fm 256 def
5 5 2164 2088 B
1 F
n
/fm 256 def
5 5 2164 2088 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 244 1997 CB
401 2018 21 (?) 21 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1580 91 584 1997 CB
605 2018 1023 (What are a few examples of uses of the two modes.) 1023 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 41 41
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (41) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 689 (Specifying a Shading Model) 689 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2508 (A line or filled polygon can be drawn with a single color \(flat shading\) or with many different colors \(smooth) 2508 SB
384 431 467 (shading, also called ) 467 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
851 432 415 (Gouraud Shading) 415 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1266 431 1096 (\). You specify the desired shading model using:) 1096 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 599 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 598 305 (glShadeModel) 305 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
669 599 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
873 599 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
981 599 30 (\);) 30 SB
378 671 573 (Sets the shading model. The ) 573 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
951 671 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1059 671 1345 ( parameter can be either GL_SMOOTH \(the default\) or GL_FLAT.) 1345 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 863 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 868 2406 (With flat shading, the color of one vertex of a primitive is duplicated across the primitives vertices. With) 2406 SB
384 937 2562 (smooth shading, the color at each vertex is treated individually. For a line, the colors along the line segment are) 2562 SB
384 1006 2559 (interpolated between the vertex colors. For a polygon, the colors for the interior of the polygon are interpolated) 2559 SB
384 1075 2333 (between the vertex colors. This is the behaviour we want to see when dealing with data visualization.) 2333 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 1259 CB
1460 7 265 1275 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 1353 275 (Lighting) 275 SB
/fm 256 def
264 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1430 M -15 0 0 -7 15 0 0 7 4 PP
1 F
n
/fm 256 def
433 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
475 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
517 1430 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1513 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1518 2390 (In the real world when we view a surface and its color, we are actually seeing the distribution of photon) 2390 SB
384 1587 2488 (energies that arrive at your eye and trigger your cone cells.  Those photons come from various light sources,) 2488 SB
384 1656 1415 (some of which are absorbed and some of which are reflected.) 1415 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1773 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1778 2483 (OpenGL approximates light and lighting as if light can be broken into red, green, and blue components. The) 2483 SB
384 1847 2465 (color of light sources is characterized by the amount of red, green, and blue light they emit. The material of) 2465 SB
384 1916 2528 (surfaces is characterized by the percentage of the incoming red, green, and blue components that are reflected) 2528 SB
384 1985 482 (in various directions.) 482 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 42 42
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (42) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 277 1155 (Emitted, Ambient, Diffuse, and Specular Light) 1155 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 492 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 497 2188 (Emitted light is the simplest, it originates from an object and is unaffected by any light sources.) 2188 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 614 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 619 104 (The ) 104 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
488 620 187 (ambient) 187 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
675 619 2229 ( component is the light from that source that's been scattered so much by the environment that its) 2229 SB
384 688 2397 (direction is impossible to determine. When ambient light strikes a surface it is scattered in all directions.) 2397 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 805 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
384 811 168 (Diffuse) 168 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
552 810 2360 ( light comes from one direction, so it is brighter if it comes down squarely on the surface rather than at) 2360 SB
384 879 1663 (an angle.  Any light coming from any direction has a diffuse component.) 1663 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 996 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1001 2418 (Specular light comes from a direction and bounces off a surface in a particular direction. Shiny metal and) 2418 SB
384 1070 2559 (plastic have a high specular component and chalk and carpet have almost none. You can think of specularity as) 2559 SB
384 1139 224 (shininess.) 224 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1343 395 (Material Colors) 395 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1473 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1478 2575 (Material colors control the amount of red, green, and/or blue components that are reflected off a surface. If only) 2575 SB
384 1547 2349 (the red component is specified for a surfaces then when a white light is pointed at that surface, the red) 2349 SB
384 1616 2545 (component is reflected and the green and blue component is absorbed. If a pure red light is used, the surface is) 2545 SB
384 1685 2364 (still red. If a green or blue light is used the surface is black because the green and blue components are) 2364 SB
384 1754 225 (absorbed.) 225 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 43 43
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (43) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 574 (Creating Light Sources) 574 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2579 (Light sources are created with a number of different properties to control their color and source type. to create a) 2579 SB
384 431 209 (light use:) 209 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
264 599 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
364 598 155 (glLight) 155 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
519 599 337 ({if}[v]\(GLenum ) 337 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
856 599 92 (light) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
948 599 114 (, GLe) 114 SB
1062 599 49 (nu) 49 SB
1111 599 50 (m ) 50 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1161 599 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1294 599 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1459 599 130 (param) 130 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1589 599 30 (\);) 30 SB
378 671 634 (This creates a light specified by ) 634 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1012 671 92 (light) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1104 671 166 ( which c) 166 SB
1270 671 22 (a) 22 SB
1292 671 1636 (n be GL_LIGHT0, GL_LIGHT1.., or GL_LIGHT7. The characteristic of the light) 1636 SB
378 730 451 (being set is defined by ) 451 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
829 730 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
962 730 1810 ( which specifies a named parameter. The param argument indicates the values to which the ) 1810 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2772 730 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
378 789 2494 (characteristic is set. It is a pointer to a group of values if the vector value is used, or the value itself if the nonvector version is) 2494 SB
378 848 104 (used.) 104 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 264 1022 CB
1460 7 265 1038 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
264 1116 564 (Texture Mapping) 564 SB
/fm 256 def
264 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
306 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
348 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
390 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
432 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
474 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
516 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
558 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
600 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
642 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
684 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
726 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
768 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
810 1193 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 58 58 0 0 0 58 /Symbol font
324 1276 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1281 2518 (Texture maps are simply bitmaps that are pasted onto a surface. The bitmap can be any image, like a scanned) 2518 SB
384 1350 2444 (image of a brick wall or a concrete surface or maybe a sunset. When you paste a texture on a polygon, the) 2444 SB
384 1419 2575 (system ensures that all the transformations applied to the underlying geometry are also performed to the bitmap.) 2575 SB
384 1488 2555 (Textures can also be applied to all the other geometric primitives: points, lines, polygons, bitmaps, and images.) 2555 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1605 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1610 2464 (Textures are simply rectangular arrays of data, the individual values in a texture array are sometimes called) 2464 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
384 1680 133 (texels) 133 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
517 1679 2247 (.. Our job is to tell OpenGL how to orient the geometric primitive in the rectangular texture array.) 2247 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 44 44
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (44) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 482 (Specify the Texture) 482 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2358 (The texture is a single image and is usually thought of as being two dimensional, but it can also be one) 2358 SB
384 431 2386 (dimensional. The data describing the texture map ca be one, two, three, or four values per texel, usually) 2386 SB
384 500 1101 (representing the RGBA quadruple for the color.) 1101 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 617 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 622 2571 (Using an advanced method called mipmapping, you can specify a single a single texture in different resolutions,) 2571 SB
384 691 2498 (this allows you to avoid mapping a full resolution texture map on a wall that is far in the distance. This is the) 2498 SB
384 760 2514 (idea of level of detail based on a distance from an observer, why not draw the least costly texture that will do) 2514 SB
384 829 174 (the job.) 174 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1033 1324 (Indicate how the texture is to be applied to Each Pixel) 1324 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1163 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1168 2524 (There are three different choices you have in applying the texture map to the geometric primitive. First you ca) 2524 SB
384 1237 1474 (simply specify the texel value as the final pixel color, this is the ) 1474 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1858 1238 126 (decal) 126 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1984 1237 922 ( mode in which the texture is painted on) 922 SB
384 1306 2559 (the surface. Next you could use the texture to modulate or scale the fragments color. This technique is useful in) 2559 SB
384 1375 2536 (combining the effects of lighting and texturing. Finally you could specify that a constant color be blended with) 2536 SB
384 1444 999 (that of the fragment based on texture value.) 999 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 1648 673 (Enabling Texture Mapping) 673 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 1778 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 1783 2363 (You need to enable texture mapping before drawing your scene. Texturing is enabled or disables using) 2363 SB
384 1852 2579 (glEnable\(\) or glDisable\(\) with the symbolic constant GL_TEXTURE_1D or GL_TEXTURE_2D for one or two) 2579 SB
384 1921 584 (dimensional respectively.) 584 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 45 45
%%PageResources: (atend)
SS
0 90 25 12 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
264 33 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1901 33 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1544 2150 97 (Page ) 97 SB
1641 2150 42 (45) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
264 227 1680 (Draw the Scene Supplying both Texture and Geometric Coordinates) 1680 SB
32 0 0 58 58 0 0 0 58 /Symbol font
324 357 42 (\267 ) 60 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
384 362 2439 (You need to specify how the texture is to be aligned relative to the geometric fragments to which it's to be) 2439 SB
384 431 2546 (applied before it is glued on. If you want to paste an image of bricks onto a square, you would probably assign) 2546 SB
384 500 2572 (texture coordinates \(0,0\), \(1,0\), \(1,1\), and \(0,1\) to the four corners of the wall. If the wall is large you may want) 2572 SB
384 569 2511 (to specify several copies of the texture to cover the whole wall, in this case the texture should be designed so) 2511 SB
384 638 2449 (that the bricks on the right side of the image blend nicely with the bricks on the right side of the image and) 2449 SB
384 707 779 (similarly with the top and bottom.) 779 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 45
% TrueType font name key:
%    MSTT31c0f4 = 316fDTimes New RomanF0000002a000001900000
%    MSTT31c101 = 39ffDTimes New RomanF00000032000001900000
%    MSTT31c10e = 39ffDTimes New RomanF0000004b000002bc0000
%    MSTT31c11b = 39ffDTimes New RomanF0000005c000002bc0000
%    MSTT31c128 = 39ffDSymbolF00000032000001900000
%    MSTT31c133 = 39ffDTimes New RomanF00000032000001900001
%    MSTT31c140 = 39ffDTimes New RomanF0000002a000001900001
%    MSTT31c14d = 39ffDTimes New RomanF0000003a000002bc0000
%    MSTT31c15a = 39ffDSymbolF00000032000002bc0000
%    MSTT31c165 = 39ffDTimes New RomanF00000032000002bc0000
%    MSTT31c172 = 39ffDTimes New RomanF0000003a000001900000
%    MSTT31c17f = 39ffDTimes New RomanF0000004b000001900000
%    MSTT31c18c = 39ffDTimes New RomanF00000032000002bc0001
%    MSTT31c199 = 39ffDCourier NewF0000002a000001900000
%    MSTT31c1a5 = 4377DTimes New RomanF00000032000001900000
%    MSTT31c1b2 = 4377DTimes New RomanF0000004b000002bc0000
%    MSTT31c1bf = 4377DTimes New RomanF0000005c000002bc0000
%    MSTT31c1cc = 4377DSymbolF00000032000001900000
%    MSTT31c1d7 = 4377DTimes New RomanF00000032000001900001
%    MSTT31c1e4 = 4377DTimes New RomanF0000002a000001900001
%    MSTT31c1f1 = 4377DTimes New RomanF0000003a000002bc0000
%    MSTT31c1fe = 4377DSymbolF00000032000002bc0000
%    MSTT31c209 = 4377DTimes New RomanF00000032000002bc0000
%    MSTT31c216 = 4377DTimes New RomanF0000003a000001900000
%    MSTT31c223 = 4377DTimes New RomanF0000004b000001900000
%    MSTT31c230 = 4377DTimes New RomanF00000032000002bc0001
%    MSTT31c23d = 4377DCourier NewF0000002a000001900000
%    MSTT31c249 = 4377DCourier NewF00000021000001900000
%    MSTT31c255 = 4377DSymbolF0000002a000001900000
%    MSTT31c264 = 4377DTimes New RomanF00000010000001900000
%    MSTT31c271 = 4377DTimes New RomanF00000000000001900000
%    MSTT31c27e = 4377DTimes New RomanF0000001d000002bc0000
%    MSTT31c295 = 52cfDTimes New RomanF00000032000001900000
%    MSTT31c2aa = 4297DTimes New RomanF0000003a000001900000
%    MSTT31c2b7 = 43c7DTimes New RomanF0000003a000001900000
%    MSTT31c2c4 = 400fDSymbolF0000003a000001900000
%    MSTT31c2cf = 400fDSymbolF0000003a000002bc0000
%    MSTT31c2da = 400fDTimes New RomanF0000003a000001900001
%    MSTT31c2e7 = 400fDCourier NewF0000002a000001900000
%    MSTT31c2f3 = 400fDTimes New RomanF00000032000002bc0000
%    MSTT31c300 = 400fDTimes New RomanF00000032000002bc0001
%    MSTT31c30d = 400fDTimes New RomanF00000032000001900001
%    MSTT31c31a = 400fDSymbolF0000002a000001900000
%    MSTT31c325 = 400fDTimes New RomanF0000004b000002bc0000
%    MSTT31c332 = 400fDTimes New RomanF0000003a000002bc0000
%    MSTT31c33f = 400fDTimes New RomanF0000003a000001900000
%    MSTT31c34c = 400fDTimes New RomanF0000005c000002bc0000
%    MSTT31c359 = 400fDSymbolF00000032000001900000
%    MSTT31c364 = 400fDTimes New RomanF00000032000001900000
%    MSTT31c371 = 400fDTimes New RomanF0000002a000002bc0001
%    MSTT31c37e = 400fDTimes New RomanF0000004b000001900000
%    MSTT31c38b = 400fDCourier NewF00000021000001900000
%    MSTT31c397 = 32afDTimes New RomanF0000005c000002bc0000
%    MSTT31c3a4 = 32afDTimes New RomanF00000032000001900001
%    MSTT31c3b1 = 32afDTimes New RomanF00000032000001900000
%    MSTT31c3be = 32afDTimes New RomanF0000002a000001900001
%    MSTT31c3cb = 32afDTimes New RomanF00000010000001900000
%    MSTT31c3d8 = 32afDTimes New RomanF0000004b000002bc0000
%    MSTT31c3e5 = 32afDTimes New RomanF00000000000001900000
%    MSTT31c3f2 = 32afDSymbolF00000032000001900000
%    MSTT31c3fd = 32afDTimes New RomanF0000001d000002bc0000
%    MSTT31c40a = 32afDSymbolF0000003a000001900000
%    MSTT31c415 = 32afDTimes New RomanF0000003a000001900000
%    MSTT31c422 = 32afDTimes New RomanF0000003a000002bc0000
%    MSTT31c42f = 32afDSymbolF0000003a000002bc0000
%    MSTT31c43a = 32afDTimes New RomanF0000004b000001900000
%    MSTT31c447 = 32afDCourier NewF0000002a000001900000
%    MSTT31c453 = 32afDTimes New RomanF00000032000002bc0001
%    MSTT31c460 = 32afDTimes New RomanF0000003a000001900001
%    MSTT31c46d = 32afDTimes New RomanF00000032000002bc0000
%    MSTT31c47a = 32afDCourier NewF00000021000001900000
%    MSTT31c486 = 32afDSymbolF0000002a000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
