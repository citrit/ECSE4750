%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - LEC1.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - LEC1.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (1) 21 SB
0 lc
0 lj
0 0 0 pC
6 4 SP
206 206 206 fC
/fm 256 def
gs 1845 40 439 309 CB
1841 5 441 326 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
439 403 1718 (Advanced Computer Graphics and Data Visualization) 1718 SB
206 206 206 fC
/fm 256 def
gs 1845 40 439 545 CB
1841 5 441 562 B
1 F
S
n
gr
32 0 0 92 92 0 0 0 84 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 773 1230 (Section 1:  The OpenGL Model) 1230 SB
/bytestr 73 string def
/pp 1 string def/s 1 string def/rn{currentfile s readhexstring{0 get}{pop
exit}ifelse}def/unpack{/DC 0 def/BC 0 def{DC bytestr length ge{exit}if
rn/BC exch def BC 127 le{/BC BC 1 add def DC 1 DC BC add 1 sub{bytestr
exch rn put}for}{/BC BC 255 xor 2 add def rn/pp exch def DC 1 DC BC
add 1 sub{bytestr exch pp put}for}ifelse/DC DC BC add def}loop bytestr}bd
gs 172 212 225 290 CB
save 225 290 translate 172 212 scale
73 90 8
[73 0 0 -90 0 90]
{unpack} bind
image
ccff010506ff07010908ff07ff05f7ff
d9ff03090aff07fdff0007ff0a010b0cff0dfd0e020d0b09ff070005f9ff
e2ff0006fbfffe0c000dff0bff0aff0cfd0e010f10fe18081918170e150b070506faff
e7fffe0e080f0e0b090b0cff090bff0c000dff0c000bff0e000fff10010f10fe180a1a191a21192018160e0906ff05fbff
e9ff010e0fff10030f100f10fc0e000dff0c030d0e0f10fe11011918fd19021a1b21ff220923221817160b07050605fcff
eaff02101213ff1202111011ff10000fff0e010d0aff0e011011ff12fc1a0019ff1a04211a1f2322fe1f072117160c07060506fcff
ecff000efc13011a13ff1101100fff0e040d0e0f1112ff13001afc1b071a211a19201a211aff21001aff20ff16020a0706ff05fcff
edff0010ff131014131b14131a12110f0e0c0e101112131afe1b001cfe2302221b21fe1902181920ff2105201a1f160e11ff06010506fcff
eeff011213ff14001bff14031a121110ff0e0010ff12031413141bff1c012324ff2305242a24232119fd18011920fd210618160a06050605fcff
eeff0013fc1402131211fe0f0012ff1406151c1d1c1d1c1dfc24052b231f231918ff16030f171821fd2a021f1607ff050006fcff
efff011213fd14011a12fe10041214151c16ff1d051e251e252425ff24ff2b0024ff2305211918171615ff1601201ffe33ff1f0314070605fcff
f0ff0011ff13ff14001aff12071112131415161d16fd1eff26042e26252c2bff24012a24ff230321191716ff0d0b1416212a333a3121160c0805fcff
f1ff011012ff1302141314ff13ff14021d161efe16ff1eff26fc2e132d2c2b232b2a231f221917160e0b0c1317201f32ff1f041e150b0706fdff
f1ff011113fb14ff15051d161e161d16ff1efe26002efd35022e2d25ff2b0e242a221a1917160d0c0b0a0c151617ff160013ff0b010905fdff
f2ff02111314fc15011c16fc1eff16ff1eff26ff2e01353efd35022d2c24ff2a0b23201817160e0d130b0c0d0eff16010e09ff07ff06fdff
f3ff02101314fe1501161cff15fc1eff16021d1e1ffd2eff35ff3efe350034ff2b04221f211817ff16000efe0d011617ff18021f1507ff060005fdff
f3ff05121314151615ff1401151dfc1e02161d16ff1e012e26ff2e01353efd380646352d2b2a2322ff1709160e150e150e16201f2aff1f011506ff05fdff
f4ff02101314ff150516131113151dfc1e03161e161efe26ff2e01353efb380f4635332a1f1a1716150e140d161f211fff32042e18130506fdff
f4ff0912131415161311131c1dfa1eff16ff1e0026fd2efe38005bfc38073d321f2217160d14ff0c02151e1fff320039ff1f011506ff05feff
f4ff011214ff15020e141cfc1dfc1e02161d16ff26ff2eff35ff38005bfb38013d2bfe1f0a160d0c120b0d1d20313a39ff1f0316070506feff
f5ff011113ff14020f1c1eff26021e251dfb1eff16041d1e272e3eff46ff38045b385b385bff3801452aff1f011716ff0c040a0912151fff320031ff1f0312070605feff
f5ff011213ff0e071c2627353e352726fa1eff16031e263e46fe38045b385b385bfe38153e312a1f1816140c0907090c1e2e33312a1e13070506feff
f6ff0b111211191b262e353e383726fd1e0026ff1e07171d161f2e3e385bff38095b386e385b385b383d32fe1f03160e130aff0703111d1f32fe1f0315080605feff
f7ff02101219ff2602353738ff62026e3e26ff1e0025fd1e001dff160c262e46385b385b386e386e386eff380845311f2a1f17150d0bff0702131f33fe1f0220180dff05feff
f7ff041112333862fc6e03543c1516fb1eff16031d1f3538ff5b0038fb5bfe380043ff2afe1f1016150d0907132e463e21130e18100e0c07ffff
f8ff07100e2444626e7077ff7e0477623e151dfb1eff16031e1f3e38ff5b04386e386e62fe5b043845322b2eff1f0020ff1605140b0911595bff38013e11ff0e0416151307ff
f8ffff05032e335362fd77037e381c15ff1eff26fe1e09161d162735386e5b625bff62025b625bff380343312e2aff1f0021ff160815140b14386e385b38ff3e05353e3b1f0b06
f9ff0011ff0508063c3a386e5b385b53ff13021d1e27ff280026fe1e0a161e2635386e5b625b626eff5b06385b443a322a32fe1f01201efe16021f4062ff5b01385bfe3803451f1d07
faff02100506ff050c342a312c251e242c11141e2726ff2e0028fd1e031f27465bff6eff62026e5b62ff5bff38023c312efc1fff20031f1e1f38ff62095b6e626e625b43311f07
fbff011013ff050806052c21181b1c1614ff13021c1f26ff2e02262826fe1e041f2e46386efd62ff5b0062ff38003cfe310021fe1f013120ff1f02324438ff5b0062ff6eff62ff3802311406
fcff01111cff050006ff05042c1b191113ff14021c161efc2e0229281fff1e021f2e38fe6efe62ff5bff38054432312a1f31fd1f03313a3b43fe380a6e626e626e3843311f1106
fdff040f2c360506ff050406362c1c1aff15011d1eff260d28262e262e262e29271f272e5b6efe62025b385bfe38033b312e2afc1f07313a44385b38625bff6e08626e5b383b1f1d07ff
feff040e25693e06ff05010605ff3e052e1d141e2628fb2e0026ff2e0526281f273538ff6eff6201385bfe380243322afe1f0920171e1f3a42385b3862ff5bff62086e5b38421f1e0a05ff
feff0334776944ff0502060506ff46032e251e1ffe2e02292e28ff2eff35ff2e07292728355b6e625bfe380643423a33322e23ff1f001eff16031e313862fe5bfd62066e3845311e1207ffff
ffff031362604cff050006fe0504363d261d1eff2e0335262e28ff2efd35072e28272e465b6e62ff5b093a32313a333a2e2a1f20ff1603150c1631ff5bff62025b625bff62ff3804442e160705ffff
ffff04273c3a2306ff050406051c2d25ff1e0027fe35ff2e01292efe35063e352e29283538ff6e0062ff5b073c2a201f2b2a211ffe16050d0b12143738fd6efd5b04383c2e1f08ff05ffff
04ff10362b1aff130006ff05070613151d1e272e3efe35fd2eff3e014635ff2e02293538fe6e045b62383d20ff19062117160c130c0bff08030b1e3162fe6efe5bff3802331f11ff060005ffff
11ff1014180f11130506050e14253c282e373efe350d2e352e353e463846352e35465b62ff6e045b62384623ff1902180e0bfe080011ff070305133762fe6eff5b05383c2e211407ff050006ffff
ffff0011fe0f07110507091d3c5b62f935002eff35003efe3804462e353862fe6eff62085b3846352e2d190d09fc070306112e5bfe6e0054ff38073a20140705070605ffff
ffff000fff0e0010ff140305061156ff2e0235373ef9350046fe380446353e3862ff6e01626eff62005bfd380335211408fc060c071d3a38625b3844311f161105ff07ff05ffff
ffff000bfe0d0216131fff070311292e35ff37fc35ff3eff4608385b38462e3e386e62ff6eff62036e5b385bfe38023e1f14ff06ff0504060512182dff4206332e2116120506ff070006feff
feff05090b0e16141ffb2eff37fd3eff46fe38005bff3806462e46386e626eff62026e626efd5b07385b3d1f16070506ff0502080e1fff21012e1fff150011ff0502070605feff
fdff010a12ff150027fe46ff3efd46fa38005bfe38073e2e3e386e626e5bfe6eff62015b6efe5b04383d1f1607ff05030605090cff140416150b0a07ff0502060506feff
fcffff14091d375b62543854385b54fc38005bfe38075b54463e3546386eff62025b6e62ff6e035b626e62ff5bff38043d1f140807ff050006fe07ff0a0608070506050605fdff
fcff0413141c3e69ff70005bff62ff6e02546e62ff5b03385b3854fe38044635385b6efe5b0062ff6efd62006efe5b0838441f1e140a080706ff05ff0602080706fc05fdff
fdff0012ff1308194670776e625b776eff62ff6e07626e625b385b385bfe460038ff62045b545b626efd62016e62ff5bff380644311f1e161309ff070306050605ff06040506050605fdff
fdff06131214162e3869ff54075b6e625b38463e38fe6eff5b013854fe38025b386efe5bff62026e5b6efd62065b385b44322a1fff16000dff0a010806fe050006ff05010605fcff
feff02111214fe16013646ff3e02386e62fd38043626445161ff6e016254fe38075b625b385b626e5bfe62045b625b3862ff3805442e211f1614ff0c040a07060506ff050006ff05fcff
feffff130015ff16011e1fff2e023e3862fe6e0c777e5b2e1d1323596e38706238ff6e01776eff5b006efd62006eff62013862fe38033c31201fff16030c130b09ff06ff050006ff050006fcff
ffff0011ff15ff16011e17ff20013738ff6efe770c7e776e463e352d13393c435962ff7701867eff70037e70625bfe62013862fe3804443331201eff16ff0c050b0907060506ff05010605fcff
ffff02141615ff160b1e2720272e546e777e77706eff5b01385bff380746261c131a395338fb77117e6e626e5b625b385b45413a2e23171e1614fe0a02080706ff0502060506fcff
ffff05141315161e1fff280329375470ff77ff70006eff380054ff5b0054ff3809372e26241a1639556e53fc77006eff6201385bff380444392b2e19ff16000dfe0a040907060506fd05fdff
0cff12161416171e2827202e3862ff6e01626eff38085446385b54385b385bfe460045fe3d052d3538867770fe6eff62075b38544339312e18ff1603140b0809ff080007fe0502060506fdff
07ff131615161e1f27ff1f012e38ff62016e54ff380546385b46385bfd38045b5462706eff77fe38011256fe6e0070ff6e0c5b54385443322a1f16150e0b08fd07ff06ff05010605fdff
01ff14fe16021e1726ff1f06375b543854463eff46045438463854fe38ff54025b6277ff7eff77ff7e02773833ff38ff5bff6e015b54ff3807432e19160e160c09ff07ff060005ff06fe05fdff
0011ff15fe160b1e171f274638543e372e3738fe5b023e3854fe38005bff62ff6e0070fe77fe86007efe3803332e386eff620a5b5444322e160e140c0a07ff06010506ff0502060506fdff
0013ff15fe16061e17262e3e463eff37043e465b625bff38ff5bff54025b6277fa7e0077ff86ff77006eff38044633424554fe380a442a200d150e1307060506ff050306050605fdff
011315fe16ff1e021f2737fe3e0d373e46545b625b5446386e626e77fc86fa77037e776e62ff3803461f2e36ff44043d42322e17ff16020d0b07fe050006fd05fdff
0013fd16ff1f0327373e37fd4603385b626eff5b013862fe77f986047786777e77ff6e016254ff380f54442b20161a2e3b3331201617161408ff06ff0502060506fcff
0013fe160017ff1f06292e372846385bff5403626e7062ff5b016277f686ff77007eff6eff620053fd38013521ff170a0c122e1b1f201e1f160c07ff06ff05010605fcff
0013fe16031727202eff370430465b695bff6202777e77ff70007ef586ff77ff6e005bff62fd540a3b2e21181f18212a101718ff1f03160e0a07ff06fe05fcff
0012fe16031e28202eff37062e54707e77626eff77018677f48601777eff6e035b545354fe5b0338432e21ff1f0520211f160a0efe1606140b0907050605fbff
0012fe160d1828272e3e2e375b7e77865b6e7ef186037e776e62ff5bff54045b54384531fe200721201e0f0d09070bff0dff0c020a0706ff05fbff
0012fe16081f2721283e2e3e6277ff8603776e7e77f486ff77037e706e62fe5b0054ff380f3c2e1a2a31212e2116150a0706070d0aff0bff0aff06faff
0012fe16071f2027283e2e4d6efd860077f386ff77037e776e62fc5b043844312031ff430b322a28160d070605080d100cff0b020a0705faff
02111516ff1702252830ff3e02467077fc86ff77f686fe77ff6efe62015b54ff380a3b2a3a445438442e211609ff0709060507060a080a090705faff
04ff1416171eff280037ff3e0338777e77fd8601777ef886fd7702706e62ff5bfe3805453a2a313862ff380344301615fe070806050607090e090706f9ff
01ff13ff16091f292f37465469777e77fc86ff7e0077fb8604777e77706efe62055b5344433a32ff2a0b425b6254433a28160a060907ff05050605ff070a07f8ff
01ff10ff16001fff30063e545b6e5b6e77fc86027e867eff860077ff8603777e706efd62ff5b0854433a3329323b5b54ff38034c311f15fe0702050605f2ff
ffffff16041f28293738ff6902625470fc86fd7e06867e867e77706eff62005bfe54ff3812463a333a4c545b385443322017090506050605f1ff
ffff02141617ff2807274d5b625b627077fd860077fe70fe7eff77006eff5b0654385b38544543ff3c013b4bfe54054c433a281e0cff06010506ff05f1ff
feff01151eff1f0820465b543870777e77ff86017e77ff70016970ff7701706eff62005bff54005bfd540f4443444c38544c4b3a30180d07060506ff05f0ff
feff011316ff1e011f37fe460038ff77fe7e0070ff6e03625b626efe69ff62015b54fb5bff540c4c4b444b434229201307060506ff05efff
feff011213ff16021d1e2eff3702546e70fe77006efe620a54465b626e625b3854385bff54ff5b036054534bfe43033a29200dff06010506ff05eeff
feff0a1116151b161d1e272e3e38ff62ff700069fe5b0054ff460354385445fd44033c4b4d4cfe440043ff3b032a20170cfe050006ff05edff
fdfffe160027ff160427261d2e3eff4d02386269fe621054464d3e3d35333c3d3b332b23222a3334ff3b073120160a05060506ff05ecff
fdff0014ff16053627172e372eff1d0b263646545b6270776e5b384dff3eff3d0e44342a2118222a342b2c3121170b05ff06ff05eaff
fdff000dff160d3e451e20464d452c1d1e2e465b69fe700b6e625b5438544d4432211832ff3c052c2220170e08ff06fe05e9ff
fcff030e152e54ff1f004cff5b083d3c262f3646386269ff62ff5b074d544d3d332a2033ff4c0a3b2a180e0b060706050605e8ff
fbff0512141f241f3eff5b0a45534d28363d4445464d45fe44023c3432ff22082b443c332a200f0706ff070006ff05e7ff
faff0b11121e151e2e454d5b54462eff3404363e363d3cff340a2b22232b333c322a21190fff06ff07fe05e6ff
f9ff14101213141d253d4654463e32242c2e363e3d3b3433ff2c05333429211f10fe07ff06ff05e4ff
f8ff000fff110312142d36ff3e053423222b2d2eff3dff3c0834353b2b21180f0c05fe070006ff05e3ff
f7ff000efe100b131c1e2e2428222c351e2d34ff3308343221100f0b060709ff07ff05e1ff
f5ff05090d0e101214ff1b0722343d351c1b1a19ff0f060e0d06090b0a07fe05e0ff
f3ff16060a0b0e0f11222b33291f0f0e0d0b0a0c080a0b0a0705ddff
f3ff0e070f130708090e1617160c0b090b0cff0e030b090705dbff
f1ff060b0e13110d0b0dfe0bff0aff0c010a07d8ff
efff010b0dff0e030c090705ffff010607d6ff
edff010709ceff
restore
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Italic
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (2) 21 SB
32 0 0 92 92 0 0 0 84 /Times-Bold /font29 ANSIFont font
225 221 61 (T) 53 SB
278 221 641 (able of Contents) 641 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 363 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 368 358 (What is OpenGL?) 358 SB
0 0 255 fC
/fm 256 def
357 1 402 418 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 450 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 455 366 (A simple example:) 366 SB
/fm 256 def
365 1 402 505 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 537 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 542 553 (OpenGL Command Syntax:) 553 SB
/fm 256 def
552 1 402 592 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 624 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 629 886 (Command suffixes maping to ANSI C types:) 886 SB
/fm 256 def
885 1 402 679 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 711 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 716 560 (OpenGL as a State Machine) 560 SB
/fm 256 def
559 1 402 766 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 798 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 803 1032 (The OpenGL Programming Guide Auxiliary Library) 1032 SB
/fm 256 def
1031 1 402 853 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 885 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 890 439 (Window Management) 439 SB
/fm 256 def
438 1 462 940 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 972 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 977 447 (Handling Input Events) 447 SB
/fm 256 def
446 1 462 1027 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1059 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1064 426 (Drawing 3-D Objects) 426 SB
/fm 256 def
425 1 462 1114 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1146 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1151 656 (Managing a Background Process) 656 SB
/fm 256 def
655 1 462 1201 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1233 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1238 426 (Running the Program) 426 SB
/fm 256 def
425 1 462 1288 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 1320 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 1325 388 (Compilling on RCS) 388 SB
/fm 256 def
387 1 402 1375 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 1407 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 1412 207 (Animation) 207 SB
/fm 256 def
206 1 402 1462 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 1494 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 1499 557 (Drawing Geometric Objects) 557 SB
/fm 256 def
556 1 402 1549 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1581 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1586 423 (Clearing the Window) 423 SB
/fm 256 def
422 1 462 1636 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1668 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1673 370 (Specifying a Color) 370 SB
/fm 256 def
369 1 462 1723 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1755 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1760 637 (Forcing Completion of Drawing) 637 SB
/fm 256 def
636 1 462 1810 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 1842 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 1847 554 (Drawing Graphic Primitives) 554 SB
/fm 256 def
553 1 402 1897 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 1929 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 1934 846 (Restriction on using glBegin\(\) and glEnd\(\)) 846 SB
/fm 256 def
845 1 462 1984 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 2016 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 2021 773 (Displaying Points, Lines, and Polygons) 773 SB
/fm 256 def
772 1 462 2071 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2103 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2108 315 (Polygon Details) 315 SB
/fm 256 def
314 1 402 2158 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
402 2190 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
462 2195 320 (Normal Vectors) 320 SB
/fm 256 def
319 1 462 2245 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2277 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2282 167 (Viewing) 167 SB
/fm 256 def
166 1 402 2332 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2364 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2369 257 (Display Lists) 257 SB
/fm 256 def
256 1 402 2419 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2451 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2456 346 (The Color Model) 346 SB
/fm 256 def
345 1 402 2506 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2538 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2543 167 (Lighting) 167 SB
/fm 256 def
166 1 402 2593 B
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
0 0 0 fC
342 2625 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 255 fC
402 2630 346 (Texture Mapping) 346 SB
/fm 256 def
345 1 402 2680 B
1 F
n
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (3) 21 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1410 40 225 370 CB
1408 7 226 386 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 464 584 (What is OpenGL?) 584 SB
/fm 256 def
225 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 541 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 624 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 629 1815 (OpenGL is a software interface to 3D and 2D graphics routines. OpenGL can be used as an) 1815 SB
345 688 1591 (interface to graphics hardware or in some instances, be a software only solution.) 1591 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 795 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 800 1830 (This interface consists of about 120 distinct commands, which you use to specify the objects) 1830 SB
345 859 1521 (and operations needed to produce interactive three-dimensional applications.) 1521 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 966 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 971 1802 (OpenGL is designed to work efficiently even if the computer that displays the graphics you) 1802 SB
345 1030 1152 (create isn't the computer that runs your graphics program.) 1152 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 1112 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
402 1117 1711 (This might be the case if you work in a networked computer environment where many) 1711 SB
402 1176 1752 (computers are connected to one another by wires capable of carrying digital data. In this) 1752 SB
402 1235 1610 (situation, the computer on which your program runs and issues OpenGL drawing) 1610 SB
402 1294 1641 (commands is called the client, and the computer that receives those commands and) 1641 SB
402 1353 1561 (performs the drawing is called the server. The format for transmitting OpenGL) 1561 SB
402 1412 1643 (commands \(called the protocol\) from the client to the server is always the same, so) 1643 SB
402 1471 1747 (OpenGL programs can work across a  network even if the client and server are different) 1747 SB
402 1530 1722 (kinds of computers. If an OpenGL program isn't running across a network, then there's) 1722 SB
402 1589 1154 (only one computer, and it is both the client and the server.) 1154 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1696 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1701 1827 (OpenGL is designed as a streamlined, hardware-independent interface to be implemented on) 1827 SB
345 1760 698 (many different hardware platforms.) 698 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 1842 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
402 1847 524 (To achieve these qualities:) 524 SB
32 0 0 50 50 0 0 0 50 /Symbol font
402 1929 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
462 1934 1703 (No commands for performing windowing tasks or obtaining user input are included in) 1703 SB
462 1993 186 (OpenGL.) 186 SB
32 0 0 50 50 0 0 0 50 /Symbol font
402 2075 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
462 2080 1706 (You must work through whatever windowing system controls the particular hardware) 1706 SB
462 2139 252 (you're using.) 252 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2246 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2251 1652 (With OpenGL, you must build up your desired model from a small set of geometric) 1652 SB
345 2310 1761 (primitive points, lines, and polygons. \(A sophisticated library that provides these features) 1761 SB
345 2369 1511 (could certainly be built on top of OpenGL, we will investigate this in detail\).) 1511 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (4) 21 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 641 (How does OpenGL work?) 641 SB
32 0 0 50 50 0 0 0 50 /Symbol font
286 459 23 (\267) 24 SB
310 459 13 ( ) 36 SB
285 459 23 (\267) 24 SB
309 459 13 ( ) 36 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 464 1750 (Here is the order in which OpenGL performs the major graphics operations necessary to) 1750 SB
345 523 606 (render an image on the screen.) 606 SB
342 607 51 (1. ) 60 SB
402 607 1738 (Construct shapes from geometric primitives, thereby creating mathematical descriptions) 1738 SB
402 666 1604 (of objects. \(OpenGL considers points, lines, polygons, images, and bitmaps to be) 1604 SB
402 725 225 (primitives.\)) 225 SB
342 809 51 (2. ) 60 SB
402 809 1717 (Arrange the objects in three-dimensional space and select the desired vantage point for) 1717 SB
402 868 579 (viewing the composed scene.) 579 SB
342 952 51 (3. ) 60 SB
402 952 1626 (Calculate the color of all the objects. The color might be explicitly assigned by the) 1626 SB
402 1011 1641 (application, determined from specified lighting conditions, or obtained by pasting a) 1641 SB
402 1070 484 (texture onto the objects.) 484 SB
342 1154 51 (4. ) 60 SB
402 1154 1766 (Convert the mathematical description of objects and their associated color information to) 1766 SB
402 1213 1108 (pixels on the screen. This process is called rasterization.) 1108 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1320 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1325 1789 (During these stages, OpenGL might perform other operations, such as eliminating parts of) 1789 SB
345 1384 1713 (objects that are hidden by other objects \(the hidden parts won't be drawn, which might) 1713 SB
345 1443 1810 (increase performance\). In addition, after the scene is rasterized but just before it's drawn on) 1810 SB
345 1502 1139 (the screen, you can manipulate the pixel data if you want.) 1139 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1696 451 (Some basic terms:) 451 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1876 204 (Rendering) 204 SB
339 1948 1486 (Conversion of primitives specified in object co-ordinates to an image in the) 1486 SB
339 2007 1267 (framebuffer. Rendering is the primary operation of OpenGL, it's) 1267 SB
339 2066 401 (what OpenGL does.) 401 SB
225 2223 165 (Bitplane) 165 SB
339 2295 1163 (A rectangular array of bits mapped one-to-one with pixels.) 1163 SB
225 2452 243 (Framebuffer) 243 SB
339 2524 1769 (All the buffers of a given window or context. Sometimes includes all the pixel memory of) 1769 SB
339 2583 1559 (the graphics hardware accelerator. The framebuffer is also a stack of bitplanes.) 1559 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (5) 21 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
225 318 586 (A simple example:) 586 SB
0 0 0 fC
/fm 256 def
225 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 478 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 483 1651 (Because you can do so many things with the OpenGL graphics system, an OpenGL) 1651 SB
345 542 1702 (program can be complicated. However, the basic structure of a useful program can be) 1702 SB
345 601 1719 (simple: Its tasks are to initialise certain states that control how OpenGL renders and to) 1719 SB
345 660 604 (specify objects to be rendered.) 604 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 767 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 772 173 (Example) 173 SB
518 772 1466 ( 1-1  renders a white rectangle on a black background, as shown in Figure) 1466 SB
1984 772 106 ( 1-1 .) 106 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 920 875 (Example 1-1: A simple OpenGL Program.) 875 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
225 1003 700 (#include <whateverYouNeed.h>) 700 SB
225 1074 200 (main\(\) {) 200 SB
225 1145 50 (  ) 50 SB
275 1145 575 (   OpenAWindowPlease\(\);) 575 SB
225 1216 50 (  ) 50 SB
275 1216 900 (   glClearColor\(0.0, 0.0, 0.0, 0.0\);) 900 SB
225 1287 50 (  ) 50 SB
275 1287 800 (   glClear\(GL_COLOR_BUFFER_BIT\);) 800 SB
225 1358 50 (  ) 50 SB
275 1358 700 (   glColor3f\(1.0, 1.0, 1.0\);) 700 SB
225 1429 50 (  ) 50 SB
275 1429 275 (   glOrtho\() 275 SB
550 1429 825 (-1.0, 1.0, -1.0, 1.0, -1.0, 1.0\);) 825 SB
225 1500 50 (  ) 50 SB
275 1500 575 (   glBegin\(GL_POLYGON\);) 575 SB
225 1571 50 (  ) 50 SB
275 1571 725 (      glVertex2f\(-0.5, -0.5\);) 725 SB
225 1642 50 (  ) 50 SB
275 1642 700 (      glVertex2f\(-0.5, 0.5\);) 700 SB
225 1713 50 (  ) 50 SB
275 1713 675 (      glVertex2f\(0.5, 0.5\);) 675 SB
225 1784 50 (  ) 50 SB
275 1784 700 (      glVertex2f\(0.5, -0.5\);) 700 SB
225 1855 50 (  ) 50 SB
275 1855 275 (   glEnd\(\);) 275 SB
225 1926 50 (  ) 50 SB
275 1926 325 (   glFlush\(\);) 325 SB
225 1997 50 (  ) 50 SB
275 1997 975 (   KeepTheWindowOnTheScreenForAWhile\(\);) 975 SB
225 2068 25 (}) 25 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2176 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2181 90 (The ) 90 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
435 2181 465 (OpenAWindowPlease\(\)) 465 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
900 2181 1254 ( routine is meant as a placeholder for a window system-specific) 1254 SB
345 2240 154 (routine.) 154 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2347 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2352 1494 (The next two lines are OpenGL commands that clear the window to black: ) 1494 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1839 2352 301 (glClearColor\(\)) 301 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2411 1145 (establishes what color the window will be cleared to, and ) 1145 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1490 2411 185 (glClear\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1675 2411 367 ( actually clears the) 367 SB
345 2470 1729 (window. Once the color to clear to is set, the window is cleared to that color whenever) 1729 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
345 2529 185 (glClear\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
530 2529 185 ( is called.) 185 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2636 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2641 1002 (The next OpenGL command used in the program, ) 1002 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1347 2641 204 (glOrtho\(\),) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1551 2641 509 ( specifies the  co-ordinate) 509 SB
345 2700 1805 (system OpenGL assumes as it draws the final image and how the image gets mapped to the) 1805 SB
345 2759 139 (screen.) 139 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (6) 21 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 192 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 197 773 (The next calls, which are bracketed by ) 773 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1118 197 189 (glBegin\(\)) 189 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1307 197 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1404 197 166 (glEnd\(\),) 166 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1570 197 591 ( define the object to be drawn) 591 SB
345 256 893 (in this example, a polygon with four vertices.) 893 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 363 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 368 857 (The polygon's "corners" are defined by the ) 857 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1202 368 241 (glVertex2f\(\)) 241 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1443 368 724 ( commands. As you might be able to) 724 SB
345 427 1745 (guess from the arguments, which are \(x, y\) co-ordinate pairs, the polygon is a rectangle.) 1745 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 534 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 539 158 (Finally, ) 158 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
503 539 185 (glFlush\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
688 539 1394 ( ensures that the drawing commands are actually executed, rather than) 1394 SB
345 598 1152 (stored in a buffer awaiting additional OpenGL commands.) 1152 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 705 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 710 90 (The ) 90 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
435 710 863 (KeepTheWindowOnTheScreenForAWhile\(\)) 863 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1298 710 809 ( placeholder routine forces the picture to) 809 SB
345 769 1144 (remain on the screen instead of immediately disappearing.) 1144 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 926 587 (Figure 1-1: Resultant image) 587 SB
/bytestr 251 string def
gs 593 637 225 1009 CB
save 225 1009 translate 593 637 scale
251 269 8
[251 0 0 -269 0 269]
{unpack} bind
image
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
c10086ffc100
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
80008700
restore
gr
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 1691 CB
1460 7 226 1707 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 1785 896 (OpenGL Command Syntax:) 896 SB
/fm 256 def
225 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
813 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
855 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
897 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
939 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
981 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1023 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1065 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1107 1862 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1945 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1950 1799 (OpenGL commands use the prefix gl and initial capital letters for each word making up the) 1799 SB
345 2009 461 (command name \(recall ) 461 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
806 2009 314 (glClearColor\(\),) 314 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1120 2009 278 ( for example\).) 278 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2116 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2121 1764 (OpenGL defined constants begin with GL_, use all capital letters, and use underscores to) 1764 SB
345 2180 414 (separate words \(like ) 414 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
759 2192 475 (GL_COLOR_BUFFER_BIT) 475 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1234 2180 30 (\).) 30 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2287 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2292 1471 (The seemingly extraneous letters appended to some command names \(the ) 1471 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1816 2292 40 (3f) 40 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1856 2292 62 ( in ) 62 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1918 2292 241 (glColor3f\(\),) 241 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2351 1708 (for example\) are necessary to allow the command to be used with various type of data) 1708 SB
345 2410 137 (values.) 137 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2517 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2522 90 (The ) 90 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
435 2522 25 (3) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
460 2522 1605 ( part of the suffix indicates that three arguments are given; another version of the) 1605 SB
345 2581 867 (Color command takes four arguments. The ) 867 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1212 2581 15 (f) 15 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1227 2581 911 ( part of the suffix indicates that the arguments) 911 SB
345 2640 538 (are floating-point numbers.) 538 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2747 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2752 1803 (Some OpenGL commands accept as many as eight different data types for their arguments.) 1803 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (7) 21 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
225 318 1410 (Command suffixes maping to ANSI C types:) 1410 SB
0 0 0 fC
/fm 256 def
225 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
813 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
855 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
897 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
939 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
981 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1023 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1065 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1107 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1149 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1191 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1233 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1275 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1317 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1359 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1401 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1443 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1485 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1527 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1569 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1611 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 528 1184 (Table 1-1: Command Suffixes and Argument Data Types) 1184 SB
128 128 128 fC
/fm 256 def
188 5 201 683 B
1 F
n
/fm 256 def
5 5 390 683 B
1 F
n
/fm 256 def
529 5 396 683 B
1 F
n
/fm 256 def
5 5 926 683 B
1 F
n
/fm 256 def
419 5 932 683 B
1 F
n
/fm 256 def
5 5 1352 683 B
1 F
n
/fm 256 def
629 5 1358 683 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 188 91 202 683 CB
225 704 119 (Suffix) 119 SB
gr
gs 536 91 390 683 CB
414 704 209 (Data Type) 209 SB
gr
gs 426 91 926 683 CB
949 704 359 (C-Language Type) 359 SB
gr
gs 636 91 1352 683 CB
1376 704 498 (OpenGL Type Definition) 498 SB
gr
128 128 128 fC
/fm 256 def
188 2 201 774 B
1 F
n
/fm 256 def
2 2 390 774 B
1 F
n
/fm 256 def
532 2 393 774 B
1 F
n
/fm 256 def
2 2 926 774 B
1 F
n
/fm 256 def
422 2 929 774 B
1 F
n
/fm 256 def
2 2 1352 774 B
1 F
n
/fm 256 def
632 2 1355 774 B
1 F
n
0 0 0 fC
gs 188 88 202 774 CB
285 792 24 (b) 24 SB
gr
gs 536 88 390 774 CB
414 792 243 (8-bit integer) 243 SB
gr
gs 426 88 926 774 CB
949 792 225 (signed char) 225 SB
gr
gs 636 88 1352 774 CB
1376 792 150 (GLbyte) 150 SB
gr
gs 188 85 202 862 CB
287 877 19 (s) 19 SB
gr
gs 536 85 390 862 CB
414 877 268 (16-bit integer) 268 SB
gr
gs 426 85 926 862 CB
949 877 101 (short) 101 SB
gr
gs 636 85 1352 862 CB
1376 877 167 (GLshort) 167 SB
gr
gs 188 85 202 947 CB
291 962 12 (i) 12 SB
gr
gs 536 85 390 947 CB
414 962 268 (32-bit integer) 268 SB
gr
gs 426 85 926 947 CB
949 962 87 (long) 87 SB
gr
gs 636 85 1352 947 CB
1376 962 278 (Glint, GLsizei) 278 SB
gr
gs 188 85 202 1032 CB
289 1047 15 (f) 15 SB
gr
gs 536 85 390 1032 CB
414 1047 401 (32-bit floating-point) 401 SB
gr
gs 426 85 926 1032 CB
949 1047 90 (float) 90 SB
gr
gs 636 85 1352 1032 CB
1376 1047 363 (Glfloat, GLclampf) 363 SB
gr
gs 188 85 202 1117 CB
284 1132 25 (d) 25 SB
gr
gs 536 85 390 1117 CB
414 1132 401 (64-bit floating-point) 401 SB
gr
gs 426 85 926 1117 CB
949 1132 134 (double) 134 SB
gr
gs 636 85 1352 1117 CB
1376 1132 417 (Gldouble, GLclampd) 417 SB
gr
gs 188 85 202 1202 CB
272 1217 49 (ub) 49 SB
gr
gs 536 85 390 1202 CB
414 1217 432 (8-bit unsigned integer) 432 SB
gr
gs 426 85 926 1202 CB
949 1217 274 (unsigned char) 274 SB
gr
gs 636 85 1352 1202 CB
1376 1217 405 (Glubyte, GLboolean) 405 SB
gr
gs 188 85 202 1287 CB
275 1302 44 (us) 44 SB
gr
gs 536 85 390 1287 CB
414 1302 457 (16-bit unsigned integer) 457 SB
gr
gs 426 85 926 1287 CB
949 1302 290 (unsigned short) 290 SB
gr
gs 636 85 1352 1287 CB
1376 1302 192 (GLushort) 192 SB
gr
128 128 128 fC
/fm 256 def
188 5 201 1457 B
1 F
n
/fm 256 def
5 5 390 1457 B
1 F
n
/fm 256 def
529 5 396 1457 B
1 F
n
/fm 256 def
5 5 926 1457 B
1 F
n
/fm 256 def
419 5 932 1457 B
1 F
n
/fm 256 def
5 5 1352 1457 B
1 F
n
/fm 256 def
629 5 1358 1457 B
1 F
n
0 0 0 fC
gs 188 85 202 1372 CB
278 1387 37 (ui) 37 SB
gr
gs 536 85 390 1372 CB
414 1387 457 (32-bit unsigned integer) 457 SB
gr
gs 426 85 926 1372 CB
949 1387 276 (unsigned long) 276 SB
gr
gs 636 85 1352 1372 CB
1376 1387 558 (GLuint,GLenum, GLbitfield) 558 SB
gr
32 0 0 50 50 0 0 0 50 /Symbol font
285 1598 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1603 515 (Thus, the two commands:) 515 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 1745 425 (glVertex2i\(1, 3\);) 425 SB
339 1790 525 (glVertex2f\(1.0, 3.0\);) 525 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1885 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1890 1787 (are equivalent, except that the first specifies the vertex's coordinates as 32-bit integers and) 1787 SB
345 1949 1358 (the second specifies them as single-precision floating-point numbers.) 1358 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2056 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2061 1803 (Some OpenGL commands can take a final letter v, which indicates that the command takes) 1803 SB
345 2120 1679 (a pointer to a vector \(or array\) of values rather than a series of individual arguments:) 1679 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2262 625 (glColor3f\(1.0, 0.0, 0.0\);) 625 SB
339 2352 925 (float color_array[] = {1.0, 0.0,0.0};) 925 SB
339 2397 600 (glColor3fv\(color_array\);) 600 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2492 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2497 1764 (The particular implementation of OpenGL that you're using might not follow this scheme) 1764 SB
345 2556 1463 (exactly; an implementation in C++ or Ada, for example, wouldn't need to.) 1463 SB
/fm 256 def
5 5 199 2698 B
1 F
n
/fm 256 def
5 5 199 2698 B
1 F
n
/fm 256 def
336 5 205 2698 B
1 F
n
/fm 256 def
5 5 542 2698 B
1 F
n
/fm 256 def
1576 5 548 2698 B
1 F
n
/fm 256 def
5 5 2125 2698 B
1 F
n
/fm 256 def
5 5 2125 2698 B
1 F
n
/fm 256 def
5 84 199 2704 B
1 F
n
/fm 256 def
5 5 199 2789 B
1 F
n
/fm 256 def
5 5 199 2789 B
1 F
n
/fm 256 def
336 5 205 2789 B
1 F
n
/fm 256 def
2 84 542 2704 B
1 F
n
/fm 256 def
5 5 542 2789 B
1 F
n
/fm 256 def
1576 5 548 2789 B
1 F
n
/fm 256 def
5 84 2125 2704 B
1 F
n
/fm 256 def
5 5 2125 2789 B
1 F
n
/fm 256 def
5 5 2125 2789 B
1 F
n
gs 337 91 205 2698 CB
362 2719 21 (?) 21 SB
gr
gs 1580 91 545 2698 CB
566 2719 1271 (How would C++ or Ada remove these extra routine definitions?) 1271 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (8) 21 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
225 390 900 (OpenGL as a State Machine) 900 SB
0 0 0 fC
/fm 256 def
225 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
813 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
855 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
897 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
939 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
981 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1023 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1065 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1107 467 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 550 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 555 1753 (OpenGL is a state machine. You put it into various states \(or modes\) that then remain in) 1753 SB
345 614 575 (effect until you change them.) 575 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 721 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 726 1726 (The current color is a state variable. You can set the current color to white, red, or any) 1726 SB
345 785 1748 (other color, and thereafter every object is drawn with that color until you set the current) 1748 SB
345 844 475 (color to something else.) 475 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 951 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 956 1830 (The current color is only one of many state variables that OpenGL preserves. Others control) 1830 SB
345 1015 1791 (such things as the current viewing and projection transformations, line and polygon stipple) 1791 SB
345 1074 1789 (patterns, polygon drawing modes, pixel-packing conventions, positions and characteristics) 1789 SB
345 1133 1194 (of lights, and material properties of the objects being drawn.) 1194 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1240 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1245 1645 (Many state variables refer to modes that are enabled or disabled with the command) 1645 SB
1990 1245 13 ( ) 13 SB
345 1304 13 ( ) 13 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
358 1304 214 (glEnable\(\)) 214 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
572 1304 69 ( or ) 69 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
641 1304 240 (glDisable\(\).) 240 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1411 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1416 1791 (Each state variable or mode has a default value, and at any point you can query the system) 1791 SB
345 1475 1496 (for each variable's current value using one of the four following commands:) 1496 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
339 1593 985 (glGetBooleanv\(\), glGetDoublev\(\), glGetFloatv\(\),) 985 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1324 1593 69 ( or ) 69 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1393 1593 310 (glGetIntegerv\(\)) 310 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1700 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1705 1814 (Which of these commands you select depends on what data type you want the answer to be) 1814 SB
345 1764 1523 (given in. Some state variables have a more specific query command \(such as ) 1523 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1868 1764 288 (glGetLight*\(\),) 288 SB
345 1823 270 (glGetError\(\),) 270 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
615 1823 69 ( or ) 69 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
684 1823 449 (glGetPolygonStipple\(\)) 449 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1133 1823 43 ( \).) 43 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1930 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1935 1807 (In addition, you can save and later restore the values of a collection of state variables on an) 1807 SB
345 1994 470 (attribute stack with the ) 470 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
815 1994 288 (glPushAttrib\(\)) 288 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1103 1994 84 ( and) 84 SB
1187 1994 26 (  ) 26 SB
1213 1994 13 ( ) 13 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1226 1994 269 (glPopAttrib\(\)) 269 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1495 1994 637 ( commands. Whenever possible,) 637 SB
345 2053 1813 (you should use these commands rather than any of the query commands, since they're likely) 1813 SB
345 2112 400 (to be more efficient.) 400 SB
/fm 256 def
5 5 199 2339 B
1 F
n
/fm 256 def
5 5 199 2339 B
1 F
n
/fm 256 def
336 5 205 2339 B
1 F
n
/fm 256 def
5 5 542 2339 B
1 F
n
/fm 256 def
1576 5 548 2339 B
1 F
n
/fm 256 def
5 5 2125 2339 B
1 F
n
/fm 256 def
5 5 2125 2339 B
1 F
n
/fm 256 def
5 84 199 2345 B
1 F
n
/fm 256 def
5 5 199 2430 B
1 F
n
/fm 256 def
5 5 199 2430 B
1 F
n
/fm 256 def
336 5 205 2430 B
1 F
n
/fm 256 def
2 84 542 2345 B
1 F
n
/fm 256 def
5 5 542 2430 B
1 F
n
/fm 256 def
1576 5 548 2430 B
1 F
n
/fm 256 def
5 84 2125 2345 B
1 F
n
/fm 256 def
5 5 2125 2430 B
1 F
n
/fm 256 def
5 5 2125 2430 B
1 F
n
gs 337 91 205 2339 CB
362 2360 21 (?) 21 SB
gr
gs 1580 91 545 2339 CB
566 2360 680 (Why would this be more efficient?) 680 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1141 2942 97 (Page ) 97 SB
1238 2942 21 (9) 21 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1410 40 225 309 CB
1408 7 226 325 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 403 1696 (The OpenGL Programming Guide Auxiliary Library) 1696 SB
/fm 256 def
225 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
813 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
855 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
897 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
939 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
981 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1023 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1065 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1107 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1149 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1191 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1233 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1275 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1317 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1359 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1401 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1443 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1485 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1527 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1569 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1611 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1653 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1695 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1737 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1779 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1821 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1863 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1905 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 648 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 653 1758 (OpenGL contains rendering commands but is designed to be independent of any window) 1758 SB
345 712 1787 (system or operating system. Consequently, it contains no commands for opening windows) 1787 SB
345 771 932 (or reading events from the keyboard or mouse.) 932 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 878 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 883 1649 (The auxiliary library is intentionally simple, and it would be difficult to build a large) 1649 SB
345 942 1666 (application on top of it. It's intended solely to support the examples in the \223OpenGL) 1666 SB
345 1001 1701 (Programming Guide\224, but you may find it a useful starting point to begin building real) 1701 SB
345 1060 249 (applications.) 249 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1254 545 (Window Management) 545 SB
/fm 256 def
225 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
514 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
550 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
586 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
622 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
658 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
694 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
730 1314 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
766 1314 M -4 0 0 -6 4 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1384 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1389 1407 (Three routines perform tasks necessary to initialise and open a window) 1407 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 1471 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 1476 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
738 1476 1410 ( opens a window on the screen. It enables the Escape key to be used to) 1410 SB
402 1535 1494 (exit the program, and it sets the background color for the window to black.) 1494 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 1617 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 1622 341 (auxInitPosition\(\)) 341 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
743 1622 106 ( tells ) 106 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
849 1622 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1185 1622 856 ( where to position a window on the screen.) 856 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 1704 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 1709 444 (auxInitDisplayMode\(\)) 444 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
846 1709 106 ( tells ) 106 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
952 1709 336 (auxInitWindow\(\)) 336 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1288 1709 865 ( whether to create an RGBA or color-index) 865 SB
402 1768 1768 (window. You can also specify a single- or double-buffered window. \(If you're working in) 1768 SB
402 1827 1495 (color-index mode, you'll want to load certain colors into the color map; use) 1495 SB
1897 1827 13 ( ) 13 SB
402 1886 13 ( ) 13 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
415 1886 365 (auxSetOneColor\(\)) 365 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
780 1886 1380 ( to do this.\) Finally, you can use this routine to indicate that you want) 1380 SB
402 1945 1519 (the window to have an associated depth, stencil, and/or accumulation buffer.) 1519 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2139 562 (Handling Input Events) 562 SB
/fm 256 def
225 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
693 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
729 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
765 2199 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 2269 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2274 1790 (You can use these routines to register callback commands that are invoked when specified) 1790 SB
345 2333 264 (events occur.) 264 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 2415 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 2420 376 (auxReshapeFunc\(\)) 376 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
778 2420 1328 ( indicates what action should be taken when the window is resized,) 1328 SB
402 2479 392 (moved, or exposed.) 392 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 2561 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 2566 284 (auxKeyFunc\(\)) 284 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
686 2566 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
783 2566 340 (auxMouseFunc\(\)) 340 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1123 2566 1038 ( allow you to link a keyboard key or a mouse button) 1038 SB
402 2625 1628 (with a routine that's invoked when the key or mouse button is pressed or released.) 1628 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (10) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 524 (Drawing 3-D Objects) 524 SB
0 0 0 fC
/fm 256 def
225 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
693 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
729 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 459 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 464 1789 (The auxiliary library includes several routines for drawing these three-dimensional objects:) 1789 SB
32 0 0 50 50 0 0 0 50 /Symbol font
342 546 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
402 551 1650 (sphere, octahedron, cube, dodecahedron, torus, icosahedron, cylinder, teapot, cone) 1650 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 658 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 663 1780 (You can draw these objects as wireframes or as solid shaded objects with surface normals) 1780 SB
345 722 1461 (defined. For example, the routines for a sphere and a torus are as follows:) 1461 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
339 866 795 (void auxWireSphere\(GLdouble radius\);) 795 SB
339 925 802 (void auxSolidSphere\(GLdouble radius\);) 802 SB
339 984 1373 (void auxWireTorus\(GLdouble innerRadius, GLdouble outerRadius\);) 1373 SB
339 1043 1380 (void auxSolidTorus\(GLdouble innerRadius, GLdouble outerRadius\);) 1380 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1150 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1155 1829 (All these models are drawn centered at the origin. When drawn with unit scale factors, these) 1829 SB
345 1214 1820 (models fit into a box with all coordinates from -1 to 1. Use the arguments for these routines) 1820 SB
345 1273 391 (to scale the objects.) 391 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1467 814 (Managing a Background Process) 814 SB
/fm 256 def
225 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
693 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
729 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
765 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
801 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
837 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
873 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
909 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
945 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
981 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1017 1527 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1597 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1602 1813 (You can specify a function that's to be executed if no other events are pending for example,) 1813 SB
345 1661 1001 (when the event loop would otherwise be idle with ) 1001 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1346 1661 298 (auxIdleFunc\(\).) 298 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1644 1661 404 ( This routine takes a) 404 SB
345 1720 1729 (pointer to the function as its only argument. Pass in zero to disable the execution of the) 1729 SB
345 1779 176 (function.) 176 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1973 539 (Running the Program) 539 SB
/fm 256 def
225 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
514 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
550 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
586 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
622 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
658 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
694 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
730 2033 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 2103 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2108 250 (Within your ) 250 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
595 2108 133 (main\(\)) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
728 2108 261 ( routine, call ) 261 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
989 2108 314 (auxMainLoop\(\)) 314 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1303 2108 785 ( and pass it the name of the routine that) 785 SB
345 2167 872 (redraws the objects in your scene.  Example) 872 SB
1217 2167 478 ( 1-2  shows how you mi) 478 SB
1695 2167 399 (ght use the auxiliary) 399 SB
345 2226 1087 (library to create the simple program shown in Example) 1087 SB
1432 2226 106 ( 1-1 .) 106 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (11) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 292 1657 (Example 1-2: A Simple OpenGL Program Using the Auxiliary Library: simple.c) 1657 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 407 575 (/* Includes required */) 575 SB
339 452 450 (#include <GL/gl.h>) 450 SB
339 497 400 (#include "aux.h") 400 SB
339 542 50 (/*) 50 SB
339 587 1350 ( *  Clear the screen.  Set the current color to white.) 1350 SB
339 632 725 ( *  Draw the wire frame cube.) 725 SB
339 677 75 ( */) 75 SB
339 722 450 (void display\(void\)) 450 SB
339 767 25 ({) 25 SB
339 812 75 (   ) 75 SB
414 812 925 (   glClearColor \(0.0, 0.0, 0.0, 0.0\);) 925 SB
339 857 50 (  ) 50 SB
389 857 825 (    glClear\(GL_COLOR_BUFFER_BIT\);) 825 SB
339 902 25 ( ) 25 SB
364 902 750 (     glColor3f\(1.0, 1.0, 1.0\);) 750 SB
339 947 50 (  ) 50 SB
389 947 1125 (    glOrtho\(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0\);) 1125 SB
339 992 25 ( ) 25 SB
364 992 450 (     glBegin\(GL_PO) 450 SB
814 992 175 (LYGON\);) 175 SB
339 1037 25 ( ) 25 SB
364 1037 50 (  ) 50 SB
414 1037 875 (            glVertex2f\(-0.5, -0.5\);) 875 SB
339 1082 25 ( ) 25 SB
364 1082 50 (  ) 50 SB
414 1082 850 (            glVertex2f\(-0.5, 0.5\);) 850 SB
339 1127 25 ( ) 25 SB
364 1127 50 (  ) 50 SB
414 1127 825 (            glVertex2f\(0.5, 0.5\);) 825 SB
339 1172 25 ( ) 25 SB
364 1172 50 (  ) 50 SB
414 1172 850 (            glVertex2f\(0.5, -0.5\);) 850 SB
339 1217 50 (  ) 50 SB
389 1217 300 (    glEnd\(\);) 300 SB
339 1262 50 (  ) 50 SB
389 1262 350 (    glFlush\(\);) 350 SB
339 1307 25 (}) 25 SB
339 1352 750 (/* Initialize shading model */) 750 SB
339 1397 425 (void myInit\(void\)) 425 SB
339 1442 25 ({) 25 SB
339 1487 725 (      glShadeModel \(GL_FLAT\);) 725 SB
339 1532 25 (}) 25 SB
339 1577 50 (/*) 50 SB
339 1622 1375 ( *  Called when the window is first opened and whenever) 1375 SB
339 1667 1250 ( *  the window is reconfigured \(moved or resized\).) 1250 SB
339 1712 75 ( */) 75 SB
339 1757 900 (void myReshape\(GLsizei w, GLsizei h\)) 900 SB
339 1802 25 ({) 25 SB
339 1847 50 (  ) 50 SB
389 1847 800 (    glMatrixMode\(GL_PROJECTION\);) 800 SB
339 1892 50 (  ) 50 SB
389 1892 525 (    glLoadIdentity\(\);) 525 SB
339 1937 1825 (      glFrustum \(-1.0, 1.0, -1.0, 1.0, 1.5, 20.0\);  /* transformation  */) 1825 SB
339 1982 1825 (      glMatrixMode \(GL_MODELVIEW\);        /* back to modelview matrix  */) 1825 SB
339 2027 1700 (      glViewport \(0, 0, w, h\);            /*  define the viewport */) 1700 SB
339 2072 25 (}) 25 SB
339 2117 50 (/*) 50 SB
339 2162 325 ( *  Main Loop) 325 SB
339 2207 1300 ( *  Open window with initial window size, title bar,) 1300 SB
339 2252 1175 ( *  RGBA display mode, and handle input events.) 1175 SB
339 2297 75 ( */) 75 SB
339 2342 775 (int main\(int argc, char** argv\)) 775 SB
339 2387 25 ({) 25 SB
339 2432 25 ( ) 25 SB
364 2432 50 (  ) 50 SB
414 2432 1150 (   auxInitDisplayMode \(AUX_SINGLE | AUX_RGBA\);) 1150 SB
339 2477 25 ( ) 25 SB
364 2477 50 (  ) 50 SB
414 2477 900 (   auxInitPosition \(0, 0, 500, 500\);) 900 SB
339 2522 25 ( ) 25 SB
364 2522 50 (  ) 50 SB
414 2522 675 (   auxInitWindow \(argv[0]\);) 675 SB
339 2567 50 (  ) 50 SB
389 2567 100 (    ) 100 SB
489 2567 250 (myInit \(\);) 250 SB
339 2612 825 (      auxReshapeFunc \(myReshape\);) 825 SB
339 2657 675 (      auxMainLoop\(display\);) 675 SB
339 2702 25 (}) 25 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%Page: 12 12
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (12) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 224 CB
1460 7 226 240 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 318 621 (Compilling on RCS) 621 SB
/fm 256 def
225 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
562 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
604 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
646 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
688 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
730 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
772 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
814 395 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 478 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 483 1652 (There is an example Makefile in the VisClass/apps directory which can be used as a) 1652 SB
345 542 637 (template for future assignments.) 637 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 699 930 (Example 1-3: Example Makefile for simple.c) 930 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 854 25 (#) 25 SB
339 899 1400 (# Sample Makefile for compilling the sample code for the) 1400 SB
339 944 1775 (# Advanced Computer Graphics and Data Visualization 35.6961 \(Fall 1995\)) 1775 SB
339 989 25 (#) 25 SB
339 1034 1550 (# Copy this to the directory where the program resides and use) 1550 SB
339 1079 25 (#) 25 SB
339 1124 525 (#       make progname) 525 SB
339 1169 25 (#) 25 SB
339 1214 1700 (# The progname would be the prefix of the source file you generated.) 1700 SB
339 1259 1600 (# Like if your source file was hw1.c, the above line would read:) 1600 SB
339 1304 25 (#) 25 SB
339 1349 400 (#       make hw1) 400 SB
339 1394 25 (#) 25 SB
339 1439 1775 (# The make utility would automatically look for something with a suffix) 1775 SB
339 1484 1700 (# it understood and would find hw1.c. There are built in rules which) 1700 SB
339 1529 850 (# tell it how to compile c source.) 850 SB
339 1619 1050 (LIBS= -lGL -lGLU -laux -lXm -lXt -lX11 -lm) 1050 SB
339 1664 800 (CFLAGS=-DAIXV3 -I/usr/include/GL) 800 SB
339 1709 125 (CC=cc) 125 SB
339 1799 475 (simple:    simple.o) 475 SB
339 1844 1000 (        $\(CC\) $\(CFLAGS\) -o $@ $? $\(LIBS\)) 1000 SB
339 1934 475 (lorenz:    lorenz.o) 475 SB
339 1979 1000 (        $\(CC\) $\(CFLAGS\) -o $@ $? $\(LIBS\)) 1000 SB
339 2069 150 (clean:) 150 SB
339 2114 550 (        /bin/rm -f *.o) 550 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 2259 871 (Example 1-4: Results of the build process.) 871 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2414 300 (%make simple) 300 SB
339 2459 1100 (    cc -DAIXV3 -I/usr/include/GL -c simple.c) 1100 SB
339 2504 1825 (    cc -DAIXV3 -I/usr/include/GL -o simple simple.o -lGL -lGLU -laux -lXm) 1825 SB
339 2549 350 (-lXt -lX11 -lm) 350 SB
339 2594 25 (%) 25 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2689 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2694 1583 (Obviously there should be no warning or error messages as a result of the build.) 1583 SB
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 2868 CB
1460 7 226 2884 B
1 F
S
n
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (13) 42 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
225 195 337 (Animation) 337 SB
0 0 0 fC
/fm 256 def
225 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
394 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
436 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
478 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
520 272 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 355 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 360 1748 (One of the most exciting things you can do on a graphics computer is draw pictures that) 1748 SB
345 419 1654 (move. Whether you're an engineer trying to see all sides of a mechanical part you're) 1654 SB
345 478 1800 (designing, a pilot learning to fly an airplane using a simulation, or merely a computer-game) 1800 SB
345 537 1539 (aficionado, it's clear that animation is an important part of computer graphics.) 1539 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 644 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 649 1827 (In a movie theater, motion is achieved by taking a sequence of pictures \(24 per second\), and) 1827 SB
345 708 1805 (then projecting them at 24 per second on the screen. \(The old Charlie Chaplin movies were) 1805 SB
345 767 1085 (shot at 16 frames per second and are noticeably jerky.\)) 1085 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 874 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 879 1755 (Computer-graphics screens typically refresh \(redraw the picture\) approximately 60 to 76) 1755 SB
345 938 1732 (times per second, and some even run at about 120 refreshes per second. Clearly, 60 per) 1732 SB
345 997 1786 (second is smoother than 30, and 120 is marginally better than 60. Refresh rates faster than) 1786 SB
345 1056 1774 (120, however, are beyond the point of diminishing returns, since the human eye is only so) 1774 SB
345 1115 115 (good.) 115 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1222 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1227 1766 (The key idea that makes motion picture projection work is that when it is displayed, each) 1766 SB
345 1286 364 (frame is complete.) 364 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1393 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1398 1776 (What is the problem with this following code segment which attempts to animate a scene:) 1776 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 1500 350 (open_window\(\);) 350 SB
339 1545 775 (for \(i = 0; i < 1000000; i++\) {) 775 SB
339 1590 50 (  ) 50 SB
389 1590 550 (   clear_the_window\(\);) 550 SB
339 1635 50 (  ) 50 SB
389 1635 425 (   draw_frame\(i\);) 425 SB
339 1680 50 (  ) 50 SB
389 1680 1075 (   wait_until_a_24th_of_a_second_is_over\(\);) 1075 SB
339 1725 25 (}) 25 SB
/fm 256 def
5 5 199 2025 B
1 F
n
/fm 256 def
5 5 199 2025 B
1 F
n
/fm 256 def
336 5 205 2025 B
1 F
n
/fm 256 def
5 5 542 2025 B
1 F
n
/fm 256 def
1576 5 548 2025 B
1 F
n
/fm 256 def
5 5 2125 2025 B
1 F
n
/fm 256 def
5 5 2125 2025 B
1 F
n
/fm 256 def
5 84 199 2031 B
1 F
n
/fm 256 def
5 5 199 2116 B
1 F
n
/fm 256 def
5 5 199 2116 B
1 F
n
/fm 256 def
336 5 205 2116 B
1 F
n
/fm 256 def
2 84 542 2031 B
1 F
n
/fm 256 def
5 5 542 2116 B
1 F
n
/fm 256 def
1576 5 548 2116 B
1 F
n
/fm 256 def
5 84 2125 2031 B
1 F
n
/fm 256 def
5 5 2125 2116 B
1 F
n
/fm 256 def
5 5 2125 2116 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 205 2025 CB
362 2046 21 (?) 21 SB
gr
gs 1580 91 545 2025 CB
566 2046 808 (What is the problem with this algorithm?) 808 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (14) 42 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 327 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 332 1807 (A modified version of the preceding program that does display smoothly animated graphics) 1807 SB
345 391 396 (might look like this:) 396 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 533 900 (open_window_in_double_buffer_mode\(\);) 900 SB
339 578 775 (for \(i = 0; i < 1000000; i++\) {) 775 SB
339 623 50 (  ) 50 SB
389 623 550 (   clear_the_window\(\);) 550 SB
339 668 50 (  ) 50 SB
389 668 425 (   draw_frame\(i\);) 425 SB
339 713 50 (  ) 50 SB
389 713 350 (   swap_the_bu) 350 SB
739 713 200 (ffers\(\);) 200 SB
339 758 25 (}) 25 SB
0 0 0 fC
/fm 256 def
5 5 199 1058 B
1 F
n
/fm 256 def
5 5 199 1058 B
1 F
n
/fm 256 def
336 5 205 1058 B
1 F
n
/fm 256 def
5 5 542 1058 B
1 F
n
/fm 256 def
1576 5 548 1058 B
1 F
n
/fm 256 def
5 5 2125 1058 B
1 F
n
/fm 256 def
5 5 2125 1058 B
1 F
n
/fm 256 def
5 84 199 1064 B
1 F
n
/fm 256 def
5 5 199 1149 B
1 F
n
/fm 256 def
5 5 199 1149 B
1 F
n
/fm 256 def
336 5 205 1149 B
1 F
n
/fm 256 def
2 84 542 1064 B
1 F
n
/fm 256 def
5 5 542 1149 B
1 F
n
/fm 256 def
1576 5 548 1149 B
1 F
n
/fm 256 def
5 84 2125 1064 B
1 F
n
/fm 256 def
5 5 2125 1149 B
1 F
n
/fm 256 def
5 5 2125 1149 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 205 1058 CB
362 1079 21 (?) 21 SB
gr
gs 1580 91 545 1058 CB
566 1079 1130 (How does this remove the problem of the last algorithm?) 1130 SB
gr
32 0 0 50 50 0 0 0 50 /Symbol font
285 1290 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1295 1725 (OpenGL doesn't have a swap_the_buffers\(\) command because the feature might not be) 1725 SB
345 1354 1718 (available on all hardware and, in any case, it's highly dependent on the window system.) 1718 SB
345 1413 1732 (However, GLX provides such a command, for use on machines that use the X Window) 1732 SB
345 1472 157 (System.) 157 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 15 15
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (15) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 292 1091 (Example 1-3: A Double-Buffered Program: double.c) 1091 SB
32 0 0 33 33 0 0 0 27 /Courier /font0 ANSIFont font
339 447 360 (#include <GL/gl.h>) 360 SB
339 483 380 (#include <GL/glu.h>) 380 SB
339 519 380 (#include <GL/glx.h>) 380 SB
339 555 320 (#include "aux.h") 320 SB
339 591 520 (static GLfloat spin = 0.0;) 520 SB
339 627 360 (void display\(void\)) 360 SB
339 663 20 ({) 20 SB
339 699 20 ( ) 20 SB
359 699 20 ( ) 20 SB
379 699 660 (    glClear\(GL_COLOR_BUFFER_BIT\);) 660 SB
339 735 40 (  ) 40 SB
379 735 380 (    glPushMatrix\(\);) 380 SB
339 771 40 (  ) 40 SB
379 771 700 (    glRotatef\(spin, 0.0, 0.0, 1.0\);) 700 SB
339 807 40 (  ) 40 SB
379 807 760 (    glRectf\(-25.0, -25.0, 25.0, 25.0\);) 760 SB
339 843 40 (  ) 40 SB
379 843 360 (    glPopMatrix\(\);) 360 SB
339 879 40 (  ) 40 SB
379 879 280 (    glFlush\(\);) 280 SB
339 915 40 (  ) 40 SB
379 915 960 (    glXSwapBuffers\(auxXDisplay\(\), auxXWindow\(\)\);) 960 SB
339 951 20 (}) 20 SB
339 987 440 (void spinDisplay\(void\)) 440 SB
339 1023 20 ({) 20 SB
339 1059 40 (  ) 40 SB
379 1059 440 (    spin = spin + 2.0;) 440 SB
339 1095 40 (  ) 40 SB
379 1095 420 (    if \(spin > 360.0\)) 420 SB
339 1131 40 (  ) 40 SB
379 1131 560 (        spin = spin - 360.0;) 560 SB
339 1167 40 (  ) 40 SB
379 1167 280 (    display\(\);) 280 SB
339 1203 20 (}) 20 SB
339 1275 780 (void startIdleFunc\(AUX_EVENTREC *event\)) 780 SB
339 1311 20 ({) 20 SB
339 1347 40 (  ) 40 SB
379 1347 580 (    auxIdleFunc\(spinDisplay\);) 580 SB
339 1383 20 (}) 20 SB
339 1419 760 (void stopIdleFunc\(AUX_EVENTREC *event\)) 760 SB
339 1455 20 ({) 20 SB
339 1491 40 (  ) 40 SB
379 1491 380 (    auxIdleFunc\(0\);) 380 SB
339 1527 20 (}) 20 SB
339 1563 340 (void myinit\(void\)) 340 SB
339 1599 20 ({) 20 SB
339 1635 40 (  ) 40 SB
379 1635 740 (    glClearColor\(0.0, 0.0, 0.0, 1.0\);) 740 SB
339 1671 40 (  ) 40 SB
379 1671 580 (    glColor3f\(1.0, 1.0, 1.0\);) 580 SB
339 1707 40 (  ) 40 SB
379 1707 520 (    glShadeModel\(GL_FLAT\);) 520 SB
339 1743 20 (}) 20 SB
339 1815 720 (void myReshape\(GLsizei w, GLsizei h\)) 720 SB
339 1851 20 ({) 20 SB
339 1887 20 ( ) 20 SB
359 1887 40 (  ) 40 SB
399 1887 540 (    glViewport\(0, 0, w, h\);) 540 SB
339 1923 20 ( ) 20 SB
359 1923 40 (  ) 40 SB
399 1923 640 (    glMatrixMode\(GL_PROJECTION\);) 640 SB
339 1959 20 ( ) 20 SB
359 1959 40 (  ) 40 SB
399 1959 420 (    glLoadIdentity\(\);) 420 SB
339 1995 20 ( ) 20 SB
359 1995 40 (  ) 40 SB
399 1995 300 (    if \(w <= h\)) 300 SB
339 2031 40 (  ) 40 SB
379 2031 1160 (        glOrtho \(-50.0, 50.0, -50.0*\(GLfloat\)h/\(GLfloat\)w,) 1160 SB
339 2067 40 (  ) 40 SB
379 2067 1020 (            50.0*\(GLfloat\)h/\(GLfloat\)w, -1.0, 1.0\);) 1020 SB
339 2103 40 (  ) 40 SB
379 2103 160 (    else) 160 SB
339 2139 40 (  ) 40 SB
379 2139 900 (        glOrtho \(-50.0*\(GLfloat\)w/\(GLfloat\)h,) 900 SB
339 2175 40 (  ) 40 SB
379 2175 1280 (            50.0*\(GLfloat\)w/\(GLfloat\)h, -50.0, 50.0, -1.0, 1.0\);) 1280 SB
339 2211 40 (  ) 40 SB
379 2211 80 (    ) 80 SB
459 2211 540 (glMatrixMode\(GL_MODELVIEW\);) 540 SB
339 2247 40 (  ) 40 SB
379 2247 440 (    glLoadIdentity \(\);) 440 SB
339 2283 20 (}) 20 SB
339 2319 620 (int main\(int argc, char** argv\)) 620 SB
339 2355 20 ({) 20 SB
339 2391 40 (  ) 40 SB
379 2391 920 (    auxInitDisplayMode\(AUX_DOUBLE | AUX_RGBA\);) 920 SB
339 2427 40 (  ) 40 SB
379 2427 720 (    auxInitPosition\(0, 0, 500, 500\);) 720 SB
339 2463 40 (  ) 40 SB
379 2463 540 (    auxInitWindow\(argv[0]\);) 540 SB
339 2499 40 (  ) 40 SB
379 2499 260 (    myinit\(\);) 260 SB
339 2535 40 (  ) 40 SB
379 2535 600 (    auxReshapeFunc\(myReshape\);) 600 SB
339 2571 40 (  ) 40 SB
379 2571 580 (    auxIdleFunc\(spinDisplay\);) 580 SB
339 2607 40 (  ) 40 SB
379 2607 1260 (    auxMouseFunc\(AUX_LEFTBUTTON, AUX_MOUSEDOWN, startIdleFunc\);) 1260 SB
339 2643 40 (  ) 40 SB
379 2643 1280 (    auxMouseFunc\(AUX_MIDDLEBUTTON, AUX_MOUSEDOWN, stopIdleFunc\);) 1280 SB
339 2679 40 (  ) 40 SB
379 2679 500 (    auxMainLoop\(display\);) 500 SB
339 2715 20 (}) 20 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%Page: 16 16
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (16) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 292 1006 (Figure 1-2: A Double-Buffered Program Results) 1006 SB
/bytestr 518 string def
gs 1619 594 225 375 CB
save 225 375 translate 1619 594 scale
518 190 8
[518 0 0 -190 0 190]
{unpack} bind
image
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
f0fdff00f8fdff00fcfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f5fdfe00c3fdff00f9fdff00fbfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f4fdff00f9fdfe00cafdff00f9fdff00fbfdfd00fffdff00fffdff00fdfdff00fdfdff00fdfdfc00f9fdf700fcfdfe00c8fdff00f8fdff00fbfdfd00fffdff0000fdff00fdfdff00fdfdff00fcfdfc00f6fdfc00fafdfe00e4fd
f0fdff00f8fdff00fdfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00f8fdff00fefdff00c5fdff00f9fdff00fcfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00f5fdff00fbfdff00fefdff00ccfdff00f9fdff00fcfdff00fefdfe00fefdff00fdfdff00fdfdff00fefdff00fefdff00fafdff00f6fdff00fefdff00cafdff00f8fdff00fcfdff00fefdfe00fffdff00fdfdff00fdfdff00fdfdff00fefdff00f8fdff00fefdff00fdfdff00fefdff00e6fd
f0fdff00f8fdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00f9fdff00fefdff00c5fdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00f6fdff00fbfdff00fefdff00ccfdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfdff00fafdff00f7fdff00fefdff00cafdff00f8fdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fdfd0000fcfdff00fafdff00fcfdff00fefdff00fefdff00e6fd
f0fdff00f8fdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00f2fd0000fcfd0000c5fdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00effdff00fbfd0000fcfd0000ccfdff00f9fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fffdff00f3fdfe00f8fd0000fcfd0000cafdff00f8fdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fefdff00f3fdff00fcfdff00fefd0000fcfd0000e6fd
f0fdff00f8fdff00fcfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00f3fdff00fcfdff00c6fdff00f9fdff00fbfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00effdff00fcfdff00fcfdff00cdfdff00f9fdff00fbfdfe00fffdff00fefdff00fdfdff00fdfdff00fffdff00f1fdff00fafdff00fcfdff00cbfdff00f8fdff00fbfdfe00fffdff00fffdff00fdfdff00fdfdff00fefdff00f3fdff00fcfdff00fffdff00fcfdff00e7fd
f0fdff00f8fdff00fbfdfb00fefdff00fdfdff00fdfdff00fffdf800fafdff00fcfdff00c6fdff00f9fdff00fafdfb00fefdff00fdfdff00fdfdff00fffdf800f6fdff00fcfdff00fcfdff00cdfdff00f9fdff00fafdfb00fefdff00fdfdff00fdfdff00fffdf800f7fdfe00fcfdff00fcfdff00cbfdff00f8fdff00fafdfb00fffdff00fdfdff00fdfdff00fefdf800f3fdff00fffdff00fcfdff00e7fd
f0fdff00f8fdff00f7fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00fafdff00fcfdff00c6fdff00f9fdff00f6fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00f6fdff00fcfdff00fcfdff00cdfdff00f9fdff00f6fdff00fefdff00fdfdff00fdfdff00fffdff00fcfdff00f5fdff00fdfdff00fcfdff00cbfdff00f8fdff00f6fdff00fffdff00fdfdff00fdfdff00fefdff00fcfdff00f4fdff00fefdff00fcfdff00e7fd
f0fdf800fffdff00fdfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f9fdff00fcfdff00c6fdf80000fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f5fdff00fcfdff00fcfdff00cdfdf80000fdff00fcfdff00fdfdff00fefdff00fdfdff00fdfdff00fefd0000fcfd0000f3fdff00fefdff00fcfdff00cbfdf800fffdff00fcfdff00fdfdff00fffdff00fdfdff00fdfdff00fdfd0000fcfd0000f6fdfd00fdfdff00fcfdff00e7fd
f0fdff00f8fdfe00fdfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f9fdff00fcfdff00c6fdff00f9fdfe00fcfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f5fdff00fcfdff00fcfdff00cdfdff00f9fdfe00fcfd0000fdfdff00fefdfe00fefdfe00fefdff00fefdff00fefdff00f2fdff00fffdff00fcfdff00cbfdff00f8fdfe00fcfd0000fdfdff00fffdfe00fefdfe00fefdff00fdfdff00fefdff00f3fdff00fefdff00fcfdff00e7fd
f0fdff00f8fdff0000fdff00fefdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f8fdff00fcfdff00c6fdff00f9fdff0000fdff00fdfdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f4fdff00fcfdff00fcfdff00cdfdff00f9fdff0000fdff00fdfdfd00fcfdff0000fdfd00fffdfd00fbfdfd00f8fdff00fcfdff00fffdff00fcfdff00cbfdff00f8fdff0000fdff00fdfdfd00fdfdff0000fdfd00fffdfd00fafdfd00f1fdff00fffdff00fcfdff00e7fd
f0fdff00c6fd0000fcfd0000c5fdff00c6fdfc00fbfd0000fcfd0000ccfdff00c7fdff00fcfdff00fefd0000fcfd0000cafdff00c6fdff00fcfdff00fefd0000fcfd0000e6fd
f0fdff00c6fdff00fefdff00c5fdff00c4fdfe00fbfdff00fefdff00ccfdff00c6fd0000fcfdff00fefdff00fefdff00cafdff00c6fdff00fcfdff00fefdff00fefdff00e6fd
f0fdff00c6fdff00fefdff00c5fdff00c3fdff00fbfdff00fefdff00ccfdff00c6fdff00fefdff00fdfdff00fefdff00cafdff00c5fdff00fefdff00fdfdff00fefdff00e6fd
f0fdf700ccfdfe00c3fdf700cbfdff00f9fdfe00cafdf700cdfdfc00fafdfe00c8fdf700ccfdfc00fafdfe00e4fd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fdb0fd0000d0fd
80fd80fd80fdb2fdff0001fd00d1fd
80fd80fd80fdb4fdff00fefd0000d1fd
80fd80fd80fdb5fd0000fbfd0000d2fd
80fd80fdabfdff008efdff00fafd0000d2fd
80fd80fdaefdfe0001fd0090fdff00f7fd0000d3fd
80fd80fdb1fdfe00fcfd000092fd0000f5fd0000d3fd
80fd80fdb3fdff00f9fd000094fdff00f3fd0000d4fd
80fd80fdb6fdfe00f6fd000097fdff00f0fd0000d5fd
80fda5fd000095fdfe00f3fd000099fdff00eefd0000d5fd
80fdabfdfa0098fdfe00f0fd00009afd0000ebfd0000d6fd
80fdb0fdfc00fafd00009bfdff00ecfd00009dfdff00eafd0000d6fd
80fdb6fdfb00f5fd00009efdfe00eafd00009ffdff00e7fd0000d7fd
80fdbcfdfb00effd0000a1fdfe00e7fd0000a1fdff00e4fd0000d8fd
80fdc2fdfb00e9fd0000a4fdfe00e3fd0000a3fd0000e2fd0000d8fd
80fdc7fdfc00e3fd0000a6fdff00e0fd0000a5fdff00e0fd0000d9fd
fafda700adfdfb00defd0000a9fdfe00defd0000a7fdff00defd0000d9fd
fafd0000a9fd0000b3fdfb00d7fd0000adfdfe00dafd0000a9fd0000dbfd0000dafd
fafd0000a9fd0000b8fdfc00d1fd0000b0fdfe00d7fd0000abfdff00dafd0000dafd
fafd0000a9fd0000befdfb00ccfd0000b2fdff00d3fd0000aefdff00d7fd0000dbfd
fafd0000a9fd0000c4fdfb00c6fd0000b5fdfe00d1fd0000b0fdff00d4fd0000dcfd
fafd0000a9fd0000c9fdfc00c0fd0000b8fdfe00cefd0000b1fd0000d2fd0000dcfd
fafd0000a9fd0000cffdfb00bbfd0000bbfdfe00cafd0000b4fdff00d0fd0000ddfd
fafd0000a9fd0000d5fdfb00b4fd0000befdff00c7fd0000b6fdff00cefd0000ddfd
fafd0000a9fd0000dafdfc00aefd0000c1fdfe00c5fd0000b8fdff00cbfd0000defd
fafd0000a9fd0000dcfdff00a9fd0000c4fdfe00c1fd0000bafd0000c9fd0000defd
fafd0000a9fd0000dcfd0000a8fd0000c7fdfe00befd0000bcfdff00c7fd0000dffd
fafd0000a9fd0000dcfd0000a8fd0000c9fdff00bbfd0000befdff00c4fd0000e0fd
fafd0000a9fd0000dcfd0000a7fd0000cdfdfe00b8fd0000c1fdff00c2fd0000e0fd
fafd0000a9fd0000dcfd0000a7fd0000d0fdfe00b5fd0000c2fd0000bffd0000e1fd
fafd0000a9fd0000dbfd0000a8fd0000d3fdfe00b1fd0000c5fdff00befd0000e1fd
fafd0000a9fd0000dbfd0000a8fd0000d5fdff00aefd0000c7fdff00bbfd0000e2fd
fafd0000a9fd0000dbfd0000a8fd0000d8fdfe00acfd0000c8fd0000b8fd0000e3fd
fafd0000a9fd0000dbfd0000a8fd0000dbfdfe00a8fd0000cbfdff00b7fd0000e3fd
fafd0000a9fd0000dbfd0000a7fd0000defdff00a5fd0000cdfdff00b4fd0000e4fd
fafd0000a9fd0000dbfd0000a7fd0000defd0000a4fd0000cffdff00b2fd0000e4fd
fafd0000a9fd0000dafd0000a8fd0000defd0000a3fd0000d1fd0000affd0000e5fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a4fd0000d3fdff00aefd0000e5fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a4fd0000d5fdff00abfd0000e6fd
fafd0000a9fd0000dafd0000a8fd0000ddfd0000a3fd0000d8fdff00a8fd0000e7fd
fafd0000a9fd0000dafd0000a7fd0000ddfd0000a4fd0000d9fd0000a6fd0000e7fd
fafd0000a9fd0000d9fd0000a8fd0000ddfd0000a3fd0000dcfdff00a4fd0000e8fd
fafd0000a9fd0000d9fd0000a8fd0000ddfd0000a3fd0000defdff00a2fd0000e8fd
fafd0000a9fd0000d9fd0000a8fd0000dcfd0000a4fd0000e0fdff009ffd0000e9fd
fafd0000a9fd0000d9fd0000a8fd0000dcfd0000a3fd0000e2fd00009dfd0000e9fd
fafd0000a9fd0000d9fd0000a7fd0000ddfd0000a3fd0000e3fd00009bfd0000eafd
fafd0000a9fd0000d9fd0000a7fd0000dcfd0000a4fd0000e2fd00009bfd0000ebfd
fafd0000a9fd0000d8fd0000a8fd0000dcfd0000a3fd0000e2fd00009cfd0000ebfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a4fd0000e2fd00009bfd0000ecfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a4fd0000e1fd00009cfd0000ecfd
fafd0000a9fd0000d8fd0000a8fd0000dbfd0000a3fd0000e2fd00009bfd0000edfd
fafd0000a9fd0000d8fd0000a7fd0000dbfd0000a4fd0000e1fd00009cfd0000edfd
fafd0000a9fd0000d8fd0000a7fd0000dbfd0000a3fd0000e2fd00009bfd0000eefd
fafd0000a9fd0000d7fd0000a8fd0000dbfd0000a3fd0000e1fd00009bfd0000effd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a4fd0000e0fd00009cfd0000effd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a3fd0000e1fd00009bfd0000f0fd
fafd0000a9fd0000d7fd0000a8fd0000dafd0000a3fd0000e0fd00009cfd0000f0fd
fafd0000a9fd0000d7fd0000a7fd0000dafd0000a4fd0000e0fd00009bfd0000f1fd
fafd0000a9fd0000d6fd0000a8fd0000dafd0000a3fd0000e0fd00009bfd0000f2fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a4fd0000e0fd00009bfd0000f2fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a4fd0000dffd00009bfd0000f3fd
fafd0000a9fd0000d6fd0000a8fd0000d9fd0000a3fd0000dffd00009cfd0000f3fd
fafd0000a9fd0000d6fd0000a7fd0000d9fd0000a4fd0000dffd00009bfd0000f4fd
fafd0000a9fd0000d6fd0000a7fd0000d9fd0000a3fd0000dffd00009cfd0000f4fd
fafd0000a9fd0000d5fd0000a8fd0000d9fd0000a3fd0000dffd00009bfd0000f5fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a4fd0000defd00009bfd0000f6fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a3fd0000dffd00009bfd0000f6fd
fafd0000a9fd0000d5fd0000a8fd0000d8fd0000a3fd0000defd00009bfd0000f7fd
fafd0000a9fd0000d5fd0000a7fd0000d8fd0000a4fd0000ddfd00009cfd0000f7fd
fafd0000a9fd0000d5fd0000a7fd0000d8fd0000a3fd0000defd00009bfd0000f8fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a4fd0000ddfd00009cfd0000f8fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a4fd0000ddfd00009bfd0000f9fd
fafd0000a9fd0000d4fd0000a8fd0000d7fd0000a3fd0000ddfd00009bfd0000fafd
fafd0000a9fd0000d4fd0000a8fd0000d6fd0000a4fd0000dcfd00009cfd0000fafd
fafd0000a9fd0000d4fd0000a7fd0000d7fd0000a3fd0000ddfd00009bfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d7fd0000a3fd0000dcfd00009cfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a4fd0000dcfd00009bfd0000fcfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a3fd0000dcfd00009cfdff00fdfd
fafd0000a9fd0000d3fd0000a8fd0000d6fd0000a3fd0000dcfd00009dfd0000fbfd
fafd0000a9fd0000d3fd0000a8fd0000d5fd0000a4fd0000dbfd0000a0fdff00fafd
fafd0000a9fd0000d3fd0000a7fd0000d6fd0000a3fd0000dbfd0000a3fdff00f8fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a4fd0000dbfd0000a5fdff00f6fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a3fd0000dbfd0000a7fd0000f4fd
fafd0000a9fd0000d2fd0000a8fd0000d5fd0000a3fd0000dbfd0000a9fdff00f3fd
fafd0000a9fd0000d2fd0000a8fd0000d4fd0000a4fd0000dafd0000acfdff00f1fd
fafd0000a9fd0000d2fd0000a7fd0000d5fd0000a3fd0000dbfd0000aefdff00effd
fafd0000a9fd0000d2fd0000a7fd0000d5fd0000a3fd0000dafd0000b0fd0000edfd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a4fd0000d9fd0000b3fdff00ecfd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a6fdfe00d9fd0000b5fdff00eafd
fafd0000a9fd0000d1fd0000a8fd0000d4fd0000a9fdfe00d5fd0000b7fd0000e8fd
fafd0000a9fd0000d1fd0000a8fd0000d3fd0000adfdfe00d2fd0000b9fdff00e7fd
fafd0000a9fd0000d1fd0000a7fd0000d4fd0000affdff00cefd0000bcfdff00e5fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b3fdfe00cbfd0000bffdff00e3fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b6fdfe00c8fd0000c0fd0000e1fd
fafd0000a9fd0000d0fd0000a8fd0000d3fd0000b9fdfe00c4fd0000c3fdff00e0fd
fafd0000a9fd0000d0fd0000a8fd0000d2fd0000bcfdff00c1fd0000c5fdff00defd
fafd0000a9fd0000d0fd0000a8fd0000d2fd0000bffdfe00befd0000c8fdff00dcfd
fafd0000a9fd0000d0fd0000aafdfd00d3fd0000c2fdfe00bbfd0000c9fd0000dafd
fafd0000a9fd0000cffd0000b1fdfb00cefd0000c6fdfe00b7fd0000ccfdff00d9fd
fafd0000a9fd0000cffd0000b7fdfb00c8fd0000c8fdff00b3fd0000cffdff00d7fd
fafd0000a9fd0000cffd0000bcfdfc00c2fd0000cbfdfe00b1fd0000d0fd0000d5fd
fafd0000a9fd0000cffd0000c2fdfb00bcfd0000cffdfe00adfd0000d3fdff00d4fd
fafd0000a9fd0000cffd0000c8fdfb00b6fd0000d2fdfe00aafd0000d5fdff00d2fd
fafd0000a9fd0000cffd0000cdfdfc00affd0000d5fdff00a6fd0000d8fdff00d0fd
fafd0000a9fd0000cefd0000d4fdfb00aafd0000d8fdfe00a4fd0000d9fd0000cefd
fafda700cefd0000dafdfb00a4fd0000dbfdfe00a0fd0000dcfdff00cdfd
80fdeefd0000dffdfc009dfd0000dffdfe009cfd0000dffdff00cbfd
80fdeefd0000e5fdfb0098fd0000e1fdff0099fd0000e1fdff00c9fd
80fdeefd0000ebfdfb0092fd0000e4fdfe0096fd0000e3fd0000c7fd
80fdedfd0000f1fdfc008bfd0000e8fdfe0093fd0000e5fdff00c6fd
80fdedfd0000f7fdfb0086fd0000ebfdfe008ffd0000e8fdff00c4fd
80fdedfd0000fdfdfb0080fd0000edfdff008cfd0000eafdff00c2fd
80fdedfdfc0080fdfafd0000f1fdfe0089fd0000ecfd0000c0fd
80fd80fde1fd0000f4fdfe0085fd0000effdff00bffd
80fd80fde0fd0000f8fdfe0082fd0000f1fdff00bdfd
80fd80fde0fd0000fafdff0080fdfffd0000f3fd0000bbfd
80fd80fde0fd0000fdfdfe0080fdfdfd0000f5fdff00bafd
80fd80fddffdfd0080fdf9fd0000f8fdff00b8fd
80fd80fddffd000080fdf5fd0000fbfdff00b6fd
80fd80fd80fdd2fd0000fcfd0000b4fd
80fd80fd80fdd1fd0000fffdff00b3fd
80fd80fd80fdd1fdfe00b1fd
80fd80fd80fdd0fd0000b0fd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80fd80fd80fd80fdfffd
80f680f680f680f6fff6
restore
gr
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 1184 CB
1460 7 226 1200 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 1278 895 (Drawing Geometric Objects) 895 SB
/fm 256 def
225 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
688 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
730 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
772 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
814 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
856 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
898 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
940 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
982 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1024 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1066 1355 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1108 1355 M -12 0 0 -7 12 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1523 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1528 1745 (At the highest level of abstraction, there are three basic drawing operations: clearing the) 1745 SB
345 1587 1304 (window, drawing a geometric object, and drawing a raster object.) 1304 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1694 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1699 1825 (All the curved lines and surfaces you've seen are approximated by large numbers of little flat) 1825 SB
345 1758 500 (polygons or straight lines) 500 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1865 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1870 1824 (OpenGL\222s default style of drawing graphics is immediate-mode. This specifies that OpenGL) 1824 SB
345 1929 1772 (will draw the object when you issue the command. The other mode is display list drawing) 1772 SB
345 1988 1782 (which store the drawing commands for later usage. Display lists are more efficient and we) 1782 SB
345 2047 457 (will look at those later.) 457 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2241 527 (Clearing the Window) 527 SB
/fm 256 def
225 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 2301 M -13 0 0 -6 13 0 0 6 4 PP
1 F
n
/fm 256 def
514 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
550 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
586 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
622 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
658 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
694 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
730 2301 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 2371 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2376 1760 (Drawing on a computer screen is different from drawing on paper in that the paper starts) 1760 SB
345 2435 1782 (out white, and all you have to do is draw the picture. On a computer, the memory holding) 1782 SB
345 2494 1823 (the picture is usually filled with the last picture you drew, so you typically need to clear it to) 1823 SB
345 2553 1266 (some background color before you start to draw the new scene.) 1266 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2660 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2665 823 (This is how to clear the window to black:) 823 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2767 825 (glClearColor\(0.0, 0.0, 0.0, 0.0\);) 825 SB
339 2812 725 (glClear\(GL_COLOR_BUFFER_BIT\);) 725 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 17 17
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (17) 42 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 314 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 319 1671 (The first line sets the clearing color to black, and the next command clears the entire) 1671 SB
345 378 1236 (window to the current clearing color. The single parameter to ) 1236 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1581 378 185 (glClear\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1766 378 317 ( indicates which) 317 SB
345 437 1763 (buffers are to be cleared. In this case, the program clears only the color buffer, where the) 1763 SB
345 496 749 (image displayed on the screen is kept.) 749 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 603 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 608 1786 (Typically, you set the clearing color once, early in your application, and then you clear the) 1786 SB
345 667 1765 (buffers as often as necessary. OpenGL keeps track of the current clearing color as a state) 1765 SB
345 726 1487 (variable rather than requiring you to specify it each time a buffer is cleared.) 1487 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 835 456 (Specifying a Color) 456 SB
0 0 0 fC
/fm 256 def
225 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 895 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 965 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 970 1784 (With OpenGL, the description of the shape of an object being drawn is independent of the) 1784 SB
345 1029 1773 (description of its color. Whenever a particular geometric object is drawn, it's drawn using) 1773 SB
345 1088 787 (the currently specified coloring scheme.) 787 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1195 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1200 1766 (Until the color or coloring scheme is changed, all objects are drawn in that color or using) 1766 SB
345 1259 1819 (that coloring scheme. This method helps OpenGL achieve higher drawing performance than) 1819 SB
345 1318 1082 (would result if it didn't keep track of the current color.) 1082 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1425 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1430 584 (For example, the pseudocode) 584 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 1532 575 (set_current_color\(red\);) 575 SB
339 1577 375 (draw_object\(A\);) 375 SB
339 1622 375 (draw_object\(B\);) 375 SB
339 1667 625 (set_current_color\(green\);) 625 SB
339 1712 600 (set_current_color\(blue\);) 600 SB
339 1757 375 (draw_object\(C\);) 375 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1852 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1857 1751 (draws objects A and B in red, and object C in blue. The command on the fourth line that) 1751 SB
345 1916 806 (sets the current color to green is wasted.) 806 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2023 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2028 662 (To set a color, use the command ) 662 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1007 2028 241 (glColor3f\(\).) 241 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1248 2028 836 ( It takes three parameters, all of which are) 836 SB
345 2087 1768 (floating-point numbers between 0.0 and 1.0. The parameters are, in order, the red, green,) 1768 SB
345 2146 677 (and blue components of the color.) 677 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (18) 42 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 292 867 (Table 1-2: Color mappings to RGB values) 867 SB
128 128 128 fC
/fm 256 def
997 5 201 447 B
1 F
n
/fm 256 def
5 5 1199 447 B
1 F
n
/fm 256 def
687 5 1205 447 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 997 91 202 447 CB
225 468 204 (Command) 204 SB
gr
gs 694 91 1199 447 CB
1223 468 114 (Color) 114 SB
gr
128 128 128 fC
/fm 256 def
997 2 201 538 B
1 F
n
/fm 256 def
2 2 1199 538 B
1 F
n
/fm 256 def
690 2 1202 538 B
1 F
n
0 0 0 fC
gs 997 88 202 538 CB
225 556 479 (glColor3f\(0.0, 0.0, 0.0\);) 479 SB
gr
gs 694 88 1199 538 CB
1223 556 105 (black) 105 SB
gr
gs 997 85 202 626 CB
225 641 479 (glColor3f\(1.0, 0.0, 0.0\);) 479 SB
gr
gs 694 85 1199 626 CB
1223 641 64 (red) 64 SB
gr
gs 997 85 202 711 CB
225 726 479 (glColor3f\(0.0, 1.0, 0.0\);) 479 SB
gr
gs 694 85 1199 711 CB
1223 726 110 (green) 110 SB
gr
gs 997 85 202 796 CB
225 811 479 (glColor3f\(1.0, 1.0, 0.0\);) 479 SB
gr
gs 694 85 1199 796 CB
1223 811 131 (yellow) 131 SB
gr
gs 997 85 202 881 CB
225 896 479 (glColor3f\(0.0, 0.0, 1.0\);) 479 SB
gr
gs 694 85 1199 881 CB
1223 896 83 (blue) 83 SB
gr
gs 997 85 202 966 CB
225 981 479 (glColor3f\(1.0, 0.0, 1.0\);) 479 SB
gr
gs 694 85 1199 966 CB
1223 981 167 (magenta) 167 SB
gr
gs 997 85 202 1051 CB
225 1066 479 (glColor3f\(0.0, 1.0, 1.0\);) 479 SB
gr
gs 694 85 1199 1051 CB
1223 1066 91 (cyan) 91 SB
gr
128 128 128 fC
/fm 256 def
997 5 201 1221 B
1 F
n
/fm 256 def
5 5 1199 1221 B
1 F
n
/fm 256 def
687 5 1205 1221 B
1 F
n
0 0 0 fC
gs 997 85 202 1136 CB
225 1151 479 (glColor3f\(1.0, 1.0, 1.0\);) 479 SB
gr
gs 694 85 1199 1136 CB
1223 1151 109 (white) 109 SB
gr
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1364 785 (Forcing Completion of Drawing) 785 SB
/fm 256 def
225 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
622 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
658 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
694 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
730 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
766 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
802 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
838 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
874 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
910 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
946 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
982 1424 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1494 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1499 1760 (Most modern graphics systems can be thought of as an assembly line, sometimes called a) 1760 SB
345 1558 1705 (graphics pipeline. The main central processing unit \(CPU\) issues a drawing command,) 1705 SB
345 1617 1766 (perhaps other hardware does geometric transformations, clipping occurs, then shading or) 1766 SB
345 1676 1698 (texturing is performed, and finally, the values are written into the bitplanes for display) 1698 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1783 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1788 1764 (The client server model of OpenGL uses packets of drawing commands as the method of) 1764 SB
345 1847 1822 (communication. These packets hold a number of drawing commands and the client will wait) 1822 SB
345 1906 1765 (for the packet to be filled before sending it to the server. This can result in a few drawing) 1765 SB
345 1965 1321 (commands getting \223stuck\224 in the transmission packet on the client.) 1321 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2072 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2077 971 (For this reason, OpenGL provides the command ) 971 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1316 2077 198 (glFlush\(\),) 198 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1514 2077 616 ( which forces the client to send) 616 SB
345 2136 1718 (the network packet even though it might not be full. Where there is no network and all) 1718 SB
345 2195 1143 (commands are truly executed immediately on the server,  ) 1143 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1488 2195 185 (glFlush\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1673 2195 431 ( might have no effect.) 431 SB
345 2254 1830 (However, if you're writing a program that you want to work properly both with and without) 1830 SB
345 2313 551 (a network, include a call to ) 551 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
896 2313 185 (glFlush\(\)) 185 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1081 2313 682 ( at the end of each frame or scene.) 682 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (19) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 309 CB
1460 7 226 325 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 403 908 (Drawing Graphic Primitives) 908 SB
/fm 256 def
225 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
813 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
855 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
897 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
939 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
981 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1023 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1065 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
1107 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
225 613 133 (Points) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 685 1665 (A point is represented by a set of floating-point numbers called a vertex. All internal) 1665 SB
339 744 1778 (calculations are done as if vertices are three-dimensional. Vertices specified by the user as) 1778 SB
339 803 1792 (two-dimensional \(that is, with only x and y coordinates\) are assigned a z co-ordinate equal) 1792 SB
339 862 387 (to zero by OpenGL) 387 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
225 934 116 (Lines) 116 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 1006 1825 (In OpenGL, line means line segment, not the mathematician's version that extends to infinity) 1825 SB
339 1065 1754 (in both directions. There are easy ways to specify a connected series of line segments, or) 1754 SB
339 1124 1771 (even a closed, connected series of segments. In all cases, though, the lines comprising the) 1771 SB
339 1183 1424 (connected series are specified in terms of the vertices at their endpoints.) 1424 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
225 1255 190 (Polygons) 190 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 1327 1715 (Polygons are the areas enclosed by single closed loops of line segments, where the line) 1715 SB
339 1386 1801 (segments are specified by the vertices at their endpoints. Polygons are typically drawn with) 1801 SB
339 1445 1773 (the pixels in the interior filled in, but you can also draw them as outlines or a set of points) 1773 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
225 1517 229 (Rectangles) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 1589 1660 (Since rectangles are so common in graphics applications, OpenGL provides a filled-) 1660 SB
339 1648 570 (rectangle drawing primitive, ) 570 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
909 1648 199 (glRect*\(\).) 199 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1108 1648 995 ( You can draw a rectangle as a but your particular) 995 SB
339 1707 998 (implementation of OpenGL might have optimized ) 998 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1337 1707 186 (glRect*\(\)) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1523 1707 297 ( for rectangles.) 297 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1873 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1878 1799 (How to draw an OpenGL Primitive, the following code specifies the vertices for a polygon) 1799 SB
345 1937 335 (show in figure 3:) 335 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2039 500 (glBegin\(GL_POLYGON\);) 500 SB
339 2084 50 (  ) 50 SB
389 2084 600 (   glVertex2f\(0.0, 0.0\);) 600 SB
339 2129 50 (  ) 50 SB
389 2129 600 (   glVertex2f\(0.0, 3.0\);) 600 SB
339 2174 50 (  ) 50 SB
389 2174 600 (   glVertex2f\(3.0, 3.0\);) 600 SB
339 2219 50 (  ) 50 SB
389 2219 600 (   glVertex2f\(4.0, 1.5\);) 600 SB
339 2264 50 (  ) 50 SB
389 2264 600 (   glVertex2f\(3.0, 0.0\);) 600 SB
339 2309 200 (glEnd\(\);) 200 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 2454 985 (Figure 1-3: Drawing a Polygon or Set of Points) 985 SB
/bytestr 246 string def
gs 769 331 225 2537 CB
save 225 2537 translate 769 331 scale
246 106 8
[246 0 0 -106 0 106]
{unpack} bind
image
80f68cf6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f6ecfdf90080fdf6fdf900bffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f6fafdfe00fffd0000fffdfb00f8fd0000f5fdfe00fdfdfb00fdfd0000f9fdfe00fffd0000fcfdfe00fcfd0000fcfdff00c7fdfe00fffd0000fffdfb00f8fd0000f5fdfe00fbfd0200fd00fcfdff00fbfd0000fbfdfe00effdfff6
00f6fcfdff00fefdfe00fffd0000f3fd0000f7fdff00fefdff00fffd0000f8fd0000fbfdff00fefdfe00fefdff00fefdff00fefd0000fcfdff00c9fdff00fefdfe00fffd0000f3fd0000f7fdff00fefdff00fdfd0200fd00fcfdff00fbfd0000fdfdff00fefdff00f1fdfff6
00f6fcfd0000fbfd0000fffd0000f3fd0000f7fd0000fcfd0000fffd0000f8fd0000fbfd0000fbfd0000fefd0000fcfd0000fefd0000fdfd0200fd00c9fd0000fbfd0000fffd0000f3fd0000f7fd0000fcfd0000fdfd0200fd00fdfd0200fd00fbfd0000fdfd0000fcfd0000f1fdfff6
00f6fdfd0000fafd0000fffd0000f3fd0000f8fd0000fafd0200fd00f8fd0000fcfd0000fafd0000fffd0000fafd0000fffd0000fdfd0200fd00cafd0000fafd0000fffd0000f3fd0000f8fd0000fafd0000fefd0200fd00fdfd0200fd00fbfd0000f7fd0000f1fdfff6
00f6fdfd0000fafd0000fffd0000f3fd0000f8fd0000fafd0200fd00f9fdfe00fdfd0000fafd0000fffd0000fafd0000fffd0000fefd0000fffd0000cafd0000fafd0000fffd0000f3fd0000f8fd0000fafd0000fefd0200fd00fefd0000fffd0000fbfd0000f8fdff00f1fdfff6
00f6fdfd0000fdfdfd00fffd0000f3fdfb00fdfd0000fafd0200fd00f9fd0200fd00fdfd0000fdfdfd00fffd0000fafd0000fffd0000fefd0000fffd0000cafd0000fdfdfd00fffd0000f3fdfb00fdfd0000fafd0000fefd0200fd00fefd0000fffd0000fbfd0000fafdff00effdfff6
00f6fdfd0000f7fd0000f3fd0000fdfdff00fefd0000fafd0200fd00fafd0000fefd0000fefd0000f7fd0000fafd0000fffd0000fffd0000fefd0000cafd0000f7fd0000f3fd0000fdfdff00fefd0000fafd0000fefd0200fd00fffd0000fefd0000fbfd0000fcfdff00edfdfff6
00f6fdfd0000f7fd0000f3fd0000fcfd0000fefd0000fafd0200fd00fafd0000fefd0000fefd0000f7fd0000fafd0000fffd0000fffd0000fefd0000cafd0000f7fd0000f3fd0000fcfd0000fefd0000fafd0000fefd0200fd00fffd0000fefd0000fbfd0000fdfd0000ebfdfff6
00f6fcfd0000fbfd0000fffd0000f3fd0000fcfd0000fdfd0000fcfd0000fffd0000fbfd0000fcfd0000fefd0000fbfd0000fefd0000fcfd0000fefd0200fd00fdfd0000c9fd0000fbfd0000fffd0000f3fd0000fcfd0000fdfd0000fcfd0000fdfd0400fd00fd00fdfd0000fbfd0000fdfd0000fcfd0000f1fdfff6
00f6fcfdff00fdfdff00fffd0000f3fd0000fdfdff00fdfdff00fefdff00fffd0000fcfdff00fcfdff00fffdff00fdfdff00fefdff00fefdff00fefd0200fd00fdfd0000c9fdff00fdfdff00fffd0000f3fd0000fdfdff00fdfdff00fefdff00fdfd0400fd00fd00fdfd0000fbfd0000fdfdff00fefdff00f1fdfff6
00f6fafdfd00fdfd0000f3fdfb00fafdfe00fdfd0000fcfd0000fafd0000fdfdfd00fafdfe00fcfdff00fcfd0000c7fdfd00fdfd0000f3fdfb00fafdfe00fbfd0100fdff00fcfd0000fffdf800fffdfe00effdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fdf2fdfe00c6fdfe00dffdfff6
00f680fdf3fdfc00c8fdfc00e0fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f6fcfdc000b9fdfa00cafdfa00e1fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd0000b9fdfc00c8fdfc00e0fdfff6
00f6fcfd0000c0fd0000b9fdfe00c6fdfe00dffdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fdd8fdfff6
00f6fcfd0000befd000080fdd9fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddafdfff6
00f6fcfd0000bcfd000080fddbfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddcfdfff6
00f6fcfd0000bafd000080fdddfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddefdfff6
00f6fcfd0000b8fd000080fddffdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde0fdfff6
00f6fcfd0000b6fd000080fde1fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde2fdfff6
00f6fcfd0000b5fd000080fde2fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde3fdfff6
00f6fcfd0000b3fd000080fde4fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde5fdfff6
00f6fcfd0000b1fd000080fde6fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde7fdfff6
00f6fcfd0000affd000080fde8fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde9fdfff6
00f6fcfd0000adfd000080fdeafdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdebfdfff6
00f6fcfd0000abfd000080fdecfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdedfdfff6
00f6fcfd0000a9fd000080fdf9fdfe00f9fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdfbfdfc00fafdfff6
00f6fcfd0000a9fd000080fdfbfdfa00fbfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdfafdfa00fbfdfff6
00f6fcfd0000abfd000080fdf9fdfa00fbfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fdf7fdfc00fafdfff6
00f6fcfd0000adfd000080fdf5fdfe00f9fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde9fdfff6
00f6fcfd0000affd000080fde8fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde7fdfff6
00f6fcfd0000b1fd000080fde6fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde5fdfff6
00f6fcfd0000b3fd000080fde4fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0200fd0080fde3fdfff6
00f6fcfd0000b5fd000080fde2fdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde2fdfff6
00f6fcfd0000b6fd000080fde1fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fde0fdfff6
00f6fcfd0000b8fd000080fddffdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddefdfff6
00f6fcfd0000bafd000080fdddfdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddcfdfff6
00f6fcfd0000bcfd000080fddbfdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fddafdfff6
00f6fcfd0000befd000080fdd9fdfff6
00f6fcfd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd000080fdd8fdfff6
00f6fcfd0000c0fd0000b9fdfe00c6fdfe00dffdfff6
00f6fcfd0200fd00fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fefd0000fffd0000b9fdfc00c8fdfc00e0fdfff6
00f6fcfdc000b9fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf4fdfa00cafdfa00e1fdfff6
00f680fdf3fdfc00c8fdfc00e0fdfff6
00f680fdf2fdfe00c6fdfe00dffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
00f680fd8ffdfff6
80f68cf6
restore
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (20) 42 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 399 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 404 1758 (If you had used GL_POINTS instead of GL_POLYGON, the primitive would have been) 1758 SB
345 463 754 (simply the five points shown in Figure) 754 SB
1099 463 188 ( 2 . Table) 188 SB
1287 463 857 ( 1-2  in the following function summary for) 857 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
345 522 189 (glBegin\(\)) 189 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
534 522 1438 ( lists the ten possible arguments and the corresponding type of primitive.) 1438 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
225 679 598 (void glBegin\(GLenum mode\);) 598 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 751 1677 (Marks the beginning of a vertex list that describes a geometric primitive. The type of) 1677 SB
339 810 1417 (primitive is indicated by mode, which can be any of the values shown in) 1417 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 967 1108 (Table 1-3: Geometric Primitive Names and Meanings) 1108 SB
128 128 128 fC
/fm 256 def
571 5 201 1122 B
1 F
n
/fm 256 def
5 5 773 1122 B
1 F
n
/fm 256 def
1417 5 779 1122 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 571 91 202 1122 CB
225 1143 117 (Value) 117 SB
gr
gs 1424 91 773 1122 CB
797 1143 173 (Meaning) 173 SB
gr
128 128 128 fC
/fm 256 def
571 2 201 1213 B
1 F
n
/fm 256 def
2 2 773 1213 B
1 F
n
/fm 256 def
1420 2 776 1213 B
1 F
n
0 0 0 fC
gs 571 88 202 1213 CB
225 1231 267 (GL_POINTS) 267 SB
gr
gs 1424 88 773 1213 CB
797 1231 327 (individual points) 327 SB
gr
gs 571 85 202 1301 CB
225 1316 233 (GL_LINES) 233 SB
gr
gs 1424 85 773 1301 CB
797 1316 1083 (pairs of vertices interpreted as individual line segments) 1083 SB
gr
gs 571 85 202 1386 CB
225 1401 329 (GL_POLYGON) 329 SB
gr
gs 1424 85 773 1386 CB
797 1401 757 (boundary of a simple, convex polygon) 757 SB
gr
gs 571 85 202 1471 CB
225 1486 368 (GL_TRIANGLES) 368 SB
gr
gs 1424 85 773 1471 CB
797 1486 806 (triples of vertices interpreted as triangles) 806 SB
gr
gs 571 85 202 1556 CB
225 1571 262 (GL_QUADS) 262 SB
gr
gs 1424 85 773 1556 CB
797 1571 1129 (quadruples of vertices interpreted as four-sided polygons) 1129 SB
gr
gs 571 85 202 1641 CB
225 1656 367 (GL_LINE_STRIP) 367 SB
gr
gs 1424 85 773 1641 CB
797 1656 659 (series of connected line segments) 659 SB
gr
gs 571 85 202 1726 CB
225 1741 360 (GL_LINE_LOOP) 360 SB
gr
gs 1424 85 773 1726 CB
797 1741 1355 (same as above, with a segment added between last and  first vertices) 1355 SB
gr
gs 571 85 202 1811 CB
225 1826 502 (GL_TRIANGLE_STRIP) 502 SB
gr
gs 1424 85 773 1811 CB
797 1826 456 (linked strip of triangles) 456 SB
gr
gs 571 85 202 1896 CB
225 1911 463 (GL_TRIANGLE_FAN) 463 SB
gr
gs 1424 85 773 1896 CB
797 1911 429 (linked fan of triangles) 429 SB
gr
128 128 128 fC
/fm 256 def
571 5 201 2066 B
1 F
n
/fm 256 def
5 5 773 2066 B
1 F
n
/fm 256 def
1417 5 779 2066 B
1 F
n
0 0 0 fC
gs 571 85 202 1981 CB
225 1996 396 (GL_QUAD_STRIP) 396 SB
gr
gs 1424 85 773 1981 CB
797 1996 555 (linked strip of quadrilaterals) 555 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 21 21
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (21) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 1037 (Restriction on using glBegin\(\) and glEnd\(\)) 1037 SB
0 0 0 fC
/fm 256 def
225 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
693 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
729 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
766 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
802 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
838 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
874 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
910 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
946 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
982 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1018 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1054 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1090 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1126 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1162 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1198 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1234 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 459 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 464 1723 (The most important aspect of  vertices are their coordinates, which are specified by the) 1723 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
345 523 201 (glVertex\(\)) 201 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
546 523 1558 ( command. You can also supply additional vertex specific information for each) 1558 SB
345 582 1789 (vertex - a color, a normal vector, texture coordinates, or any combination of the following) 1789 SB
345 641 226 (commands:) 226 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 798 1225 (Table 1-4: Valid commands between glBegin\(\) and glEnd\(\)) 1225 SB
128 128 128 fC
/fm 256 def
678 5 201 953 B
1 F
n
/fm 256 def
5 5 880 953 B
1 F
n
/fm 256 def
1306 5 886 953 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
gs 678 91 202 953 CB
225 974 204 (Command) 204 SB
gr
gs 1313 91 880 953 CB
904 974 422 (Purpose of command) 422 SB
gr
128 128 128 fC
/fm 256 def
678 2 201 1044 B
1 F
n
/fm 256 def
2 2 880 1044 B
1 F
n
/fm 256 def
1309 2 883 1044 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
gs 678 88 202 1044 CB
225 1062 226 (glVertex*\(\)) 226 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 88 880 1044 CB
904 1062 418 (set vertex commands) 418 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1132 CB
225 1147 213 (glColor*\(\)) 213 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1132 CB
904 1147 327 (set current color) 327 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1217 CB
225 1232 208 (glIndex*\(\)) 208 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1217 CB
904 1232 447 (set current color index) 447 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1302 CB
225 1317 249 (glNormal*\(\)) 249 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1302 CB
904 1317 587 (set normal vertex coordinates) 587 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1387 CB
225 1402 316 (glEvalCoord*\(\)) 316 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1387 CB
904 1402 412 (generate coordinates) 412 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1472 CB
225 1487 511 (glCallList\(\), glCallLists\(\)) 511 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1472 CB
904 1487 427 (execute display list\(s\)) 427 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1557 CB
225 1572 296 (glTexCoord*\(\)) 296 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1557 CB
904 1572 452 (set texture coordinates) 452 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
gs 678 85 202 1642 CB
225 1657 279 (glEdgeflag*\(\)) 279 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1642 CB
904 1657 496 (control drawing of edges) 496 SB
gr
128 128 128 fC
/fm 256 def
678 5 201 1812 B
1 F
n
/fm 256 def
5 5 880 1812 B
1 F
n
/fm 256 def
1306 5 886 1812 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
gs 678 85 202 1727 CB
225 1742 272 (glMaterial*\(\)) 272 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1313 85 880 1727 CB
904 1742 441 (set material properties) 441 SB
gr
32 0 0 50 50 0 0 0 50 /Symbol font
285 1953 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1958 998 (No other OpenGL commands are valid between a ) 998 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1343 1958 189 (glBegin\(\)) 189 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1532 1958 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1629 1958 153 (glEnd\(\)) 153 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1782 1958 342 ( pair, making any) 342 SB
345 2017 1783 (other OpenGL call will generate and error. Note though that only OpenGL commands are) 1783 SB
345 2076 1354 (restricted.  For example the following code draws an outlined circle:) 1354 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2192 650 (#define PI 3.1415926535897) 650 SB
339 2237 650 (Glint circle_points = 100;) 650 SB
339 2282 550 (glBegin\(GL_LINE_LOOP\);) 550 SB
339 2327 900 (for \(I = 0;I < circle_points; I++\) {) 900 SB
339 2372 925 (   angle = 2 * PI * I /circle_points;) 925 SB
339 2417 950 (   glVertex2f\(cos\(angle\), sin\(angle\)\);) 950 SB
339 2462 25 (}) 25 SB
339 2507 200 (glEnd\(\);) 200 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2602 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2607 1788 (This is of course not the most efficient method of drawing a circle, more efficient methods) 1788 SB
345 2666 1635 (include storing the vertexes in an array, create a display list, or use a GLU routine.) 1635 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 22 22
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (22) 42 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 192 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 197 1279 (You can use any combination of the twenty-four versions of the ) 1279 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1624 197 226 (glVertex*\(\)) 226 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1850 197 206 ( command) 206 SB
345 256 252 (between the ) 252 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
597 256 189 (glBegin\(\)) 189 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
786 256 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
883 256 166 (glEnd\(\),) 166 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1049 256 934 ( although in real applications all the calls in any) 934 SB
345 315 945 (particular instance tends to be of the same type.) 945 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 509 953 (Displaying Points, Lines, and Polygons) 953 SB
0 0 0 fC
/fm 256 def
225 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
621 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
657 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
693 569 M -13 0 0 -6 13 0 0 6 4 PP
1 F
n
/fm 256 def
730 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
766 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
802 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
838 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
874 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
910 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
946 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
982 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1018 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1054 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1090 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1126 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
1162 569 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 639 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 644 1737 (By default, a point is drawn as a single pixel on the screen, a line is drawn solid and one) 1737 SB
345 703 1764 (pixel wide, and polygons are drawn solidly filled in. The following commands control the) 1764 SB
345 762 903 (display modes for the default drawing modes.) 903 SB
225 920 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 919 237 (glPointSize) 237 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
562 920 186 (\(GLfloat ) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
748 920 74 (size) 74 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
822 920 17 (\)) 17 SB
339 992 877 (Sets the width in pixels for rendered points, ) 877 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1216 992 74 (size) 74 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1290 992 832 ( must be greater than 0.0 and by default is) 832 SB
339 1051 63 (1.0) 63 SB
225 1209 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1208 272 (glLineWidth) 272 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
597 1209 186 (\(GLfloat ) 186 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
783 1209 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
892 1209 17 (\)) 17 SB
339 1281 845 (Sets the width in pixels for rendered lines; ) 845 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1184 1281 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1293 1281 832 ( must be greater than 0.0 and by default is) 832 SB
339 1340 76 (1.0.) 76 SB
225 1498 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1497 285 (glLineStipple) 285 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
610 1498 147 (\(GLint ) 147 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
757 1498 120 (factor) 120 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
877 1498 213 (, Glushort ) 213 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1090 1498 144 (pattern) 144 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1234 1498 17 (\)) 17 SB
339 1570 937 (Sets the current stippling pattern for lines. The ) 937 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1276 1570 144 (pattern) 144 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1420 1570 725 ( argument is a 16 bit series of 0s and) 725 SB
339 1629 1789 (1s, and is repeated as necessary to stipple a given line. The pattern can be stretched out by) 1789 SB
339 1688 118 (using ) 118 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
457 1688 120 (factor) 120 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
577 1688 1546 (, which multiplies each subseries of consecutive 1s and 0s. Line stippling must) 1546 SB
339 1747 932 (be enabled by passing GL_LINE_STIPPLE to ) 932 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1271 1747 231 (glEnable\(\);) 231 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1502 1747 655 ( it\222s disabled by passing the same) 655 SB
339 1806 254 (argument to ) 254 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
593 1806 240 (glDisable\(\).) 240 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1964 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1963 332 (glPolygonMode) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
657 1964 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
861 1964 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
945 1964 195 (, Glenum ) 195 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1140 1964 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1248 1964 30 (\);) 30 SB
339 2036 1560 (Controls the drawing mode for a polgons front and back faces. The parameter ) 1560 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1899 2036 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1983 2036 140 ( can be) 140 SB
339 2095 1162 (GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK; ) 1162 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1501 2095 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1609 2095 405 ( can be GL_POINT,) 405 SB
339 2154 1652 (GL_LINE or GL_FILL to indicate whether the polygon should be drawn as points,) 1652 SB
339 2213 1509 (outlined, or filled. By default, both the front and back faces are drawn filled.) 1509 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (23) 42 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 327 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 332 1744 (In general, polygons can be complicated, so OpenGL makes some strong restrictions on) 1744 SB
345 391 735 (what constitutes a primitive polygon.) 735 SB
342 475 51 (1. ) 60 SB
402 475 1632 (The edges of a OpenGL polygon can\222t intersect \(a mathematician would call this a) 1632 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
402 534 304 (simple polygon) 304 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
706 534 17 (\)) 17 SB
342 618 51 (2. ) 60 SB
402 618 1316 (OpenGL polygons must be convex, they cannot have indentations.) 1316 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 725 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 730 1797 (Note that polygons with holes cannot be described. They are nonconvex, and they can\222t be) 1797 SB
345 789 1110 (drawn with a boundary made up of a single closed loop.) 1110 SB
32 0 0 50 50 0 0 0 46 /Times-BoldItalic /font30 ANSIFont font
225 946 815 (Figure 1-4: Valid and Invalid Polygons) 815 SB
/bytestr 319 string def
gs 997 253 225 1114 CB
save 225 1114 translate 997 253 scale
319 81 8
[319 0 0 -81 0 81]
{unpack} bind
image
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ffd3ff0000ffff0000fdff0000fdff0000fcfffd0001ff00ffff0000ffff0000fdfffe0001ff0099ff
80ffd3ff0000ffff0000fdff0000fdff0000fdff0000fdffff00ffff0000ffff0000feff0000feffff0099ff
e9ff0000fafffd0001ff00ffff0000ffff0000fdfffe0001ff0087ff0000ffff0000fdff0000feff0200ff00feff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
e9ff0000fbff0000fdffff00ffff0000ffff0000feff0000feffff0087ff0000ffff0000fdff0000feff0200ff00feff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
eaff0200ff00fcff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000fefffe00ffff0000ffff0000ffff0000ffff0000fcff000099ff
eaff0200ff00fcff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000fbfffe00ffff0000ffff0000ffff0000fcff000099ff
ebff0000feff0000fcfffe00ffff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0000fdff0000ffff0000feff0000ffff0000fcff0000ffff0000ffff0000ffff0000fcff000099ff
ebff0000feff0000f9fffe00ffff0000ffff0000ffff0000fcff000087ff0000ffffff00feff0200ff00fcff0000ffff0000fdff0000ffff0000ffff0000feff0000feffff0099ff
ebff0000feff0000fdff0000fcff0000ffff0000ffff0000ffff0000fcff000087ff0000ffff0100fffe00ffff0000fcff0000fefffd00feff0000ffff0000fdfffe0001ff0099ff
ecff0000fcff0000fdff0000fdff0000ffff0000ffff0000feff0000feffff0087ff0000e7ff0000f6ff000099ff
ecff0000fcff0000fcfffd00feff0000ffff0000fdfffe0001ff0087ff0000e7ff0000f6ff000099ff
ecff0000fcff0000f5ff0000f6ff000087ff0000e7ff0000ffff0000f9ff000099ff
edff0000faff0000f6ff0000f6ff000080ff80fff9ff
edff0000faff0000f6ff0000ffff0000f9ff000080ff80fff9ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
fbffff0080ff80ffccff
fafffe0080ff80ffceff
faff0000fffffe0080ff80ffd1ff
f9ff0000fdffff00d0fffc0080fff6ffec00a8ff
f9ff0000fbffff00d2ff0000fdfff70080ff01ff00efff0000ebffcc00f2ff
f8ff0000fafffe00d5ff0000f3fffb0085ff0000f0ff0000eaff0000ceff0000f2ff
f8ff0000f7ffff00d8ff0000ecff0000bcffe300e9ff0000f2ffff00e9ff0000ceff0000f2ff
f7ff0000f6fffe00dbff0000ecff0000bbff0000e7ff0000e8ff0000f3ff0000e7ff0000ceff0000f2ff
f6ff0000f4ffff00ddff0000ebff0000bbff0000e9ff0000e7ff0000f4ff0000e6ff0000ceff0000f2ff
f6ff0000f2ffff00dfff0000eaff0000bbff0000ebff0000e6ff0000f5ff0000e4ff0000cfff0000f2ff
f5ff0000f1fffe00e2ff0000e9ff0000bbff0000ecff0000e6ff0000f6ff0000e3ff0000d0ff0000f1ff
f5ff0000eeffff00e5ff0000e8ff0000baff0000eeff0000e5ff0000f8ffff00e2ff0000d0ff0000f1ff
f4ff0000edfffe00e8ff0000e7ff0000baff0000f0ff0000e4ff0000f9ff0000e0ff0000d0ff0000f1ff
f3ff0000ebffff00eaff0000e6ff0000baff0000f2ff0000e3ff0000faff0000dfff0000d0ff0000f1ff
f3ff0000e9ffff00ecff0000e6ff0000b9ff0000f4ff0000e2ff0000f9ffff00e1ff0000f2fffe00e2ff0000f1ff
f2ff0000e8fffe00efff0000e5ff0000b9ff0000f6ff0000e1ff0000f7ff0000e2ff0000f2ff0000fffffb00e8ff0000f1ff
f2ff0000e5ffff00f2ff0000e3ff0000b9ff0000f8ff0000e0ff0000f6ffff00e4ff0000f3ff0000f8fffd00ecff0000f1ff
f1ff0000e4ffff00f4ff0000e3ff0000b8ff0000faff0000dfff0000f4ff0000e4ff0000f4ff0000f4ff0000edff0000f1ff
f1ff0000e4ff0000f3ff0000e2ff0000b8ff0000fbff0000dfff0000f3ffff00e6ff0000f4ff0000f4ff0000edff0000f1ff
f0ff0000e5ff0000f3ff0000e1ff0000b8ff0000fdff0000deff0000f1ff0000e7ff0000f5ff0000f2ff0000eeff0000f1ff
efff0000e7ff0000f2ff0000e0ff0000b8ff0000ffff0000ddff0000f0ffff00e9ff0000f5ff0000f2ff0000eeff0000f1ff
efff0000e7ff0000f3ff0000dfff0000b7ffff00dcff0000eeff0000eaff0000f5ff0000f1ff0000efff0000f1ff
eeff0000e9ff0000f2ff0000deff0000b8ff0000dbff0000f0ffff00e9ff0000f6ff0000f0ff0000f0ff0000f0ff
eeff0000eaff0000f1ff0000dfff0000b8ff0200ff00dcff0000f2ffff00e7ff0000f6ff0000efff0000f1ff0000f0ff
edff0000ebff0000f0ff0000e0ff0000b9ff0000feff0000ddff0000f4ffff00e5ff0000f6ff0000efff0000f1ff0000f0ff
ecff0000edff0000eeff0000e2ff0000b9ff0000fcff0000deff0000f6ffff00e3ff0000f7ff0000edff0000f2ff0000f0ff
ecff0000eeff0000ecffff00e5ff0000b8ff0000fbff0000dfff0000f8ffff00e0ff0000f8ff0000edff0000f2ff0000f0ff
ebff0000efff0000eaff0000e7ff0000b8ff0000f9ff0000e0ff0000faffff00deff0000f7ff0000edff0000f3ff0000f0ff
ebff0000f0ff0000e8ff0000e8ff0000b9ff0000f7ff0000e1ff0000fcffff00dcff0000f6ff0000eeff0000f3ff0000f0ff
eaff0000f1ff0000e7ff0000eaff0000b9ff0000f5ff0000e2ff0000fbffff00ddff0000f5ffff00f1ff0000f2ff0000f0ff
eaff0000f2ff0000e5ff0000ecff0000b9ff0000f3ff0000e3ff0000f9ff0000deff0000f3ff0000f3ff0000f1ff0000f0ff
e9ff0000f4ff0000e3ff0000edff0000baff0000f1ff0000e4ff0000f8ff0000dfff0000f2ff0000f4ff0000f1ff0000f0ff
e8ff0000f5ff0000e2ff0000efff0000baff0000efff0000e5ff0000f7ffff00e1ff0000f1ff0000f6ff0000f0ff0000f0ff
e8ff0000f6ff0000e0ffff00f2ff0000baff0000edff0000e6ff0000f5ff0000e2ff0000f0ff0000f8ff0000efff0000f0ff
e7ff0000f7ff0000deff0000f3ff0000baff0000ecff0000e7ff0000f4ffff00e3ff0000f0ff0000faff0000efff0000efff
e7ff0000f8ff0000dcff0000f5ff0000baff0000eaff0000e8ff0000f2ff0000e4ff0000efffff00fdff0000eeff0000efff
e6ff0000faff0000daff0000f7ff0000baff0000e8ff0000e9ff0000f1ff0000e5ff0000edff0000feff0000eeff0000efff
e5ff0000fbff0000d9ff0000f9ff0000baffe400eaff0000f0ffff00e7ff0000ecff0200ff00edff0000efff
e5ff0000fcff0000d7ff0000faff000086ffec00e8ffff00ecff0000ecff0000efff
e4ff0000feff0000d5ffff00fdff000080ffd6ffff00d8ff0000efff
e4ff0000feff0000d3ff0000ffff000080ffd3fffe00dcffff00efff
e3ff0200ff00d1ff0200ff0080ffd0fffe00e1ffff00edff
e3ff0200ff00d0ff000080ffccffff00e5ffff00ebff
e2ff000080ff97fffe00ebfffe00e9ff
80ff80fff5ffff00efffff00e6ff
80ff80fff3fffe00f5fffe00e4ff
80ff80fff0fffe00faffff00e1ff
80ff80ffedffff00feffff00dfff
80ff80ffebfffe00ddff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
80ff80ffc4ff
restore
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
225 1506 497 (Polygon Details) 497 SB
0 0 0 fC
/fm 256 def
225 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
478 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
520 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
562 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
604 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
646 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
688 1583 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1666 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1671 1674 (Polygons are typically drawn by filling in all the pixels enclosed within the boundary.) 1674 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1778 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1783 1822 (Polygons have two sides, a front and a back and might be rendered differently depending on) 1822 SB
345 1842 1784 (which side  is facing the viewer. This allows you to have cutaway views of solid objects in) 1784 SB
345 1901 1715 (which there is an obvious distinction between the parts that are inside and those on the) 1715 SB
345 1960 157 (outside.) 157 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2067 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2072 880 (The polygon drawing mode is controlled by:) 880 SB
225 2230 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 2229 332 (glPolygonMode) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
657 2230 204 (\(GLenmu ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
861 2230 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
945 2230 195 (, Glenum ) 195 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1140 2230 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1248 2230 30 (\);) 30 SB
339 2302 1548 (Controls the drawing mode for polygons front and back faces. The parameter ) 1548 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1887 2302 84 (face) 84 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1971 2302 140 ( can be) 140 SB
339 2361 1162 (GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK; ) 1162 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1501 2361 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1609 2361 405 ( can be GL_POINT,) 405 SB
339 2420 495 (GL_LINE, or GL_FILL.) 495 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2527 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2532 1651 (You can have the front faces filled and the back faces outlined with these two calls:) 1651 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
339 2648 825 (glPolygonMode\(GL_FRONT, GL_FILL\);) 825 SB
339 2693 800 (glPolygonMode\(GL_BACK, GL_LINE\);) 800 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (24) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 316 918 (Reversing and Culling Polygon Faces) 918 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 446 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 451 1690 (Polygons whose vertices appear in a counterclockwise order on the screen are called ) 1690 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2035 451 115 (front-) 115 SB
345 510 126 (facing) 126 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
471 510 1653 (. You can construct the surface of any reasonable solid from polygons of consistent) 1653 SB
345 569 228 (orientation.) 228 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 676 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 681 1494 (You can swap what OpenGL considers the back face by using the function:) 1494 SB
225 839 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 838 258 (glFrontFace) 258 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
583 839 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
787 839 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
895 839 30 (\);) 30 SB
339 911 1276 (Controls how front-facing polygons are determined. By default, ) 1276 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1615 911 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1723 911 404 ( is GL_CCW, which) 404 SB
339 970 1668 (corresponds to a counterclockwise orientation of the ordered vertices of a projected) 1668 SB
339 1029 696 (polygon in window coordinates. If ) 696 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1035 1029 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1143 1029 999 ( is GL_CW, faces with a clockwise orientation are) 999 SB
339 1088 474 (considered front-facing.) 474 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1195 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1200 1778 (In a completely enclosed surface constructed from polygons with a consistent orientation,) 1778 SB
345 1259 1755 (none of the back-facing polygons are ever visible, they are always obscured by the front-) 1755 SB
345 1318 1718 (facing polygons. In this situation, you can maximize drawing speed by having OpenGL) 1718 SB
345 1377 1335 (discard polygons as soon as it determines that they are back-facing.) 1335 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1484 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1489 1339 (To instruct OpenGL to discard front- or back-facing polygons, use:) 1339 SB
225 1647 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1646 227 (glCullFace) 227 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
552 1647 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
756 1647 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
864 1647 30 (\);) 30 SB
339 1719 1785 (Indicates which polygons should be discarded \(culled\) before they are converted to screen) 1785 SB
339 1778 346 (coordinates. The ) 346 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
685 1778 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
793 1778 1372 ( is either GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK to) 1372 SB
339 1837 1770 (indicate front-, back-facing, or all polygons. To take effect, culling must be enabled using) 1770 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
339 1896 221 (glEnable\(\)) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
560 1897 1038 ( with the GL_CULL_FACE; it can be disabled with ) 1038 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1598 1896 229 (glDisable\(\)) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1827 1897 271 ( and the same) 271 SB
339 1956 200 (argument.) 200 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2063 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2068 1732 (By default, filled polygons are drawn with a solid pattern. They can also be filled with a) 1732 SB
345 2127 1400 (32x32 bit window-aligned stipple pattern, which can be specified with:) 1400 SB
225 2285 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 2284 359 (glPolygonStipple) 359 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
684 2285 312 (\(cont Glubyte *) 312 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
996 2285 102 (mask) 102 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1098 2285 30 (\);) 30 SB
339 2357 1350 (Defines the current stipple pattern for filled polygons. the argument ) 1350 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1689 2357 102 (mask) 102 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1791 2357 322 ( is a pointer to a) 322 SB
339 2416 1759 (32x32 bitmap that\222s interpreted as a mask of 0s and 1s.  Polygon stippling is enabled and) 1759 SB
339 2476 352 (disabled by using ) 352 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
691 2475 221 (glEnable\(\)) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
912 2476 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1009 2475 229 (glDisable\(\)) 229 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1238 2476 788 ( with GL_POLYGON_STIPPLE as the) 788 SB
339 2535 200 (argument.) 200 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (25) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 394 (Normal Vectors) 394 SB
0 0 0 fC
/fm 256 def
225 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
261 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
297 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
333 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
369 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
405 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
441 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
477 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
513 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
549 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
/fm 256 def
585 389 M -12 0 0 -6 12 0 0 6 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 459 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 464 1597 (A normal vector \(or normal for short\) is a vector that points in a direction that is) 1597 SB
345 523 527 (perpendicular to a surface.) 527 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 630 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 635 1815 (For a flat surface one perpendicular direction suffices for every point on the surface, but for) 1815 SB
345 694 1664 (a general curved surface, the normal direction might be different at each point. With) 1664 SB
345 753 1002 (OpenGL you can specify a normal for each vertex.) 1002 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 860 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 865 1776 (Vertices may share the same normal, but you can\222t assign normals anywhere other than at) 1776 SB
345 924 240 (the vertices.) 240 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1031 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1036 977 (To set the current normal for subsequent calls to ) 977 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1322 1035 214 (glVertex\(\)) 214 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1536 1036 93 ( use:) 93 SB
225 1194 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1193 224 (glNormal3) 224 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
549 1194 160 ({bsidf}\() 160 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
709 1194 577 (TYPE nx, TYPE ny, TYPE nz) 577 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1286 1194 30 (\);) 30 SB
225 1280 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1279 224 (glNormal3) 224 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
549 1280 143 ({bsidf}) 143 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
692 1279 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
717 1280 136 (\(const ) 136 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
853 1280 176 (TYPE *v) 176 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1029 1280 30 (\);) 30 SB
339 1352 1670 (Sets the current normal vector as specified by the arguments. The nonvector version) 1670 SB
339 1412 257 (\(without the ) 257 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
596 1411 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
621 1412 849 (\) takes three arguments, which specify an \() 849 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1470 1412 190 (nx, ny, nz) 190 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1660 1412 464 (\) vector that is taken to) 464 SB
339 1472 1686 (be the normal. alternatively, you can use the vector version of this function \(with the ) 1686 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
2025 1471 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2050 1472 101 (\) and) 101 SB
339 1532 1459 (supply a single array of three elements to specify the desired normal. The ) 1459 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1798 1531 73 (b, s) 73 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1871 1532 110 (, and ) 110 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1981 1531 14 (i) 14 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1995 1532 176 ( versions) 176 SB
339 1591 1186 (scale their parameter values linearly to the range [-1.0, 1.0].) 1186 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1698 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1703 1726 (There is no magic to finding the normals for an object, most likely you have to perform) 1726 SB
345 1762 1723 (some calculations that might include taking derivatives. Normals are used in shading of) 1723 SB
345 1821 348 (polygon surfaces.) 348 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 26 26
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (26) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 309 CB
1460 7 226 325 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 403 263 (Viewing) 263 SB
/fm 256 def
225 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 480 M -15 0 0 -7 15 0 0 7 4 PP
1 F
n
/fm 256 def
394 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
436 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
478 480 M -10 0 0 -7 10 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 563 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 568 1795 (There is a transformation process to produce the desired results when viewing a geometric) 1795 SB
345 627 1783 (model and it is analogous to taking a photo with a camera. The same steps are required to) 1783 SB
345 686 1492 (setup the viewing position using OpenGL transformations. These steps are:) 1492 SB
342 770 51 (1. ) 60 SB
402 770 1652 (Setting the position of the camera \(on a tripod\) and aiming the camera at the scene.) 1652 SB
402 829 493 (\(viewing transformation\)) 493 SB
342 913 51 (2. ) 60 SB
402 913 1714 (Arrange the scene and components in the desired positions and orientation. \(modelling) 1714 SB
402 972 308 (transformation\)) 308 SB
342 1056 51 (3. ) 60 SB
402 1056 1447 (Choose the camera lens and adjust the zoom. \(projection transformation\)) 1447 SB
342 1140 51 (4. ) 60 SB
402 1140 1280 (Determine the size of the final output. \(viewport transformation\)) 1280 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1247 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1252 1797 (After these steps are complete the picture can be taken or the geometry can be rendered to) 1797 SB
345 1311 1812 (the frame buffer. OpenGL uses transformations based on the current transformation matrix.) 1812 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1418 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1423 1146 (The Viewing Transformation matrix is manipulated using ) 1146 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
1491 1422 291 (glTranslatef\(\)) 291 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1782 1423 279 ( and since this) 279 SB
345 1482 1569 (command accumulates transformations, it is important to clear the matrix using) 1569 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
345 1541 394 (glLoadIndentity\(\).) 394 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
739 1542 1283 ( It is important to set the current transformation matrix by using:) 1283 SB
225 1700 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1699 310 (glMatrixMode) 310 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
635 1700 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
839 1700 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
947 1700 30 (\);) 30 SB
339 1772 1765 (Specifies whether the modelview, projection, or texture matrix will be modified using the) 1765 SB
339 1831 1301 (GL_MODELVIEW, GL_PROJECTION, or GL_TEXTURE for ) 1301 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1640 1831 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1748 1831 255 (. Subsequent) 255 SB
339 1890 1823 (transformation commands manipulate the specified matrix. Note that only one matrix can be) 1823 SB
339 1949 1757 (modified at a time. By default, the modelview matrix is the one that is modifiable, and all) 1757 SB
339 2008 825 (three matrices contain the identity matrix.) 825 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2115 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2120 1022 (The general purpose transformation commands are ) 1022 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1367 2120 703 (glLoadIdentity\(\), glLoadMatrix*\(\),) 703 SB
345 2179 1209 (glMultMatrix*\(\), slTranslate*\(\), glScale*\(\), and glRotate*\(\)) 1209 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1554 2179 13 (.) 13 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2373 425 (Perspective View) 425 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2503 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2508 1790 (The glFrustum\(\) routine creates a matrix for a perspective-view frustum and multiplies the) 1790 SB
345 2567 395 (current matrix by it.) 395 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 27 27
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (27) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 194 608 (Orthographic Projection) 608 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 324 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 329 1733 (An orthographic projection creates a viewing volume that resembles a box. It is created) 1733 SB
345 388 119 (using:) 119 SB
225 546 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 545 168 (glOrtho) 168 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
493 546 230 (\(GLdouble ) 230 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
723 546 65 (left) 65 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
788 546 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1009 546 97 (right) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1106 546 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1327 546 139 (bottom) 139 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1466 546 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1687 546 64 (top) 64 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1751 546 13 (,) 13 SB
225 631 455 (                    Gldouble ) 455 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
680 631 91 (near) 91 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
771 631 221 (, Gldouble ) 221 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
992 631 59 (far) 59 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1051 631 30 (\);) 30 SB
339 703 1724 (Creates a matrix for an orthographic parallel viewing volume and multiplies the current) 1724 SB
339 762 1587 (matrix by it. The near clipping plane is a rectangle with the lower left corner at \() 1587 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1926 762 243 (left, bottom,) 243 SB
339 821 108 (-near) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
447 821 629 (\) and the upper right corner at \() 629 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1076 821 321 (right, top, -near) 321 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1397 821 748 (\). The far clipping plane is a rectangle) 748 SB
339 880 327 (with corners at \() 327 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
666 880 332 (left, bottom, -far) 332 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
998 880 131 (\) and \() 131 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1129 880 289 (right, top, -far) 289 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1418 880 154 (\). Both ) 154 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1572 880 91 (near) 91 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1663 880 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1760 880 59 (far) 59 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1819 880 308 ( can be positive) 308 SB
339 939 235 (or negative.) 235 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1133 638 (Viewport Transformation) 638 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1263 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1268 1767 (The viewport transformation corresponds to the stage where the size of the final image is) 1767 SB
345 1327 558 (chosen. It is specified using:) 558 SB
225 1485 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1484 239 (glViewPort) 239 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
564 1485 147 (\(GLint ) 147 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
711 1485 22 (x) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
733 1485 138 (, Glint ) 138 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
871 1485 22 (y) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
893 1485 174 (, Glsizei ) 174 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1067 1485 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1176 1485 174 (, Glsizei ) 174 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1350 1485 125 (height) 125 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1475 1485 30 (\);) 30 SB
339 1557 1652 (Defines a pixel rectangle in the window into which the final image is mapped. The \() 1652 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1991 1557 70 (x, y) 70 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2061 1557 17 (\)) 17 SB
339 1616 1226 (parameter specifies the lower left corner of the viewport, and ) 1226 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1565 1616 109 (width) 109 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1674 1616 97 ( and ) 97 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1771 1616 125 (height) 125 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1896 1616 236 ( are the size) 236 SB
339 1675 1370 (of the viewport rectangle. By default, the initial viewport values are \() 1370 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1709 1675 304 (0, 0, winWidth,) 304 SB
339 1734 206 (winHeight) 206 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
545 1734 30 (\).) 30 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1928 666 (Additional Clipping Planes) 666 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2058 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2063 1659 (In addition to the six clipping planes of the viewing volume you can define up to six) 1659 SB
345 2122 1270 (additional clipping planes to further restrict the viewing volume.) 1270 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2229 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2234 1732 (Each plane is defined by the coefficients of its equation: Ax+By+Cz+D=0. The clipping) 1732 SB
345 2293 1598 (planes are automatically transformed appropriately by the modelling and viewing) 1598 SB
345 2352 800 (transformations. They are created using:) 800 SB
225 2510 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 2509 247 (glClipPlane) 247 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
572 2510 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
776 2510 111 (plane) 111 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
887 2510 365 (, const Gldouble *) 365 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1252 2510 175 (equation) 175 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1427 2510 30 (\);) 30 SB
339 2582 589 (Defines a clipping plane. The ) 589 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
928 2582 175 (equation) 175 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1103 2582 1043 ( argument points to the four coefficients of the plane) 1043 SB
339 2641 553 (equation, Ax+By+Cz+D=0.) 553 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (28) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 309 CB
1460 7 226 325 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 403 414 (Display Lists) 414 SB
/fm 256 def
225 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 648 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 653 1776 (A display List is a group of OpenGL commands that have been stored for later execution.) 1776 SB
345 712 1703 (When a display list is invoked, the commands in it are executed in the order they were) 1703 SB
345 771 135 (issued.) 135 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 963 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 968 1768 (An example of using a display list may be that you need to draw a circle many times in an) 1768 SB
345 1027 705 (OpenGL session. Your options are:) 705 SB
342 1111 51 (1. ) 60 SB
402 1111 1677 (Create a loop to calculate the circle based on cosines and sines of arc segments. This) 1677 SB
402 1170 1727 (requires you to calculate the coordinates of the endpoints each time the circle is drawn.) 1727 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
342 1254 51 (2. ) 60 SB
402 1254 1722 (You could store the coordinates of the endpoints of the circle segments in an array and) 1722 SB
402 1313 1769 (pull them out as needed. This would incur the overhead of an extra variable, looping, and) 1769 SB
402 1372 718 (the actual test condition of the loop.) 718 SB
342 1456 51 (3. ) 60 SB
402 1456 1740 (What you would like is to define the circle once to OpenGL and have the ability to send) 1740 SB
402 1515 1677 (one command to OpenGL to draw the circle again. We assume the developers of the) 1677 SB
402 1574 1587 (library code are optimizing memory and the internal drawing aspect of the code.) 1587 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1766 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1771 1802 (A display list is created much the way we have defined drawing to OpenGL in the previous) 1802 SB
345 1830 1694 (examples. The difference being is you replace glBegin\(\) with glNewList\(\) and replace) 1694 SB
345 1889 1160 (glEnd\(\) with glEndList\(\). These commands are defined as:) 1160 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1962 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1961 215 (glNewList) 215 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
540 1962 172 (\(GLuint ) 172 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
712 1962 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
773 1962 213 (, GLenum ) 213 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
986 1962 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1094 1962 30 (\);) 30 SB
339 2034 1724 (Specifies the start of the list. All but a few restricted OpenGL calls are stored in the list) 1724 SB
339 2093 1763 (\(restricted routines are executed immediately during the creation of the display list\). The ) 1763 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2102 2093 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 2152 1801 (parameter is a unique positive integer that identifies the display list. The possible values for) 1801 SB
339 2211 74 (the ) 74 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
413 2211 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
521 2211 1505 ( parameter are GL_COMPILE and GL_COMPILE_AND_EXECUTE. Use) 1505 SB
339 2270 1769 (GL_COMPILE if you don't want the following OpenGL commands to actually display as) 1769 SB
339 2329 657 (they are placed in the display list.) 657 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2523 794 (What's stored in the display list.) 794 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2653 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2658 1808 (When you build the display list, only the values for the expressions are stored  in the list.  If) 1808 SB
345 2717 1661 (the values in an array are subsequently changed, the display list values don't change.) 1661 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (29) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 316 906 (What 's not stored in the display list:) 906 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 411 1207 (Here are the commands that are not stored in the display list:) 1207 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 531 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 540 375 (glDeleteLists\(\)) 375 SB
825 540 325 (glIsEnabled\(\)) 325 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 635 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 644 450 (glFeedbackBuffer\(\)) 450 SB
825 644 250 (glIsList\(\)) 250 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 739 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 748 250 (glFinish\(\)) 250 SB
825 748 350 (glPixelStore\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 843 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 852 225 (glFlush\(\)) 225 SB
825 852 350 (glReadPixels\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 947 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 956 300 (glGenLists\(\)) 300 SB
825 956 350 (glRenderMode\(\)) 350 SB
32 0 0 42 42 0 0 0 42 /Symbol font
285 1051 30 (\267 ) 60 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
345 1060 175 (glGet\(\)) 175 SB
825 1060 400 (glSelectBuffer\(\)) 400 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1242 559 (Executing Display lists) 559 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1372 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1377 1745 (After you have created a display list,  you can execute it by calling glCallList\(\). You can) 1745 SB
345 1436 1755 (execute the same display list as many times as you want and you an also intermix calls to) 1755 SB
345 1495 1166 (different display lists to perform immediate mode graphics.) 1166 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1653 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1652 208 (glCallList) 208 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
533 1653 172 (\(GLuint ) 172 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
705 1653 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
766 1653 30 (\);) 30 SB
339 1725 980 (This routine executes the display list specified by ) 980 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1319 1725 61 (list) 61 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1380 1725 747 (. The commands in the display list are) 747 SB
339 1784 1715 (executed in the order they were saved. If list has not been saved then nothing happens.) 1715 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 30 30
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (30) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 309 CB
1460 7 226 325 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 403 548 (The Color Model) 548 SB
/fm 256 def
225 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 480 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 480 M -2 0 0 -7 2 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 563 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 568 1683 (On a computer screen, the hardware causes each pixel on the screen to emit different) 1683 SB
345 627 1821 (amount of red, green, and blue light \(these are called the RGB values\). This is referred to as) 1821 SB
345 686 312 (the RGB mode.) 312 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 793 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 798 1825 (OpenGL also supports a color-index display mode which uses a color map \(or lookup table\)) 1825 SB
345 857 1813 (which is similar to using a palette to mix paints to prepare for a paint by the numbers scene.) 1813 SB
345 916 1790 (This useful if you are coloring a scene based on some external scalar value associated with) 1790 SB
345 975 274 (the geometry.) 274 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1082 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1087 1808 (You should base you decision on which color model you use on the hardware available and) 1808 SB
345 1146 614 (also on your application needs.) 614 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1253 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1258 979 (To specify a color to OpenGL in RGB mode use:) 979 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1416 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1415 158 (glColor) 158 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
483 1416 17 ([) 17 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
500 1415 50 (34) 50 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
550 1416 619 (]{b s i f d ub us ui}[v]\(TYPE {) 619 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1169 1416 92 (r, *v) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1261 1416 193 (}[,TYPE ) 193 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1454 1416 19 (r) 19 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1473 1416 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1638 1416 25 (g) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1663 1416 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1828 1416 25 (b) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1853 1416 182 ( [,TYPE ) 182 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2035 1416 25 (a) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
2060 1416 47 (]\);) 47 SB
339 1488 1772 (Sets the current R,G,B, and Alpha values. If you do not specify an Alpha value it is set to) 1772 SB
339 1547 85 (one.) 85 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1739 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1744 938 (To specify a color in the color-index mode use:) 938 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 1902 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 1901 159 (glIndex) 159 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
484 1902 24 ({) 24 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
508 1901 77 (sifd) 77 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
585 1902 41 (}[) 41 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
626 1901 25 (v) 25 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
651 1902 385 (]\([const] TYPE [*]) 385 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1036 1902 22 (c) 22 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1058 1902 30 (\);) 30 SB
339 1974 1752 (Sets the current color index. The first suffix for this command indicates the data type for) 1752 SB
339 2033 1770 (parameters: short, integer, float, or double. The second option suffix is v, which indicates) 1770 SB
339 2092 1766 (that the argument is an array of values of the given data type \(the array contains only one) 1766 SB
339 2151 135 (value\).) 135 SB
/fm 256 def
5 5 199 2378 B
1 F
n
/fm 256 def
5 5 199 2378 B
1 F
n
/fm 256 def
336 5 205 2378 B
1 F
n
/fm 256 def
5 5 542 2378 B
1 F
n
/fm 256 def
1576 5 548 2378 B
1 F
n
/fm 256 def
5 5 2125 2378 B
1 F
n
/fm 256 def
5 5 2125 2378 B
1 F
n
/fm 256 def
5 84 199 2384 B
1 F
n
/fm 256 def
5 5 199 2469 B
1 F
n
/fm 256 def
5 5 199 2469 B
1 F
n
/fm 256 def
336 5 205 2469 B
1 F
n
/fm 256 def
2 84 542 2384 B
1 F
n
/fm 256 def
5 5 542 2469 B
1 F
n
/fm 256 def
1576 5 548 2469 B
1 F
n
/fm 256 def
5 84 2125 2384 B
1 F
n
/fm 256 def
5 5 2125 2469 B
1 F
n
/fm 256 def
5 5 2125 2469 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 337 91 205 2378 CB
362 2399 21 (?) 21 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
gs 1580 91 545 2378 CB
566 2399 1023 (What are a few examples of uses of the two modes.) 1023 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (31) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 689 (Specifying a Shading Model) 689 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 459 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 464 1664 (A line or filled polygon can be drawn with a single color \(flat shading\) or with many) 1664 SB
345 523 889 (different colors \(smooth shading, also called ) 889 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1234 523 357 (Gouraud Shading) 357 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1591 523 510 (\). You specify the desired) 510 SB
345 582 418 (shading model using:) 418 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 740 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 739 305 (glShadeModel) 305 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
630 740 204 (\(GLenum ) 204 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
834 740 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
942 740 30 (\);) 30 SB
339 812 573 (Sets the shading model. The ) 573 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
912 812 108 (mode) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1020 812 1105 ( parameter can be either GL_SMOOTH \(the default\) or) 1105 SB
339 871 227 (GL_FLAT.) 227 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1063 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1068 1777 (With flat shading, the color of one vertex of a primitive is duplicated across the primitives) 1777 SB
345 1127 1830 (vertices. With smooth shading, the color at each vertex is treated individually. For a line, the) 1830 SB
345 1186 1818 (colors along the line segment are interpolated between the vertex colors. For a polygon, the) 1818 SB
345 1245 1805 (colors for the interior of the polygon are interpolated between the vertex colors. This is the) 1805 SB
345 1304 1251 (behaviour we want to see when dealing with data visualization.) 1251 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 1478 CB
1460 7 226 1494 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 1572 275 (Lighting) 275 SB
/fm 256 def
225 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 1649 M -15 0 0 -7 15 0 0 7 4 PP
1 F
n
/fm 256 def
394 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
436 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
478 1649 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 1732 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1737 1611 (In the real world when we view a surface and its color, we are actually seeing the) 1611 SB
345 1796 1761 (distribution of photon energies that arrive at your eye and trigger your cone cells.  Those) 1761 SB
345 1855 1776 (photons come from various light sources, some of which are absorbed and some of which) 1776 SB
345 1914 259 (are reflected.) 259 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2106 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2111 1781 (OpenGL approximates light and lighting as if light can be broken into red, green, and blue) 1781 SB
345 2170 1758 (components. The color of light sources is characterized by the amount of red, green, and) 1758 SB
345 2229 1695 (blue light they emit. The material of surfaces is characterized by the percentage of the) 1695 SB
345 2288 1616 (incoming red, green, and blue components that are reflected in various directions.) 1616 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (32) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 329 1155 (Emitted, Ambient, Diffuse, and Specular Light) 1155 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 544 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 549 1702 (Emitted light is the simplest, it originates from an object and is unaffected by any light) 1702 SB
345 608 163 (sources.) 163 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 715 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 720 90 (The ) 90 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
435 720 161 (ambient) 161 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
596 720 1520 ( component is the light from that source that's been scattered so much by the) 1520 SB
345 779 1700 (environment that its direction is impossible to determine. When ambient light strikes a) 1700 SB
345 838 746 (surface it is scattered in all directions.) 746 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 945 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
345 950 146 (Diffuse) 146 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
491 950 1603 ( light comes from one direction, so it is brighter if it comes down squarely on the) 1603 SB
345 1009 1615 (surface rather than at an angle.  Any light coming from any direction has a diffuse) 1615 SB
345 1068 234 (component.) 234 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1175 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1180 1749 (Specular light comes from a direction and bounces off a surface in a particular direction.) 1749 SB
345 1239 1776 (Shiny metal and plastic have a high specular component and chalk and carpet have almost) 1776 SB
345 1298 939 (none. You can think of specularity as shininess.) 939 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1492 395 (Material Colors) 395 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1622 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1627 1810 (Material colors control the amount of red, green, and/or blue components that are reflected) 1810 SB
345 1686 1817 (off a surface. If only the red component is specified for a surfaces then when a white light is) 1817 SB
345 1745 1809 (pointed at that surface, the red component is reflected and the green and blue component is) 1809 SB
345 1804 1763 (absorbed. If a pure red light is used, the surface is still red. If a green or blue light is used) 1763 SB
345 1863 1456 (the surface is black because the green and blue components are absorbed.) 1456 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2057 574 (Creating Light Sources) 574 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2187 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2192 1757 (Light sources are created with a number of different properties to control their color and) 1757 SB
345 2251 658 (source type. to create a light use:) 658 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 2409 100 (void ) 100 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
325 2408 155 (glLight) 155 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
480 2409 337 ({if}[v]\(GLenum ) 337 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
817 2409 92 (light) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
909 2409 114 (, GLe) 114 SB
1023 2409 49 (nu) 49 SB
1072 2409 50 (m ) 50 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1122 2409 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1255 2409 165 (, TYPE ) 165 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1420 2409 130 (param) 130 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1550 2409 30 (\);) 30 SB
339 2481 634 (This creates a light specified by ) 634 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
973 2481 92 (light) 92 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1065 2481 166 ( which c) 166 SB
1231 2481 22 (a) 22 SB
1253 2481 749 (n be GL_LIGHT0, GL_LIGHT1.., or) 749 SB
339 2540 1338 (GL_LIGHT7. The characteristic of the light being set is defined by ) 1338 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1677 2540 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1810 2540 347 ( which specifies a) 347 SB
339 2599 1450 (named parameter. The param argument indicates the values to which the ) 1450 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1789 2599 133 (pname) 133 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
339 2658 1740 (characteristic is set. It is a pointer to a group of values if the vector value is used, or the) 1740 SB
339 2717 858 (value itself if the nonvector version is used.) 858 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (33) 42 SB
0 lc
0 lj
0 0 0 pC
6 3 SP
206 206 206 fC
/fm 256 def
gs 1462 40 225 211 CB
1460 7 226 227 B
1 F
S
n
gr
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
0 0 0 fC
225 305 564 (Texture Mapping) 564 SB
/fm 256 def
225 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
267 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
309 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
351 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
393 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
435 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
477 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
519 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
561 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
603 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
645 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
687 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
729 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
/fm 256 def
771 382 M -14 0 0 -7 14 0 0 7 4 PP
1 F
n
32 0 0 50 50 0 0 0 50 /Symbol font
285 465 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 470 1725 (Texture maps are simply bitmaps that are pasted onto a surface. The bitmap can be any) 1725 SB
345 529 1789 (image, like a scanned image of a brick wall or a concrete surface or maybe a sunset. When) 1789 SB
345 588 1801 (you paste a texture on a polygon, the system ensures that all the transformations applied to) 1801 SB
345 647 1787 (the underlying geometry are also performed to the bitmap. Textures can also be applied to) 1787 SB
345 706 1565 (all the other geometric primitives: points, lines, polygons, bitmaps, and images.) 1565 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 813 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 818 1765 (Textures are simply rectangular arrays of data, the individual values in a texture array are) 1765 SB
345 877 350 (sometimes called ) 350 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
695 877 113 (texels) 113 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
808 877 1355 (.. Our job is to tell OpenGL how to orient the geometric primitive in) 1355 SB
345 936 577 (the rectangular texture array.) 577 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1130 482 (Specify the Texture) 482 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1260 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1265 1790 (The texture is a single image and is usually thought of as being two dimensional, but it can) 1790 SB
345 1324 1805 (also be one dimensional. The data describing the texture map ca be one, two, three, or four) 1805 SB
345 1383 1439 (values per texel, usually representing the RGBA quadruple for the color.) 1439 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1490 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 1495 1779 (Using an advanced method called mipmapping, you can specify a single a single texture in) 1779 SB
345 1554 1750 (different resolutions, this allows you to avoid mapping a full resolution texture map on a) 1750 SB
345 1613 1801 (wall that is far in the distance. This is the idea of level of detail based on a distance from an) 1801 SB
345 1672 1331 (observer, why not draw the least costly texture that will do the job.) 1331 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 1866 1324 (Indicate how the texture is to be applied to Each Pixel) 1324 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 1996 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2001 1728 (There are three different choices you have in applying the texture map to the geometric) 1728 SB
345 2060 1705 (primitive. First you ca simply specify the texel value as the final pixel color, this is the ) 1705 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
2050 2060 108 (decal) 108 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2119 1704 (mode in which the texture is painted on the surface. Next you could use the texture to) 1704 SB
345 2178 1779 (modulate or scale the fragments color. This technique is useful in combining the effects of) 1779 SB
345 2237 1779 (lighting and texturing. Finally you could specify that a constant color be blended with that) 1779 SB
345 2296 777 (of the fragment based on texture value.) 777 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 2490 673 (Enabling Texture Mapping) 673 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 2620 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 2625 1746 (You need to enable texture mapping before drawing your scene. Texturing is enabled or) 1746 SB
345 2684 1796 (disables using glEnable\(\) or glDisable\(\) with the symbolic constant GL_TEXTURE_1D or) 1796 SB
345 2743 1217 (GL_TEXTURE_2D for one or two dimensional respectively.) 1217 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
0 0 0 fC
225 75 1084 (Advanced Computer Graphics and Data Visualization) 1084 SB
1862 75 163 (35.6961) 163 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1130 2942 97 (Page ) 97 SB
1227 2942 42 (34) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
225 194 1680 (Draw the Scene Supplying both Texture and Geometric Coordinates) 1680 SB
32 0 0 50 50 0 0 0 50 /Symbol font
285 324 36 (\267 ) 60 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
345 329 1797 (You need to specify how the texture is to be aligned relative to the geometric fragments to) 1797 SB
345 388 1802 (which it's to be applied before it is glued on. If you want to paste an image of bricks onto a) 1802 SB
345 447 1774 (square, you would probably assign texture coordinates \(0,0\), \(1,0\), \(1,1\), and \(0,1\) to the) 1774 SB
345 506 1763 (four corners of the wall. If the wall is large you may want to specify several copies of the) 1763 SB
345 565 1701 (texture to cover the whole wall, in this case the texture should be designed so that the) 1701 SB
345 624 1728 (bricks on the right side of the image blend nicely with the bricks on the right side of the) 1728 SB
345 683 887 (image and similarly with the top and bottom.) 887 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 34
% TrueType font name key:
%    MSTT31c105 = 3e5fDTimes New RomanF00000032000001900001
%    MSTT31c112 = 3e5fDTimes New RomanF0000002a000001900001
%    MSTT31c11f = 3e5fDTimes New RomanF00000032000001900000
%    MSTT31c12c = 3e5fDTimes New RomanF00000010000001900000
%    MSTT31c139 = 3e5fDTimes New RomanF0000003a000002bc0000
%    MSTT31c146 = 3e5fDTimes New RomanF00000032000002bc0000
%    MSTT31c153 = 3e5fDTimes New RomanF0000004e000001900000
%    MSTT31c162 = 39bfDTimes New RomanF0000004b000002bc0000
%    MSTT31c16f = 39bfDTimes New RomanF0000005c000002bc0000
%    MSTT31c17c = 39bfDSymbolF00000032000001900000
%    MSTT31c187 = 39bfDSymbolF00000032000002bc0000
%    MSTT31c192 = 39bfDTimes New RomanF0000003a000001900000
%    MSTT31c19f = 39bfDTimes New RomanF0000004b000001900000
%    MSTT31c1ac = 39bfDTimes New RomanF00000032000002bc0001
%    MSTT31c1b9 = 39bfDCourier NewF0000002a000001900000
%    MSTT31c1cd = 39bfDArialF0000002a000001900000
%    MSTT31c1d8 = 39bfDTimes New RomanF00000032000001900000
%    MSTT31c1e5 = 4537DTimes New RomanF00000032000001900001
%    MSTT31c1f2 = 4537DTimes New RomanF00000032000001900000
%    MSTT31c1ff = 4537DTimes New RomanF0000002a000001900001
%    MSTT31c20c = 4537DTimes New RomanF00000010000001900000
%    MSTT31c219 = 4537DTimes New RomanF0000004b000002bc0000
%    MSTT31c226 = 4537DTimes New RomanF0000005c000002bc0000
%    MSTT31c233 = 4537DTimes New RomanF00000000000001900000
%    MSTT31c240 = 4537DSymbolF00000032000001900000
%    MSTT31c24b = 4537DTimes New RomanF0000001d000002bc0000
%    MSTT31c258 = 4537DTimes New RomanF0000003a000002bc0000
%    MSTT31c265 = 4537DSymbolF00000032000002bc0000
%    MSTT31c270 = 4537DTimes New RomanF00000032000002bc0000
%    MSTT31c27d = 4537DTimes New RomanF0000003a000001900000
%    MSTT31c28a = 4537DTimes New RomanF0000004b000001900000
%    MSTT31c297 = 4537DTimes New RomanF00000032000002bc0001
%    MSTT31c2a4 = 4537DCourier NewF0000002a000001900000
%    MSTT31c2b0 = 4537DCourier NewF00000021000001900000
%    MSTT31c2bc = 4537DSymbolF0000002a000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
