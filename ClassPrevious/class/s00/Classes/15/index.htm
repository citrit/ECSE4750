<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Rensselaer Polytechnic Institute ECSE-</title>
</head>

<body bgcolor="#FFFFFF">

<h1 align="center">Rensselaer Polytechnic Institute <br>
ECSE-4750 Computer Graphics, Fall 1999<br>
Class 15 </h1>

<p>&nbsp;</p>

<hr width="75%">

<h1>Midterm</h1>

<p>The answers the to the midterm are <a href="MidTerm-Ans.pdf">here</a>.</p>

<h1>Term Project</h1>

<h2>Intro</h2>

<ol>
    <li>A term project will be worth 25% of your grade.</li>
    <li>This may be done by a team, and may be combined with
        another course's project if you get the approval of
        everyone involved. </li>
    <li>It may build on previous work, either by you or someone
        else, with their permission, provided that you mention
        this. For example, you may build on software posted on
        the net. Since in the real world, much more money is
        spent modifying existing software than writing new
        software, extending an existing program is quite ok with
        me. </li>
    <li>You may <em>use any computer</em>, such as a Sun, RS
        6000, Vaxstation, Mac, PC, or a home computer, provided
        that you can get hardcopy off the screen to demonstrate
        the project. However it will be harder to do a good
        project on a small computer, such as an Apple II. </li>
    <li>You may <em>use any language or GUI</em>. If you start
        with a higher level package, your project should be
        fancier. </li>
    <li>Your project must contain <em>both graphical input and
        output</em>; a batch mode output only system is not
        acceptable. Typical input might include menus, mouse, or
        dials. The subject may be anything that illustrates that
        you have learned something in graphics. The best projects
        apply graphics ideas to some other subject. <p>Nevertheless,
        if you are doing an excellent set of web pages for
        someone, which involved talking to actual users to
        formulate requirements, and all the good stuff, then your
        project might be output-only. </p>
    </li>
    <li>Some imagination would be nice. For example, a tetris
        game is banal. </li>
    <li>The project will be due on the date listed below. The
        penalty for handing it in late will be 5% per day. Plan
        to have it actually ready earlier in case your disk
        crashes or account expires. You may pick up your projects
        after they are graded. </li>
    <li>Up to half the grade may be on the documentation and
        examples. </li>
    <li>The project must be ethical. E.g., a project designed to
        harass someone else is unacceptable. </li>
</ol>

<h2>Possible Term Projects</h2>

<ol>
    <li>Do a useful project for someone at RPI. </li>
    <li>Install a new OS, such as Plan 9, and do something
        interesting. </li>
    <li>Look at MacDraw, or xfig, and implement something better.
    </li>
    <li>Extend Imagemagick. </li>
    <li>Browse the contributed X software on the system, find
        something else interesting, and modify it. </li>
    <li>Look in the Usenet newsgroup comp.sources.x, find
        something you like, and modify it. </li>
    <li>Implement a music scoring system </li>
    <li>Simulate a racketball game including 3-D bounces, spins,
        etc. </li>
    <li>Simulate a yacht race such as the America Cup. Include
        wind, currents, etc. </li>
    <li>Simulate an auto race including cars bouncing off each
        other. </li>
    <li>Simulate travel to an L-5 colony, including transfer
        orbits, raw materials coming from the moon, and rockets
        from the earth. </li>
    <li>Read ahead in the text and implement something with 3-D
        and a really nice user interface. </li>
    <li>Read some of the journals on graphics. such as the
        SIGGRAPH proceedings, which are issues of the journal <em>Computer
        Graphics</em>, or the SIGGRAPH course notes, which are
        catalogued under SIGGRAPH, find an interesting idea, and
        implement it. </li>
    <li>Animate some data structure or algorithm. Show how a sort
        routine works, or how you rotate a tree to balance it. </li>
    <li>A recent CACM had a paper on verifying a user's identity
        by measuring the time between keystrokes as he types his
        name. Test this. The graphical input might be assorted
        options that you would set with sliders etc. </li>
    <li>Do a psychological experiment on users --- how well they
        can match colors in different color spaces, how easily
        they can use different types of physical devices for the
        same logical device, etc. </li>
    <li>Experiment with different dithering methods. Extend this
        to a tutorial. Compare the times to implement and times
        to execute of several different circle algorithms. </li>
    <li>Make stereo pictures, photo them on slide film, and put
        them in a ViewMaster. </li>
</ol>

<h2>Dates</h2>

<dl>
    <dt>Tues March 21: </dt>
    <dd>The title, team and 100 word description (must be typed!)
        If you are in a team, it helps us if write list <em>all</em>
        your names in the <em>same</em> order on everything that
        you submit. Please submit via email to <a
        href="mailto:citrit@rpi.edu">citrit@rpi.edu</a> with the
        Topic as &quot;Term Project Submission&quot;, thanks. </dd>
    <dt>Tues April: </dt>
    <dd>1 page description of progress so far. Please submit via
        email to <a href="mailto:citrit@rpi.edu">citrit@rpi.edu</a>
        with the Topic as &quot;Term Project Progress&quot;,
        thanks. </dd>
    <dt>Tues April 18: </dt>
    <dd>some working code due. This should be a zipped file
        containg all the code, some makefile/project, and a
        README explaining the code and listing Team members.</dd>
    <dt>Tues April 25: </dt>
    <dd>the final tested, documented, project. </dd>
</dl>

<h2>Documentation</h2>

<p>The documentation must include </p>

<ol>
    <li>a <em>user manual</em> telling how to use it, what error
        conditions the user might see, any limitations, etc. You
        don't have to remove all the limitations, but should
        describe them.</li>
    <li>a <em>system manual</em> giving internal details such as <ol>
            <li>overview of how it works,</li>
            <li>purpose and arguments of all procedures,</li>
            <li>purpose of common blocks or global variables,</li>
            <li>purpose of any other major variables,</li>
            <li>formats of any files used,</li>
            <li>error conditions, etc.</li>
        </ol>
    </li>
</ol>

<h2>Deliverables</h2>

<ol>
    <li>Code listing,</li>
    <li>Screendumps of examples showing the most complicated
        features working,</li>
    <li>Documentation, including user and system manuals.</li>
</ol>

<h2>Easy Ways to Lose Points</h2>

<ol>
    <li>Handing it in late.</li>
    <li>Spending all your time writing thousands of lines of
        code, and no time getting it working. (Write a smaller
        project, but do it well.)</li>
    <li>Insufficient documentation.</li>
    <li>General sloppiness.</li>
</ol>

<h1>Homework #6 - Due Thurs March 9</h1>

<p>Please use the CGWindow code shown in class. For 2,3, &amp; 4
implement these in the CGWindow DrawCallback (myDraw code on the
main.cpp). Hand in screen shots of your output and a listing of
your DrawCallback function.</p>

<ol>
    <li>What's the point of the Bresenham algorithms, since most
        computers have fast floating point units? </li>
    <li>Do the Bresenham line algorithm, version 4, from (0,0) to
        (20,17). Show d and y for each x, capture and printout. </li>
    <li>Do the Bresenham circle algorithm, version 12, for R=30,
        for the 2nd octant. </li>
    <li>Modify the Bresenham circle algorithm for pipelined
        architectures, as the line algorithm was modified. That
        is, use masking to remove the conditional. </li>
    <li>Write two simple programs to test whether the pipelining
        idea actually works. That is, write a small program with
        an <tt>if</tt> in a loop, and another program using
        masking. Put several lines in the loop body, so that the
        loop control code doesn't take all the time. Do the loop
        at least 10,000,000 times. Try both optimizing and
        nonoptimizing. Report your observations, including the
        architecture and times, and code listings. </li>
</ol>

<hr>

<p align="center"><font size="2">Copyright © 1999-2000, Thomas
D. Citriniti, citrit@rpi.edu. </font></p>
<div align="center"><center>

<address>
    <font size="2">ECSE Dept., Rensselaer Polytechnic Inst, Troy
    NY, 12180 USA</font> 
</address>
</center></div>
</body>
</html>
